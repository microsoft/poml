trigger: none

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: GITHUB_REPO
    value: 'microsoft/poml'
  # RUN_ID should be set at the queue time.
  # - name: RUN_ID
  #   value: '15574923104'

stages:
- stage: DownloadAndPublish
  displayName: 'Download GitHub Artifacts and Publish to Marketplace'
  jobs:
  - job: PublishVSIX
    displayName: 'Download and Publish VSIX Files'
    steps:
    - task: NodeTool@0
      displayName: 'Use Node.js'
      inputs:
        versionSpec: '22.x'

    - script: |
        npm install -g vsce
      displayName: 'Install VSCE'

    - script: |
        set -e

        # Create artifacts directory
        mkdir -p artifacts
        
        # Get list of artifacts from GitHub Actions run
        echo "Fetching artifacts from GitHub Actions run..."
        artifacts_response=$(curl -s -H "Authorization: token $(GITHUB_PAT)" \
          "https://api.github.com/repos/$(GITHUB_REPO)/actions/runs/$(RUN_ID)/artifacts")
        
        echo "Artifacts response:"
        echo "$artifacts_response" | jq '.'
        
        # Download each artifact
        echo "$artifacts_response" | jq -r '.artifacts[] | .archive_download_url' | while read -r download_url; do
          if [ -n "$download_url" ]; then
            echo "Downloading artifact from: $download_url"
            artifact_name=$(echo "$artifacts_response" | jq -r --arg url "$download_url" '.artifacts[] | select(.archive_download_url == $url) | .name')
            echo "Artifact name: $artifact_name"
            
            curl -L -H "Authorization: token $(GITHUB_PAT)" \
              "$download_url" -o "artifacts/${artifact_name}.zip"
            
            # Extract the zip file
            cd artifacts
            unzip -o "${artifact_name}.zip"
            rm "${artifact_name}.zip"
            cd ..
          fi
        done
        
        echo "Contents of artifacts directory:"
        find artifacts -type f -name "*.vsix" | head -20
      displayName: 'Download GitHub Action Artifacts'
      env:
        GITHUB_PAT: $(GITHUB_PAT)

    - script: |
        set -e

        # Function to parse target from filename
        parse_target() {
          local filename="$1"
          local basename=$(basename "$filename" .vsix)
          
          # Extract platform part from filename like: poml-darwin-arm64-0.0.5.vsix
          if [[ $basename =~ ^[^-]+-([^-]+)-([^-]+)-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            local os="${BASH_REMATCH[1]}"
            local arch="${BASH_REMATCH[2]}"
            
            # Map to VS Code marketplace target identifiers
            case "$os-$arch" in
              "darwin-arm64") echo "darwin-arm64" ;;
              "darwin-x64") echo "darwin-x64" ;;
              "linux-arm64") echo "linux-arm64" ;;
              "linux-x64") echo "linux-x64" ;;
              "win32-x64") echo "win32-x64" ;;
              *) echo "universal" ;;
            esac
          else
            echo "universal"
          fi
        }
        
        # Find all VSIX files and publish them
        find artifacts -type f -name "*.vsix" | while read -r vsix_file; do
          echo "Publishing VSIX file: $vsix_file"
          
          # Extract version and name from filename for logging
          filename=$(basename "$vsix_file")
          echo "Processing file: $filename"
          
          # Parse target platform
          target=$(parse_target "$vsix_file")
          echo "Detected target platform: $target"
          
          # Publish to VS Code Marketplace with target
          # Target already set at packaging so it's not needed here
          if [ "$target" = "universal" ]; then
            echo "Publishing as universal package..."
            # echo "vsce publish --packagePath \"$vsix_file\" --pat $(VSCE_PAT)"
            vsce publish --packagePath "$vsix_file" --pat $(VSCE_PAT)
          else
            echo "Publishing with target: $target"
            # echo "vsce publish --packagePath \"$vsix_file\" --target \"$target\" --pat $(VSCE_PAT)"
            # vsce publish --packagePath "$vsix_file" --target "$target" --pat $(VSCE_PAT)
            vsce publish --packagePath "$vsix_file" --pat $(VSCE_PAT)
          fi
          
          if [ $? -eq 0 ]; then
            echo "Successfully published: $filename (target: $target)"
          else
            echo "Failed to publish: $filename (target: $target)"
            exit 1
          fi
        done
        
        # Check if any VSIX files were found
        vsix_count=$(find artifacts -type f -name "*.vsix" | wc -l)
        if [ $vsix_count -eq 0 ]; then
          echo "No VSIX files found in artifacts!"
          exit 1
        else
          echo "Successfully processed $vsix_count VSIX files"
        fi
      displayName: 'Publish VSIX Files to Marketplace'
      env:
        VSCE_PAT: $(VSCE_PAT)
