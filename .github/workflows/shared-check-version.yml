name: Shared Check Version Workflow

on:
  workflow_call:
    outputs:
      version:
        description: "The version from the project files"
        value: ${{ jobs.check-version.outputs.version }}
      tag_version:
        description: "The version from the git tag"
        value: ${{ jobs.check-version.outputs.tag_version }}
      npm_version:
        description: "The version from package.json"
        value: ${{ jobs.check-version.outputs.npm_version }}
      pypi_version:
        description: "The version from pyproject.toml"
        value: ${{ jobs.check-version.outputs.pypi_version }}

jobs:
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_version: ${{ steps.get_tag.outputs.tag_version }}
      npm_version: ${{ steps.get_npm_version.outputs.npm_version }}
      pypi_version: ${{ steps.get_pypi_version.outputs.pypi_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from pyproject.toml
        id: get_pypi_version
        run: |
          PYPI_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "pypi_version=$PYPI_VERSION" >> $GITHUB_OUTPUT
          echo "PyPI version: $PYPI_VERSION"

      - name: Get version from package.json
        id: get_npm_version
        run: |
          NPM_VERSION=$(node -p "require('./packages/poml-build/package.json').version")
          echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT
          echo "NPM version: $NPM_VERSION"

      - name: Set primary version
        id: get_version
        run: |
          # Use pyproject.toml version as the primary version
          VERSION=${{ steps.get_pypi_version.outputs.pypi_version }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Primary version: $VERSION"

      - name: Get tag version
        id: get_tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
          else
            # For workflow_dispatch, use the primary version
            TAG_VERSION=${{ steps.get_version.outputs.version }}
            echo "Warning: Not triggered by tag, using project version for testing"
          fi
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $TAG_VERSION"

      - name: Verify versions are in sync
        run: |
          NPM_VERSION=${{ steps.get_npm_version.outputs.npm_version }}
          PYPI_VERSION=${{ steps.get_pypi_version.outputs.pypi_version }}
          
          echo "Comparing versions:"
          echo "  NPM (package.json): $NPM_VERSION"
          echo "  PyPI (pyproject.toml): $PYPI_VERSION"
          
          if [ "$NPM_VERSION" != "$PYPI_VERSION" ]; then
            echo "Error: Version mismatch between package.json ($NPM_VERSION) and pyproject.toml ($PYPI_VERSION)"
            exit 1
          fi
          
          echo "✅ All project versions are synchronized"

      - name: Verify version matches tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            PRIMARY_VERSION=${{ steps.get_version.outputs.version }}
            TAG_VERSION=${{ steps.get_tag.outputs.tag_version }}
            
            if [ "$PRIMARY_VERSION" != "$TAG_VERSION" ]; then
              echo "Error: Primary version ($PRIMARY_VERSION) does not match tag ($TAG_VERSION)"
              exit 1
            fi
            echo "✅ Version check passed!"
          else
            echo "Skipping version check for workflow_dispatch"
          fi
