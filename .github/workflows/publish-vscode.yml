name: VSCode Extension Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0, v1.2.3, etc.
  schedule:
    # Run daily at 10:00 PM UTC for nightly builds
    - cron: '0 22 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  check-version:
    if: startsWith(github.ref, 'refs/tags/')
    uses: ./.github/workflows/shared-check-version.yml

  generate-timestamp:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.value }}
      build_type: ${{ steps.build_type.outputs.type }}
    steps:
      - name: Determine build type
        id: build_type
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]] || ([[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ ! "${{ github.ref }}" =~ ^refs/tags/ ]]); then
            echo "type=nightly" >> $GITHUB_OUTPUT
            echo "Build type: nightly"
          else
            echo "type=production" >> $GITHUB_OUTPUT
            echo "Build type: production"
          fi

      - name: Generate timestamp
        id: timestamp
        shell: bash
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M)
          echo "value=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Generated timestamp: $TIMESTAMP"

  build:
    needs: [check-version, generate-timestamp]
    if: always() && (needs.check-version.result == 'success' || needs.check-version.result == 'skipped')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
          - os: ubuntu-24.04-arm
            platform: linux-arm64
          - os: windows-latest
            platform: win32-x64
          - os: macos-13
            platform: darwin-x64
          - os: macos-latest
            platform: darwin-arm64
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
      - name: Use Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: npm ci
      - run: npm run build-webview
      - run: npm run build-cli

      - name: Get current version
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Create development version
        if: needs.generate-timestamp.outputs.build_type == 'nightly'
        shell: bash
        run: |
          # Create a dev version with shared timestamp
          TIMESTAMP=${{ needs.generate-timestamp.outputs.timestamp }}
          echo "Using shared timestamp: $TIMESTAMP"
          node bump-version.js ${{ steps.get_version.outputs.version }} "$TIMESTAMP"

      - name: Package VSCode Extension for Windows
        if: matrix.platform == 'win32-x64'
        run: npm run package:win
      - name: Package VSCode Extension for ${{ matrix.platform }}
        if: matrix.platform != 'win32-x64'
        run: npm run package -- --target ${{ matrix.platform }}

      # Find and prepare VSIX file
      - name: Find VSIX file
        id: find-vsix
        shell: bash
        run: |
          VSIX_FILE=$(find . -name "*.vsix" -type f | head -1)
          if [ -z "$VSIX_FILE" ]; then
            echo "No VSIX file found!"
            exit 1
          fi
          echo "vsix-file=$VSIX_FILE" >> $GITHUB_OUTPUT
          # Extract base name and create platform-specific name
          BASE_NAME=$(basename "$VSIX_FILE" .vsix)
          PLATFORM_VSIX="${BASE_NAME}.vsix"
          echo "platform-vsix-name=$PLATFORM_VSIX" >> $GITHUB_OUTPUT
          # Copy to platform-specific name (commented out because they are the same)
          # cp "$VSIX_FILE" "$PLATFORM_VSIX"
          echo "platform-vsix-file=$PLATFORM_VSIX" >> $GITHUB_OUTPUT

          # For nightly builds, also create latest versioned file
          if [[ "${{ needs.generate-timestamp.outputs.build_type }}" == "nightly" ]]; then
            PLATFORM_LATEST_VSIX="poml-${{ matrix.platform }}-latest.vsix"
            echo "platform-latest-vsix-name=$PLATFORM_LATEST_VSIX" >> $GITHUB_OUTPUT
            cp "$VSIX_FILE" "$PLATFORM_LATEST_VSIX"
            echo "platform-latest-vsix-file=$PLATFORM_LATEST_VSIX" >> $GITHUB_OUTPUT
          fi

      # Upload VSIX files as artifacts
      - name: Upload VSIX for ${{ matrix.platform }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.find-vsix.outputs.platform-vsix-name }}
          path: ${{ steps.find-vsix.outputs.platform-vsix-file }}
          compression-level: 0

      # Upload nightly builds to Cloudflare R2
      - name: Upload VSIX to Cloudflare R2 (nightly)
        if: needs.generate-timestamp.outputs.build_type == 'nightly'
        shell: bash
        run: |
          set -ex
          aws s3 cp "${{ steps.find-vsix.outputs.platform-vsix-file }}" \
            s3://poml/vscode/${{ steps.find-vsix.outputs.platform-vsix-name }} \
            --endpoint-url ${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
          aws s3 cp "${{ steps.find-vsix.outputs.platform-latest-vsix-file }}" \
            s3://poml/vscode/${{ steps.find-vsix.outputs.platform-latest-vsix-name }} \
            --endpoint-url ${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
