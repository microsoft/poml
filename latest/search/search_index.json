{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"POML Documentation","text":"<p>Welcome to the Prompt Orchestration Markup Language (POML) documentation.</p> <p>POML (Prompt Orchestration Markup Language) is a novel markup language designed to bring structure, maintainability, and versatility to advanced prompt engineering for Large Language Models (LLMs). It addresses common challenges in prompt development, such as lack of structure, complex data integration, format sensitivity, and inadequate tooling. POML provides a systematic way to organize prompt components, integrate diverse data types seamlessly, and manage presentation variations, empowering developers to create more sophisticated and reliable LLM applications.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Structured Prompting Markup: Employs an HTML-like syntax with semantic components such as <code>&lt;role&gt;</code>, <code>&lt;task&gt;</code>, and <code>&lt;example&gt;</code> to encourage modular design, enhancing prompt readability, reusability, and maintainability.</li> <li>Comprehensive Data Handling: Incorporates specialized data components (e.g., <code>&lt;document&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;img&gt;</code>) that seamlessly embed or reference external data sources like text files, spreadsheets, and images, with customizable formatting options.</li> <li>Decoupled Presentation Styling: Features a CSS-like styling system that separates content from presentation. This allows developers to modify styling (e.g., verbosity, syntax format) via <code>&lt;stylesheet&gt;</code> definitions or inline attributes without altering core prompt logic, mitigating LLM format sensitivity.</li> <li>Integrated Templating Engine: Includes a built-in templating engine with support for variables (<code>{{ }}</code>), loops (<code>for</code>), conditionals (<code>if</code>), and variable definitions (<code>&lt;let&gt;</code>) for dynamically generating complex, data-driven prompts.</li> <li>Rich Development Toolkit:</li> <li>IDE Extension (Visual Studio Code): Provides essential development aids like syntax highlighting, context-aware auto-completion, hover documentation, real-time previews, inline diagnostics for error checking, and integrated interactive testing.</li> <li>Software Development Kits (SDKs): Offers SDKs for Node.js (JavaScript/TypeScript) and Python for seamless integration into various application workflows and popular LLM frameworks.</li> </ul>"},{"location":"#sitemap","title":"Sitemap","text":"<ul> <li>Language Basics: Get started with POML syntax and structure.</li> <li>Write .poml Files: Learn how to create</li> <li>VS Code Extension: Enhance your development experience with the POML Visual Studio Code extension.</li> <li>TypeScript SDK: Use the POML TypeScript API for building applications.</li> <li>Python SDK: Integrate POML into your Python projects.</li> </ul>"},{"location":"#ecosystem-community-projects","title":"Ecosystem &amp; Community Projects","text":"<ul> <li>mini-poml-rs \u2013 Experimental Rust-based POML renderer for environments without JavaScript or Python interpreters.</li> <li>poml-ruby \u2013 Ruby gem implementation of POML for Ruby applications.</li> </ul>"},{"location":"#community","title":"Community","text":"<p>Join our Discord community: Connect with the team and other users on our Discord server.</p>"},{"location":"language/components/","title":"Components","text":""},{"location":"language/components/#basic-components","title":"Basic Components","text":""},{"location":"language/components/#audio","title":"Audio","text":"<p>Audio (<code>&lt;audio&gt;</code>) embeds an audio file in the content.</p> <p>Accepts either a file path (<code>src</code>) or base64-encoded audio data (<code>base64</code>). The MIME type can be provided via <code>type</code> or will be inferred from the file extension.</p>"},{"location":"language/components/#usages","title":"Usages","text":"<pre><code>&lt;Audio src=\"path/to/audio.mp3\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters","title":"Parameters","text":"<ul> <li>src: Path to the audio file. If provided, the file will be read and encoded as base64.</li> <li>base64: Base64-encoded audio data. Cannot be used together with <code>src</code>.</li> <li>alt: The alternative text to show when the image cannot be displayed.</li> <li>type: The MIME type of the audio (e.g., audio/mpeg, audio/wav). If not specified, it will be inferred from the file extension.     The type must be consistent with the real type of the file. The consistency will NOT be checked or converted.     The type can be specified with or without the <code>audio/</code> prefix.</li> <li>position: Can be one of: top, bottom, here. The position of the image. Default is <code>here</code>.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, multimedia. Only when specified as <code>multimedia</code>, the image will be shown.     Otherwise, the alt text will be shown. By default, it's <code>multimedia</code> when <code>alt</code> is not specified. Otherwise, it's undefined (inherit from parent).</li> </ul>"},{"location":"language/components/#bold","title":"Bold","text":"<p>Bold (<code>&lt;b&gt;</code>) emphasizes text in a bold style when using markup syntaxes.</p>"},{"location":"language/components/#usages_1","title":"Usages","text":"<pre><code>&lt;p&gt;&lt;b&gt;Task:&lt;/b&gt; Do something.&lt;/p&gt;\n</code></pre>"},{"location":"language/components/#parameters_1","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#captionedparagraph","title":"CaptionedParagraph","text":"<p>CaptionedParagraph (<code>&lt;cp&gt;</code> for short) creates a paragraph with a customized caption title.</p>"},{"location":"language/components/#usages_2","title":"Usages","text":"<pre><code>&lt;cp caption=\"Constraints\"&gt;\n  &lt;list&gt;\n    &lt;item&gt;Do not exceed 1000 tokens.&lt;/item&gt;\n    &lt;item&gt;Please use simple words.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/cp&gt;\n</code></pre>"},{"location":"language/components/#parameters_2","title":"Parameters","text":"<ul> <li>caption: The title or label for the paragraph. Required.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes.     By default, it's same as <code>caption</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#code","title":"Code","text":"<p>Code is used to represent code snippets or inline code in markup syntaxes.</p>"},{"location":"language/components/#usages_3","title":"Usages","text":"<pre><code>&lt;code inline=\"true\"&gt;const x = 42;&lt;/code&gt;\n</code></pre> <pre><code>&lt;code lang=\"javascript\"&gt;\nconst x = 42;\n&lt;/code&gt;\n</code></pre>"},{"location":"language/components/#parameters_3","title":"Parameters","text":"<ul> <li>inline: Boolean. Whether to render code inline or as a block. Default is <code>true</code>.</li> <li>lang: The language of the code snippet.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#header","title":"Header","text":"<p>Header (<code>&lt;h&gt;</code>) renders headings in markup syntaxes. It's commonly used to highlight titles or section headings. The header level will be automatically computed based on the context. Use SubContent (<code>&lt;section&gt;</code>) for nested content.</p>"},{"location":"language/components/#usages_4","title":"Usages","text":"<pre><code>&lt;Header syntax=\"markdown\"&gt;Section Title&lt;/Header&gt;\n</code></pre>"},{"location":"language/components/#parameters_4","title":"Parameters","text":"<ul> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#inline","title":"Inline","text":"<p>Inline (<code>&lt;span&gt;</code>) is a container for inline content. When used with markup syntaxes, it wraps text in an inline style, without any preceding or following blank characters. In serializer syntaxes, it's treated as a generic value. Inline elements are not designed to be used alone (especially in serializer syntaxes). One might notice problematic renderings (e.g., speaker not applied) when using it alone.</p>"},{"location":"language/components/#usages_5","title":"Usages","text":"<pre><code>&lt;p&gt;I'm listening to &lt;span&gt;music&lt;/span&gt; right now.&lt;/p&gt;\n</code></pre>"},{"location":"language/components/#parameters_5","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#italic","title":"Italic","text":"<p>Italic (<code>&lt;i&gt;</code>) emphasizes text in an italic style when using markup syntaxes.</p>"},{"location":"language/components/#usages_6","title":"Usages","text":"<pre><code>Your &lt;i&gt;italicized&lt;/i&gt; text.\n</code></pre>"},{"location":"language/components/#parameters_6","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#list","title":"List","text":"<p>List (<code>&lt;list&gt;</code>) is a container for multiple ListItem (<code>&lt;item&gt;</code>) elements. When used with markup syntaxes, a bullet or numbering is added.</p>"},{"location":"language/components/#usages_7","title":"Usages","text":"<pre><code>&lt;list listStyle=\"decimal\"&gt;\n  &lt;item&gt;Item 1&lt;/item&gt;\n  &lt;item&gt;Item 2&lt;/item&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"language/components/#parameters_7","title":"Parameters","text":"<ul> <li>listStyle: Can be one of: star, dash, plus, decimal, latin. The style for the list marker, such as dash or star. Default is <code>dash</code>.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#listitem","title":"ListItem","text":"<p>ListItem (<code>&lt;item&gt;</code>) is an item within a List component. In markup mode, it is rendered with the specified bullet or numbering style.</p>"},{"location":"language/components/#usages_8","title":"Usages","text":"<pre><code>&lt;list listStyle=\"decimal\"&gt;\n  &lt;item blankLine=\"true\"&gt;Item 1&lt;/item&gt;\n  &lt;item&gt;Item 2&lt;/item&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"language/components/#parameters_8","title":"Parameters","text":"<ul> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#newline","title":"Newline","text":"<p>Newline (<code>&lt;br&gt;</code>) explicitly adds a line break, primarily in markup syntaxes. In serializer syntaxes, it's ignored.</p>"},{"location":"language/components/#usages_9","title":"Usages","text":"<pre><code>&lt;br /&gt;\n</code></pre>"},{"location":"language/components/#parameters_9","title":"Parameters","text":"<ul> <li>newLineCount: Number. The number of linebreaks to add.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#paragraph","title":"Paragraph","text":"<p>Paragraph (<code>&lt;p&gt;</code>) is a standalone section preceded by and followed by two blank lines in markup syntaxes. It's mostly used for text contents.</p>"},{"location":"language/components/#usages_10","title":"Usages","text":"<pre><code>&lt;p&gt;Contents of the paragraph.&lt;/p&gt;\n</code></pre>"},{"location":"language/components/#parameters_10","title":"Parameters","text":"<ul> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#strikethrough","title":"Strikethrough","text":"<p>Strikethrough (<code>&lt;s&gt;</code>, <code>&lt;strike&gt;</code>) indicates removed or invalid text in markup syntaxes.</p>"},{"location":"language/components/#usages_11","title":"Usages","text":"<pre><code>&lt;s&gt;This messages is removed.&lt;/s&gt;\n</code></pre>"},{"location":"language/components/#parameters_11","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#subcontent","title":"SubContent","text":"<p>SubContent (<code>&lt;section&gt;</code>) renders nested content, often following a header. The headers within the section will be automatically adjusted to a lower level.</p>"},{"location":"language/components/#usages_12","title":"Usages","text":"<pre><code>&lt;h&gt;Section Title&lt;/h&gt;\n&lt;section&gt;\n  &lt;h&gt;Sub-section Title&lt;/h&gt;  &lt;!-- Nested header --&gt;\n  &lt;p&gt;Sub-section details&lt;/p&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"language/components/#parameters_12","title":"Parameters","text":"<ul> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#text","title":"Text","text":"<p>Text (<code>&lt;text&gt;</code>, <code>&lt;poml&gt;</code>) is a wrapper for any contents. By default, it uses <code>markdown</code> syntax and writes the contents within it directly to the output. When used with \"markup\" syntaxes, it renders a standalone section preceded and followed by one blank line. It's mostly used in the root element of a prompt, but it should also work in any other places. This component will be automatically added as a wrapping root element if it's not provided: 1. If the first element is pure text contents, <code>&lt;poml syntax=\"text\"&gt;</code> will be added. 2. If the first element is a POML component, <code>&lt;poml syntax=\"markdown\"&gt;</code> will be added.</p>"},{"location":"language/components/#usages_13","title":"Usages","text":"<pre><code>&lt;poml syntax=\"text\"&gt;\nContents of the whole prompt.\n\n1. Your customized list.\n2. You don't need to know anything about POML.\n&lt;/poml&gt;\n</code></pre> <p>To render the whole prompt in markdown syntax with a \"human\" speaker:</p> <pre><code>&lt;poml syntax=\"markdown\" speaker=\"human\"&gt;\n  &lt;p&gt;You are a helpful assistant.&lt;/p&gt;\n  &lt;p&gt;What is the capital of France?&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"language/components/#parameters_13","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#underline","title":"Underline","text":"<p>Underline (<code>&lt;u&gt;</code>) draws a line beneath text in markup syntaxes.</p>"},{"location":"language/components/#usages_14","title":"Usages","text":"<pre><code>This text is &lt;u&gt;underlined&lt;/u&gt;.\n</code></pre>"},{"location":"language/components/#parameters_14","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#intentions","title":"Intentions","text":""},{"location":"language/components/#example","title":"Example","text":"<p>Example is useful for providing a context, helping the model to understand what kind of inputs and outputs are expected. It can also be used to demonstrate the desired output style, clarifying the structure, tone, or level of detail in the response.</p>"},{"location":"language/components/#usages_15","title":"Usages","text":"<pre><code>&lt;example&gt;\n  &lt;input&gt;What is the capital of France?&lt;/input&gt;\n  &lt;output&gt;Paris&lt;/output&gt;\n&lt;/example&gt;\n</code></pre> <pre><code>&lt;task&gt;Summarize the following passage in a single sentence.&lt;/task&gt;\n&lt;example&gt;\n  &lt;input caption=\"Passage\"&gt;The sun provides energy for life on Earth through processes like photosynthesis.&lt;/input&gt;\n  &lt;output caption=\"Summary\"&gt;The sun is essential for energy and life processes on Earth.&lt;/output&gt;\n&lt;/example&gt;\n</code></pre>"},{"location":"language/components/#parameters_15","title":"Parameters","text":"<ul> <li>caption: The title or label for the example paragraph. Default is <code>Example</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>example</code>.</li> <li>captionStyle: Determines the style of the caption, applicable only for \"markup\" syntaxes. Default is <code>hidden</code>.   Options include <code>header</code>, <code>bold</code>, <code>plain</code>, or <code>hidden</code>.</li> <li>chat: Boolean. Indicates whether the example should be rendered in chat format.   When used in a example set (<code>&lt;examples&gt;</code>), this is inherited from the example set.   Otherwise, it defaults to <code>false</code> for \"serializer\" syntaxes and <code>true</code> for \"markup\" syntaxes.</li> <li>captionTextTransform: Specifies text transformation for the caption, applicable only for \"markup\" syntaxes.   Options are <code>upper</code>, <code>lower</code>, <code>capitalize</code>, or <code>none</code>. Default is <code>none</code>.</li> <li>captionColon: Boolean. Indicates whether to append a colon after the caption.   By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#exampleinput","title":"ExampleInput","text":"<p>ExampleInput (<code>&lt;input&gt;</code>) is a paragraph that represents an example input. By default, it's spoken by a human speaker in a chat context, but you can manually specify the speaker.</p>"},{"location":"language/components/#usages_16","title":"Usages","text":"<pre><code>&lt;input&gt;What is the capital of France?&lt;/input&gt;\n</code></pre> <p>When used with a template:</p> <pre><code>&lt;input&gt;What is the capital of {{country}}?&lt;/input&gt;\n</code></pre>"},{"location":"language/components/#parameters_16","title":"Parameters","text":"<ul> <li>caption: The title or label for the example input paragraph. Default is <code>Input</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>input</code>.</li> <li>speaker: The speaker for the example input. Default is <code>human</code> if chat context is enabled (see <code>&lt;example&gt;</code>).</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>hidden</code> if chat context is enabled. Otherwise, it's <code>bold</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionColon: Boolean. Indicates whether to append a colon after the caption.   By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#exampleoutput","title":"ExampleOutput","text":"<p>ExampleOutput (<code>&lt;output&gt;</code>) is a paragraph that represents an example output. By default, it's spoken by a AI speaker in a chat context, but you can manually specify the speaker.</p>"},{"location":"language/components/#usages_17","title":"Usages","text":"<pre><code>&lt;output&gt;The capital of France is Paris.&lt;/output&gt;\n</code></pre> <p>When used with a template:</p> <pre><code>&lt;output&gt;The capital of {{country}} is {{capital}}.&lt;/output&gt;\n</code></pre>"},{"location":"language/components/#parameters_17","title":"Parameters","text":"<ul> <li>caption: The title or label for the example output paragraph. Default is <code>Output</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>output</code>.</li> <li>speaker: The speaker for the example output. Default is <code>ai</code> if chat context is enabled (see <code>&lt;example&gt;</code>).</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>hidden</code> if chat context is enabled. Otherwise, it's <code>bold</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionColon: Boolean. Indicates whether to append a colon after the caption.   By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#exampleset","title":"ExampleSet","text":"<p>Example set (<code>&lt;examples&gt;</code>) is a collection of examples that are usually presented in a list. With the example set, you can manage multiple examples under a single title and optionally an introducer, as well as the same <code>chat</code> format. You can also choose to use <code>&lt;example&gt;</code> purely without example set.</p>"},{"location":"language/components/#usages_18","title":"Usages","text":"<pre><code>&lt;examples chat={{true}}&gt;\n  &lt;example&gt;\n    &lt;input&gt;What is the capital of France?&lt;/input&gt;\n    &lt;output&gt;Paris&lt;/output&gt;\n  &lt;/example&gt;\n  &lt;example&gt;\n    &lt;input&gt;What is the capital of Germany?&lt;/input&gt;\n    &lt;output&gt;Berlin&lt;/output&gt;\n  &lt;/example&gt;\n&lt;/examples&gt;\n</code></pre>"},{"location":"language/components/#parameters_18","title":"Parameters","text":"<ul> <li>caption: The title or label for the example set paragraph. Default is <code>Examples</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>examples</code>.</li> <li>chat: Boolean. Indicates whether the examples should be rendered in chat format.   By default, it's <code>true</code> for \"markup\" syntaxes and <code>false</code> for \"serializer\" syntaxes.</li> <li>introducer: An optional introducer text to be displayed before the examples.   For example, <code>Here are some examples:</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#hint","title":"Hint","text":"<p>Hint can be used anywhere in the prompt where you want to provide a helpful tip or explanation. It is usually a short and concise statement that guides the LLM in the right direction.</p>"},{"location":"language/components/#usages_19","title":"Usages","text":"<pre><code>&lt;hint&gt;Alice first purchased 4 apples and then 3 more, so she has 7 apples in total.&lt;/hint&gt;\n</code></pre>"},{"location":"language/components/#parameters_19","title":"Parameters","text":"<ul> <li>caption: The title or label for the hint paragraph. Default is <code>Hint</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>hint</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>bold</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionColon: Boolean. Indicates whether to append a colon after the caption.   By default, this is true for <code>bold</code> or <code>plain</code> captionStyle, and false otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#introducer","title":"Introducer","text":"<p>Introducer is a paragraph before a long paragraph (usually a list of examples, steps, or instructions). It serves as a context introducing what is expected to follow.</p>"},{"location":"language/components/#usages_20","title":"Usages","text":"<pre><code>&lt;introducer&gt;Here are some examples.&lt;/introducer&gt;\n</code></pre>"},{"location":"language/components/#parameters_20","title":"Parameters","text":"<ul> <li>caption: The title or label for the introducer paragraph. Default is <code>Introducer</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>introducer</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>hidden</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#outputformat","title":"OutputFormat","text":"<p>Output format deals with the format in which the model should provide the output. It can be a specific format such as JSON, XML, or CSV, or a general format such as a story, a diagram or steps of instructions. Please refrain from specifying too complex formats that the model may not be able to generate, such as a PDF file or a video.</p>"},{"location":"language/components/#usages_21","title":"Usages","text":"<pre><code>&lt;output-format&gt;Respond with a JSON without additional characters or punctuations.&lt;/output-format&gt;\n</code></pre>"},{"location":"language/components/#parameters_21","title":"Parameters","text":"<ul> <li>caption: The title or label for the output format paragraph. Default is <code>Output Format</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>outputFormat</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#question","title":"Question","text":"<p>Question (<code>&lt;qa&gt;</code>) is actually a combination of a question and a prompt for the answer. It's usually used at the end of a prompt to ask a question. The question is followed by a prompt for answer (e.g., <code>Answer:</code>) to guide the model to respond.</p>"},{"location":"language/components/#usages_22","title":"Usages","text":"<pre><code>&lt;qa&gt;What is the capital of France?&lt;/qa&gt;\n</code></pre>"},{"location":"language/components/#parameters_22","title":"Parameters","text":"<ul> <li>questionCaption: The title or label for the question paragraph. Default is <code>Question</code>.</li> <li>answerCaption: The title or label for the answer paragraph. Default is <code>Answer</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>question</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>bold</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#role","title":"Role","text":"<p>Specifies the role you want the language model to assume when responding. Defining a role provides the model with a perspective or context, such as a scientist, poet, child, or any other persona you choose.</p>"},{"location":"language/components/#usages_23","title":"Usages","text":"<pre><code>&lt;role&gt;You are a data scientist.&lt;/role&gt;\n</code></pre>"},{"location":"language/components/#parameters_23","title":"Parameters","text":"<ul> <li>caption: The title or label for the role paragraph. Default is <code>Role</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>role</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#stepwiseinstructions","title":"StepwiseInstructions","text":"<p>StepwiseInstructions that elaborates the task by providing a list of steps or instructions. Each step should be concise and clear, and the list should be easy to follow.</p>"},{"location":"language/components/#usages_24","title":"Usages","text":"<pre><code>&lt;stepwise-instructions&gt;\n  &lt;list&gt;\n    &lt;item&gt;Interpret and rewrite user's query.&lt;/item&gt;\n    &lt;item&gt;Think of a plan to solve the query.&lt;/item&gt;\n    &lt;item&gt;Generate a response based on the plan.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/stepwise-instructions&gt;\n</code></pre>"},{"location":"language/components/#parameters_24","title":"Parameters","text":"<ul> <li>caption: The title or label for the stepwise instructions paragraph. Default is <code>Stepwise Instructions</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>stepwiseInstructions</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#task","title":"Task","text":"<p>Task represents the action you want the language model to perform. It is a directive or instruction that you want the model to follow. Task is usually not long, but rather a concise and clear statement. Users can also include a list of steps or instructions to complete the task.</p>"},{"location":"language/components/#usages_25","title":"Usages","text":"<pre><code>&lt;task&gt;Cook a recipe on how to prepare a beef dish.&lt;/task&gt;\n</code></pre> <p>When including a list of steps: <pre><code>&lt;task&gt;\n  Planning a schedule for a travel.\n  &lt;list&gt;\n    &lt;item&gt;Decide on the destination and plan the duration.&lt;/item&gt;\n    &lt;item&gt;Find useful information about the destination.&lt;/item&gt;\n    &lt;item&gt;Write down the schedule for each day.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/task&gt;\n</code></pre></p>"},{"location":"language/components/#parameters_25","title":"Parameters","text":"<ul> <li>caption: The title or label for the task paragraph. Default is <code>Task</code>.</li> <li>captionSerialized: The serialized version of the caption when using \"serializer\" syntaxes. Default is <code>task</code>.</li> <li>captionStyle: Can be one of: header, bold, plain, hidden. Determines the style of the caption,   applicable only for \"markup\" syntaxes. Default is <code>header</code>.</li> <li>captionTextTransform: Can be one of: upper, level, capitalize, none. Specifies text transformation for the caption, applicable only for \"markup\" syntaxes. Default is <code>none</code>.</li> <li>captionEnding: Can be one of: colon, newline, colon-newline, none. A caption can ends with a colon, a newline or simply nothing.   If not specified, it defaults to <code>colon</code> for <code>bold</code> or <code>plain</code> captionStyle, and <code>none</code> otherwise.</li> <li>blankLine: Boolean. Whether to add one more blank line (2 in total) before and after the paragraph.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#data-displays","title":"Data Displays","text":""},{"location":"language/components/#document","title":"Document","text":"<p>Displaying an external document like PDF, TXT or DOCX.</p>"},{"location":"language/components/#usages_26","title":"Usages","text":"<p>To display a Word document without including the real multimedia: <pre><code>&lt;Document src=\"sample.docx\" multimedia=\"false\"/&gt;\n</code></pre></p>"},{"location":"language/components/#parameters_26","title":"Parameters","text":"<ul> <li>src: The source file to read the data from. This must be provided if records is not provided.</li> <li>buffer: Buffer. Document data buffer. Recommended to use <code>src</code> instead unless you want to use a string.</li> <li>base64: Base64 encoded string of the document data. Mutually exclusive with <code>src</code> and <code>buffer</code>.</li> <li>parser: Can be one of: auto, pdf, docx, txt. The parser to use for reading the data. If not provided, it will be inferred from the file extension.</li> <li>multimedia: Boolean. If true, the multimedias will be displayed. If false, the alt strings will be displayed at best effort. Default is <code>true</code>.</li> <li>selectedPages: The pages to be selected. This is only available for PDF documents. If not provided, all pages will be selected.   You can use a string like <code>2</code> to specify a single page, or slice like <code>2:4</code> to specify a range of pages (2 inclusive, 4 exclusive).   The pages selected are 0-indexed. Negative indexes like <code>-1</code> is not supported here.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#image","title":"Image","text":"<p>Image (<code>&lt;img&gt;</code>) displays an image in the content. Alternatively, it can also be shown as an alt text by specifying the <code>syntax</code> prop. Note that syntax must be specified as <code>multimedia</code> to show the image.</p>"},{"location":"language/components/#usages_27","title":"Usages","text":"<pre><code>&lt;Image src=\"path/to/image.jpg\" alt=\"Image description\" position=\"bottom\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters_27","title":"Parameters","text":"<ul> <li>src: The path to the image file.</li> <li>alt: The alternative text to show when the image cannot be displayed.</li> <li>base64: The base64 encoded image data. It can not be specified together with <code>src</code>.</li> <li>type: The MIME type of the image to be shown. If not specified, it will be inferred from the file extension.     If specified, the image will be converted to the specified type. Can be <code>image/jpeg</code>, <code>image/png</code>, etc., or without the <code>image/</code> prefix.</li> <li>position: Can be one of: top, bottom, here. The position of the image. Default is <code>here</code>.</li> <li>maxWidth: Number. The maximum width of the image to be shown.</li> <li>maxHeight: Number. The maximum height of the image to be shown.</li> <li>resize: Number. The ratio to resize the image to to be shown.</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, multimedia. Only when specified as <code>multimedia</code>, the image will be shown.     Otherwise, the alt text will be shown. By default, it's <code>multimedia</code> when <code>alt</code> is not specified. Otherwise, it's undefined (inherit from parent).</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#object","title":"Object","text":"<p>Object (<code>&lt;obj&gt;</code>, <code>&lt;dataObj&gt;</code>) displays external data or object content. When in serialize mode, it's serialized according to the given serializer.</p>"},{"location":"language/components/#usages_28","title":"Usages","text":"<pre><code>&lt;Object syntax=\"json\" data=\"{ key: 'value' }\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters_28","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml. The syntax or serializer of the content. Default is <code>json</code>.</li> <li>data: Object. The data object to render.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#table","title":"Table","text":"<p>Displaying a table with records and columns.</p>"},{"location":"language/components/#usages_29","title":"Usages","text":"<pre><code>&lt;table records=\"{{[{ name: 'Alice', age: 20 }, { name: 'Bob', age: 30 }]}}\" /&gt;\n</code></pre> <p>To import an excel file, and display the first 10 records in csv syntax:</p> <pre><code>&lt;table src=\"data.xlsx\" parser=\"excel\" maxRecords=\"10\" syntax=\"csv\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters_29","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, text, csv, tsv, xml. The output syntax of the content.</li> <li>records: Object. A list, each element is an object / dictionary / list of elements. The keys are the fields and the values are the data in cells.</li> <li>columns: Object. A list of column definitions. Each column definition is an object with keys \"field\", \"header\", and \"description\".   The field is the key in the record object, the header is displayed in the top row, and the description is meant to be an explanation.   Columns are optional. If not provided, the columns are inferred from the records.</li> <li>src: The source file to read the data from. This must be provided if records is not provided.</li> <li>parser: Can be one of: auto, csv, tsv, excel, json, jsonl. The parser to use for reading the data. If not provided, it will be inferred from the file extension.</li> <li>selectedColumns: Object. The selected columns to display. If not provided, all columns will be displayed.   It should be an array of column field names, e.g. <code>[\"name\", \"age\"]</code>; or a string like <code>2:4</code> to select columns 2 (inclusive) to 4 (exclusive).   There is a special column name called <code>index</code> which is the enumeration of the records starting from 0.   You can also use a special value called <code>+index</code> to add the index column to the original table.</li> <li>selectedRecords: Object. The selected records to display. If not provided, all records will be displayed.   It should be an array of record indices, e.g. <code>[0, 1]</code>; or a string like <code>2:4</code> to select records 2 (inclusive) to 4 (exclusive).</li> <li>maxRecords: Number. The maximum number of records to display. If not provided, all records will be displayed.</li> <li>maxColumns: Number. The maximum number of columns to display. If not provided, all columns will be displayed.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#utilities","title":"Utilities","text":""},{"location":"language/components/#aimessage","title":"AiMessage","text":"<p>Wrap the contents in a AI message.</p>"},{"location":"language/components/#usages_30","title":"Usages","text":"<pre><code>&lt;ai-msg&gt;Paris&lt;/ai-msg&gt;\n</code></pre>"},{"location":"language/components/#parameters_30","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#conversation","title":"Conversation","text":"<p>Display a conversation between system, human and AI.</p>"},{"location":"language/components/#usages_31","title":"Usages","text":"<pre><code>&lt;conversation messages=\"{{[{ speaker: 'human', content: 'What is the capital of France?' }, { speaker: 'ai', content: 'Paris' }]}}\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters_31","title":"Parameters","text":"<ul> <li>messages: Object. A list of message. Each message should have a <code>speaker</code> and a <code>content</code> field.</li> <li>selectedMessages: The messages to be selected. If not provided, all messages will be selected.   You can use a string like <code>2</code> to specify a single message, or slice like <code>2:4</code> to specify a range of messages (2 inclusive, 4 exclusive).   Or use <code>-6:</code> to select the last 6 messages.</li> </ul>"},{"location":"language/components/#folder","title":"Folder","text":"<p>Displays a directory structure as a tree.</p>"},{"location":"language/components/#usages_32","title":"Usages","text":"<p>To display a directory structure with a filter for Python files: <pre><code>&lt;folder src=\"project_dir\" filter=\".*\\.py$\" maxDepth=\"3\" /&gt;\n</code></pre></p>"},{"location":"language/components/#parameters_32","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, text, xml. The output syntax of the content.</li> <li>src: The source directory path to display.</li> <li>data: TreeItemData[]. Alternative to src, directly provide tree data structure.</li> <li>filter: RegExp. A regular expression to filter files.     The regex is applied to the folder names and file names (not the full path).     Directories are included by default unless all of their nested content is filtered out.     When filter is on, empty directories will not be shown.</li> <li>maxDepth: Number. Maximum depth of directory traversal. Default is 3.</li> <li>showContent: Boolean. Whether to show file contents. Default is false.</li> </ul>"},{"location":"language/components/#humanmessage","title":"HumanMessage","text":"<p>Wrap the contents in a user message.</p>"},{"location":"language/components/#usages_33","title":"Usages","text":"<pre><code>&lt;user-msg&gt;What is the capital of France?&lt;/user-msg&gt;\n</code></pre>"},{"location":"language/components/#parameters_33","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#messagecontent","title":"MessageContent","text":"<p>Display a message content.</p>"},{"location":"language/components/#usages_34","title":"Usages","text":"<pre><code>&lt;msg-content content=\"What is the capital of France?\" /&gt;\n</code></pre>"},{"location":"language/components/#parameters_34","title":"Parameters","text":"<ul> <li>content: Object. The content of the message. It can be a string, or an array of strings and multimedia content.</li> </ul>"},{"location":"language/components/#systemmessage","title":"SystemMessage","text":"<p>Wrap the contents in a system message.</p>"},{"location":"language/components/#usages_35","title":"Usages","text":"<pre><code>&lt;system-msg&gt;Answer concisely.&lt;/system-msg&gt;\n</code></pre>"},{"location":"language/components/#parameters_35","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>name: The name of the content, used in serialization.</li> <li>type: The type of the content, used in serialization.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/components/#tree","title":"Tree","text":"<p>Renders a tree structure in various formats.</p>"},{"location":"language/components/#usages_36","title":"Usages","text":"<pre><code>&lt;Tree items={treeData} syntax=\"markdown\" showContent={true} /&gt;\n</code></pre>"},{"location":"language/components/#parameters_36","title":"Parameters","text":"<ul> <li>syntax: Can be one of: markdown, html, json, yaml, text, xml. The output syntax to use for rendering the tree</li> <li>items: TreeItemData[]. Array of tree items to render</li> <li>showContent: Boolean. Whether to show content values of tree items</li> </ul>"},{"location":"language/components/#webpage","title":"Webpage","text":"<p>Displays content from a webpage.</p>"},{"location":"language/components/#usages_37","title":"Usages","text":"<p>Display content from a URL: <pre><code>&lt;webpage url=\"https://example.com\" /&gt;\n</code></pre></p> <p>Extract only specific content using a selector: <pre><code>&lt;webpage url=\"https://example.com\" selector=\"main article\" /&gt;\n</code></pre></p> <p>Convert HTML to structured POML components: <pre><code>&lt;webpage url=\"https://example.com\" extractText=\"false\" /&gt;\n</code></pre></p>"},{"location":"language/components/#parameters_37","title":"Parameters","text":"<ul> <li>url: The URL of the webpage to fetch and display.</li> <li>src: Local file path to an HTML file to display.</li> <li>buffer: Buffer. HTML content as string or buffer.</li> <li>base64: Base64 encoded HTML content.</li> <li>extractText: Boolean. Whether to extract plain text content (true) or convert HTML to structured POML (false). Default is false.</li> <li>selector: CSS selector to extract specific content from the page (e.g., \"article\", \".content\", \"#main\"). Default is \"body\".</li> <li>syntax: Can be one of: markdown, html, json, yaml, xml, text. The syntax of the content.</li> <li>className: A class name for quickly styling the current block with stylesheets.</li> <li>speaker: Can be one of: human, ai, system. The speaker of the content. By default, it's determined by the context and the content.</li> <li>writerOptions: Object. An experimental optional JSON string to customize the format of markdown headers, JSON indents, etc.</li> </ul>"},{"location":"language/ir/","title":"Intermediate Representation","text":"<p>Attributes Applicable to All Tags: * speaker (ai/human/system) - The speaker of the current content * original-start-index (integer) - The start offset of the element corresponding to the current one in the original document * original-end-index (integer) - The end offset of the element corresponding to the current one in the original document</p> <ul> <li>any - Represents a generic container for arbitrary data values. Useful for storing dynamic or unstructured content.</li> <li>type (string) - The data type of the value ('string', 'integer', 'float', 'boolean', 'array', 'object', 'buffer', 'null', or 'undefined').</li> <li> <p>name (string) - An optional identifier for the data.</p> </li> <li> <p>b - Represents text that should be displayed in boldface. Useful for highlighting important words or phrases.</p> </li> <li> <p>code - Represents a block or inline fragment of code. It can optionally include language and formatting attributes.</p> </li> <li>inline (boolean) - Indicates whether the code is inline (true) or a block element (false).</li> <li>lang (string) - Specifies the programming language or syntax highlighting mode.</li> <li> <p>blank-line (boolean) - Inserts a blank line before and after the code block if inline = false.</p> </li> <li> <p>env - Represents a formatting environment or container to specify how nested content should be output.</p> </li> <li>presentation (string) - The output style or format mode ('markup', 'serialize', 'free', or 'multimedia').</li> <li>markup-lang (string) - The specific markup language, required only if presentation = 'markup'.</li> <li>serializer (string) - The name of the serializer, required only if presentation = 'serialize'.</li> <li> <p>writer-options (object) - Optional parameters passed to the writer constructor for customizing output.</p> </li> <li> <p>h - Represents a heading element.</p> </li> <li> <p>level (integer) - Indicates the heading level. Typically ranges from 1 (highest level) to 6 (lowest level).</p> </li> <li> <p>i - Represents text that should be displayed in italics. Useful for emphasizing words or phrases.</p> </li> <li> <p>img - Represents an image element.</p> </li> <li>base64 (string) - The base64-encoded image data.</li> <li>alt (string) - Alternative text describing the image.</li> <li>position (string) - The placement of the image relative to text, such as 'here', 'top', or 'bottom'.</li> <li> <p>type (string) - The image MIME type (e.g., 'image/jpeg', 'image/png').</p> </li> <li> <p>item - Represents a single item within a list. Typically used as a child element of \"list\".</p> </li> <li> <p>list - Represents an ordered or unordered list of items.</p> </li> <li> <p>list-style (string) - The style of the list bullets or enumeration (e.g., 'star', 'dash', 'decimal').</p> </li> <li> <p>nl - Inserts newline characters.</p> </li> <li> <p>count (integer) - Specifies how many newline characters to insert.</p> </li> <li> <p>obj - Represents a data object, typically stored in JSON format.</p> </li> <li> <p>data (object) - A valid JSON object containing the structured data.</p> </li> <li> <p>p - Represents a paragraph of text. Useful for dividing content into readable blocks.</p> </li> <li> <p>blank-line (boolean) - Inserts a blank line before and after the paragraph when true.</p> </li> <li> <p>s - Represents text that should be displayed with a strikethrough style.</p> </li> <li> <p>span - Represents an inline container for text without additional formatting. Useful for applying attributes without changing display structure.</p> </li> <li> <p>table - Represents a table structure containing rows and cells.</p> </li> <li> <p>tbody - Represents the body section of a table, containing the majority of data rows.</p> </li> <li> <p>tcell - Represents a single cell within a table row.</p> </li> <li> <p>text - Represents raw or unformatted text content.</p> </li> <li> <p>thead - Represents the header section of a table, typically containing column headings.</p> </li> <li> <p>trow - Represents a single row within a table, containing one or more cells.</p> </li> <li> <p>u - Represents text that should be displayed with an underline.</p> </li> </ul>"},{"location":"language/meta/","title":"Meta","text":"<p>The <code>&lt;meta&gt;</code> element provides metadata and configuration for POML documents. It allows you to specify version requirements, disable/enable components, define response schemas, register tools, and set runtime parameters.</p>"},{"location":"language/meta/#basic-usage","title":"Basic Usage","text":"<p>Meta elements are typically placed at the beginning of a POML document and don't produce any visible output. One POML file can have multiple <code>&lt;meta&gt;</code> elements at any position, but they should be used carefully to avoid conflicts.</p> <pre><code>&lt;poml&gt;\n  &lt;meta minVersion=\"1.0.0\" /&gt;\n  &lt;p&gt;Your content here&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"language/meta/#meta-element-types","title":"Meta Element Types","text":"<p>Meta elements fall into two categories based on whether they include a <code>type</code> attribute:</p> <p>Without type attribute - Used for general document configuration: - Version control (<code>minVersion</code>, <code>maxVersion</code>) - Component management (<code>components</code>)</p> <p>With type attribute - Used for specific functionalities: - <code>type=\"responseSchema\"</code> - Defines structured output format for AI responses - <code>type=\"tool\"</code> - Registers callable functions for AI models - <code>type=\"runtime\"</code> - Sets language model execution parameters</p>"},{"location":"language/meta/#response-schema","title":"Response Schema","text":"<p>Response schemas define the expected structure of AI-generated responses, ensuring that language models return data in a predictable, parsable format. This transforms free-form text generation into structured data generation.</p>"},{"location":"language/meta/#json-schema-format","title":"JSON Schema Format","text":"<p>Use the <code>lang=\"json\"</code> attribute to specify JSON Schema format:</p> <pre><code>&lt;meta type=\"responseSchema\" lang=\"json\"&gt;\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": { \"type\": \"string\" },\n      \"age\": { \"type\": \"number\" }\n    },\n    \"required\": [\"name\"]\n  }\n&lt;/meta&gt;\n</code></pre>"},{"location":"language/meta/#expression-format","title":"Expression Format","text":"<p>Use the <code>lang=\"expr\"</code> attribute (or omit it for auto-detection) to evaluate JavaScript expressions that return schemas:</p> <pre><code>&lt;meta type=\"responseSchema\" lang=\"expr\"&gt;\n  z.object({\n    name: z.string(),\n    age: z.number().optional()\n  })\n&lt;/meta&gt;\n</code></pre> <p>When <code>lang</code> is omitted, POML auto-detects the format: - If the content starts with <code>{</code>, it's treated as JSON - Otherwise, it's treated as an expression</p>"},{"location":"language/meta/#expression-evaluation-in-schemas","title":"Expression Evaluation in Schemas","text":""},{"location":"language/meta/#json-schema-with-template-expressions","title":"JSON Schema with Template Expressions","text":"<p>JSON schemas support template expressions using <code>{{ }}</code> syntax:</p> <pre><code>&lt;let name=\"maxAge\" value=\"100\" /&gt;\n&lt;meta type=\"responseSchema\" lang=\"json\"&gt;\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": { \"type\": \"string\" },\n      \"age\": { \n        \"type\": \"number\",\n        \"minimum\": 0,\n        \"maximum\": {{ maxAge }}\n      }\n    }\n  }\n&lt;/meta&gt;\n</code></pre>"},{"location":"language/meta/#expression-format-with-javascript-evaluation","title":"Expression Format with JavaScript Evaluation","text":"<p>Expression schemas are evaluated as JavaScript code with access to context variables and the <code>z</code> (Zod) variable:</p> <pre><code>&lt;let name=\"fields\" value='[\"name\", \"email\", \"age\"]' /&gt;\n&lt;meta type=\"responseSchema\" lang=\"expr\"&gt;\n  z.object(\n    Object.fromEntries(fields.map(f =&gt; [f, z.string()]))\n  )\n&lt;/meta&gt;\n</code></pre> <p>The expression can return either: - A Zod schema object (detected by the presence of <code>_def</code> property) - A plain JavaScript object treated as JSON Schema</p> <p>Important limitations: - Only one <code>responseSchema</code> meta element is allowed per document. Multiple response schemas will result in an error. - Response schemas cannot be used together with tool definitions in the same document. You must choose between structured responses or tool calling capabilities.</p>"},{"location":"language/meta/#tool-registration","title":"Tool Registration","text":"<p>Tool registration enables AI models to interact with external functions during conversation. Tools are function definitions that tell the AI model what functions are available, what parameters they expect, and what they do.</p> <p>Important: Tools and response schemas are mutually exclusive. You cannot use both <code>responseSchema</code> and <code>tool</code> meta elements in the same POML document.</p>"},{"location":"language/meta/#json-schema-format_1","title":"JSON Schema Format","text":"<pre><code>&lt;meta type=\"tool\" name=\"getWeather\" description=\"Get weather information\"&gt;\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"location\": { \"type\": \"string\" },\n      \"unit\": { \n        \"type\": \"string\", \n        \"enum\": [\"celsius\", \"fahrenheit\"] \n      }\n    },\n    \"required\": [\"location\"]\n  }\n&lt;/meta&gt;\n</code></pre>"},{"location":"language/meta/#expression-format_1","title":"Expression Format","text":"<pre><code>&lt;meta type=\"tool\" name=\"calculate\" description=\"Perform calculation\" lang=\"expr\"&gt;\n  z.object({\n    operation: z.enum(['add', 'subtract', 'multiply', 'divide']),\n    a: z.number(),\n    b: z.number()\n  })\n&lt;/meta&gt;\n</code></pre>"},{"location":"language/meta/#expression-evaluation-in-tool-schemas","title":"Expression Evaluation in Tool Schemas","text":"<p>Tool schemas support the same evaluation modes as response schemas:</p>"},{"location":"language/meta/#json-with-template-expressions","title":"JSON with Template Expressions","text":"<pre><code>&lt;let name=\"maxValue\" value=\"1000\" /&gt;\n&lt;meta type=\"tool\" name=\"calculator\" description=\"Calculate values\" lang=\"json\"&gt;\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"value\": { \n        \"type\": \"number\",\n        \"maximum\": {{ maxValue }}\n      }\n    }\n  }\n&lt;/meta&gt;\n</code></pre>"},{"location":"language/meta/#expression-format_2","title":"Expression Format","text":"<pre><code>&lt;let name=\"supportedOperations\" value='[\"add\", \"subtract\", \"multiply\", \"divide\"]' /&gt;\n&lt;meta type=\"tool\" name=\"calculator\" description=\"Perform mathematical operations\" lang=\"expr\"&gt;\n  z.object({\n    operation: z.enum(supportedOperations),\n    a: z.number(),\n    b: z.number()\n  })\n&lt;/meta&gt;\n</code></pre> <p>In expression mode, the <code>z</code> variable is automatically available for constructing Zod schemas, and you have direct access to all context variables.</p> <p>Required attributes for tools: - name: Tool identifier (required) - description: Tool description (optional but recommended) - lang: Schema language, either \"json\" or \"expr\" (optional, auto-detected based on content)</p> <p>You can define multiple tools in a single document.</p>"},{"location":"language/meta/#runtime-parameters","title":"Runtime Parameters","text":"<p>Runtime parameters configure the language model's behavior during execution. These parameters are automatically used in VSCode's test command functionality, which is based on the Vercel AI SDK.</p> <pre><code>&lt;meta type=\"runtime\" \n      temperature=\"0.7\" \n      maxOutputTokens=\"1000\" \n      model=\"gpt-5\"\n      topP=\"0.9\" /&gt;\n</code></pre> <p>All attributes except <code>type</code> are passed as runtime parameters. Common parameters include:</p> <ul> <li>temperature: Controls randomness (0-2, typically 0.3-0.7 for balanced output)</li> <li>maxOutputTokens: Maximum response length in tokens</li> <li>model: Model identifier (e.g., \"gpt-5\", \"claude-4-sonnet\")</li> <li>topP: Nucleus sampling threshold (0-1, typically 0.9-0.95)</li> <li>frequencyPenalty: Reduces token repetition based on frequency (-2 to 2)</li> <li>presencePenalty: Reduces repetition based on presence (-2 to 2)</li> <li>seed: For deterministic outputs (integer value)</li> </ul> <p>The full parameter list depends on whether you're using standard text generation or structured data generation: - Text generation parameters - Standard text generation - Structured data parameters - When using response schemas</p> <p>The Vercel AI SDK automatically handles parameter validation and conversion for different model providers.</p>"},{"location":"language/meta/#version-control","title":"Version Control","text":"<p>Version requirements ensure compatibility between documents and the POML runtime. This prevents runtime errors when documents require specific POML features.</p> <pre><code>&lt;meta minVersion=\"0.5.0\" maxVersion=\"2.0.0\" /&gt;\n</code></pre> <ul> <li>minVersion: Minimum required POML version. If the current version is lower, an error is thrown.</li> <li>maxVersion: Maximum supported POML version. Documents may not work correctly with newer versions.</li> </ul> <p>Version checking uses semantic versioning (MAJOR.MINOR.PATCH) and occurs during document parsing.</p>"},{"location":"language/meta/#component-control","title":"Component Control","text":"<p>The <code>components</code> attribute dynamically enables or disables POML components within a document. This is useful for conditional content, feature flags, or restricting elements in specific contexts.</p>"},{"location":"language/meta/#disabling-components","title":"Disabling Components","text":"<p>Prefix component names with <code>-</code> to disable them:</p> <pre><code>&lt;meta components=\"-table\" /&gt;\n&lt;!-- Now &lt;table&gt; elements will throw an error --&gt;\n</code></pre> <p>You can disable multiple components:</p> <pre><code>&lt;meta components=\"-table,-image\" /&gt;\n</code></pre>"},{"location":"language/meta/#re-enabling-components","title":"Re-enabling Components","text":"<p>Use <code>+</code> prefix to re-enable previously disabled components:</p> <pre><code>&lt;meta components=\"-table\" /&gt;\n&lt;!-- table is disabled --&gt;\n&lt;meta components=\"+table\" /&gt;\n&lt;!-- table is re-enabled --&gt;\n</code></pre> <p>Component aliases can be disabled independently of the main component name. For example, if a component has both a main name and aliases, you can disable just the alias while keeping the main component available.</p>"},{"location":"language/quickstart/","title":"Quick Start","text":"<p>Here's a very simple POML example. Please put it in a file named <code>example.poml</code>. Make sure it resides in the same directory as the <code>photosynthesis_diagram.png</code> image file.</p> <pre><code>&lt;poml&gt;\n  &lt;role&gt;You are a patient teacher explaining concepts to a 10-year-old.&lt;/role&gt;\n  &lt;task&gt;Explain the concept of photosynthesis using the provided image as a reference.&lt;/task&gt;\n\n  &lt;img src=\"photosynthesis_diagram.png\" alt=\"Diagram of photosynthesis\" /&gt;\n\n  &lt;output-format&gt;\n    Keep the explanation simple, engaging, and under 100 words.\n    Start with \"Hey there, future scientist!\".\n  &lt;/output-format&gt;\n&lt;/poml&gt;\n</code></pre> <p>This example defines a role and task for the LLM, includes an image for context, and specifies the desired output format. With the POML toolkit, the prompt can be easily rendered with a flexible format, and tested with a vision LLM.</p>"},{"location":"language/quickstart/#youtube-video","title":"YouTube Video","text":"<p>We also recommend watching our YouTube video for a quick introduction to POML and how to get started.</p>"},{"location":"language/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn POML Syntax: Understand the structure and syntax of POML files.</li> <li>Explore Components: Discover the available components and how to use them.</li> <li>Install VS Code Extension: Set up the POML extension for Visual Studio Code to enhance your development experience.</li> <li>Configure Python SDK: Learn how to configure the POML Python SDK for your projects and integrate into your workflow.</li> </ul>"},{"location":"language/standalone/","title":"POML Standalone File Mode","text":""},{"location":"language/standalone/#introduction-to-standalone-file-mode","title":"Introduction to Standalone File Mode","text":"<p>POML (Prompting Markup Language) provides a convenient way to create prompts using a markup language that is easy to read and write. The standalone file mode is the most commonly used approach, where you create a file with a <code>.poml</code> extension. This file contains XML-like syntax that POML renders into a prompt. This mode is particularly useful for creating reusable templates and managing complex prompts without embedding POML directly in JSX files or using a Python SDK.</p> <p>In this mode, you wrap your content with a top-level <code>&lt;poml&gt;</code> tag, allowing POML to parse and render your markup correctly. Below is a guide on how to effectively use the standalone file mode.</p>"},{"location":"language/standalone/#basic-usage","title":"Basic Usage","text":"<p>To create a POML file, simply create a file with the <code>.poml</code> extension and wrap your content within the <code>&lt;poml&gt;</code> tag:</p> <pre><code>&lt;poml&gt;\n  &lt;p&gt;Hello, world!&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>You can also type anything without a <code>poml</code> tag, and it will be treated as a string. It's called \"free text mode\" in POML. However, it has several limitations currently, including unabling to render any XML tags wrapped with <code>&lt;&gt;</code>, unabling to use many special characters, and unabling to use all the wonderful features of POML. So, it's always recommended to use the <code>poml</code> tag before everything.</p> <p>Tip: Glossary for Beginners:</p> <ul> <li>Tag: A tag is a fundamental building block in XML (and POML). It's used to mark the beginning and end of an element. Tags are enclosed in angle brackets (<code>&lt;</code> and <code>&gt;</code>). For example, <code>&lt;p&gt;</code> is an opening tag, and <code>&lt;/p&gt;</code> is a closing tag. Everything between the opening and closing tags is considered part of that element.</li> <li>Attribute: An attribute provides additional information about an element. Attributes are placed inside the opening tag, and they consist of a name and a value (enclosed in double quotes). For example, in <code>&lt;p speaker=\"human\"&gt;</code>, <code>speaker</code> is the attribute name, and <code>\"human\"</code> is the attribute value.</li> <li>Content: The content is the text or other elements that appear between the opening and closing tags of an element. For example, in <code>&lt;p&gt;Hello, world!&lt;/p&gt;</code>, \"Hello, world!\" is the content of the <code>&lt;p&gt;</code> element.</li> </ul> <p>Escape Characters: In POML, you can use escape characters to include special characters in your content and attribute values. Due to an implementation issue, the escape syntax in POML is slightly different from what you would know in HTML or XML. For example, to include a double quote (<code>\"</code>) in your content, you can use <code>#quot;</code> (rather than <code>&amp;quot;</code>). Here are some common escape characters:</p> <ol> <li><code>#quot;</code> for <code>\"</code></li> <li><code>#apos;</code> for <code>'</code></li> <li><code>#amp;</code> for <code>&amp;</code></li> <li><code>#lt;</code> for <code>&lt;</code></li> <li><code>#gt;</code> for <code>&gt;</code></li> <li><code>#hash;</code> for <code>#</code></li> <li><code>#lbrace;</code> for <code>{</code></li> <li><code>#rbrace;</code> for <code>}</code></li> </ol> <p>It's not necessary to use the escape characters for most cases, but they can be helpful when you are having trouble displaying those characters in certain cases.</p>"},{"location":"language/standalone/#template-engine","title":"Template Engine","text":"<p>The template engine of POML allows you to incorporate dynamic content and control structures. Here are some key features.</p>"},{"location":"language/standalone/#expressions","title":"Expressions","text":"<p>You can use expressions enclosed in double curly brackets (<code>{{</code> <code>}}</code>) to evaluate variables or expressions dynamically:</p> <pre><code>&lt;poml&gt;\n  &lt;p&gt;Hello, {{name}}!&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>In this example, if <code>name</code> is set to \"Alice\" (e.g., using a <code>&lt;let&gt;</code> tag, described below), the output will be \"Hello, Alice!\".</p>"},{"location":"language/standalone/#usage-in-attributes","title":"Usage in Attributes","text":"<p>Expressions can also be used within attribute values:</p> <pre><code>&lt;poml&gt;\n  &lt;task caption=\"Task #{{index}}\"&gt;This is task No. {{index}}.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>This renders to the following when <code>index</code> is set to 1.</p> <pre><code># Task #1\n\nThis is task No. 1.\n</code></pre>"},{"location":"language/standalone/#expression-usages","title":"Expression Usages","text":"<p>POML supports various JavaScript expressions within the double curly brackets. This includes but is not limited to:</p> <ul> <li>Variables: <code>{{variableName}}</code></li> <li>Arithmetic: <code>{{a + b}}</code>, <code>{{x * y}}</code>, <code>{{count / total}}</code></li> <li>String Concatenation: <code>{{firstName + \" \" + lastName}}</code></li> <li>Array Access: <code>{{myArray[0]}}</code></li> <li>Object Property Access: <code>{{myObject.propertyName}}</code></li> <li>Function Calls: <code>{{myFunction(arg1, arg2)}}</code> (if <code>myFunction</code> is defined in the context)</li> <li>Ternary Operators: <code>{{condition ? valueIfTrue : valueIfFalse}}</code></li> <li>Accessing loop variables: <code>{{loop.index}}</code> (explained in the \"For Attribute\" section)</li> </ul>"},{"location":"language/standalone/#let-expressions","title":"Let Expressions","text":"<p>The <code>&lt;let&gt;</code> tag allows you to define variables, import data from external files, and set values within your POML template.</p>"},{"location":"language/standalone/#syntax-1-setting-a-variable-from-a-value","title":"Syntax 1: Setting a variable from a value","text":"<pre><code>&lt;poml&gt;\n  &lt;let name=\"greeting\" value=\"Hello, world!\" /&gt;\n  &lt;p&gt;{{greeting}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>This will output \"Hello, world!\".  The <code>value</code> attribute can contain a string, number, or a POML expression.</p>"},{"location":"language/standalone/#syntax-2-importing-data-from-a-file","title":"Syntax 2: Importing data from a file","text":"<pre><code>&lt;poml&gt;\n  &lt;let name=\"users\" src=\"users.json\" /&gt;\n  &lt;p&gt;First user: {{users[0].name}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>This imports the contents of <code>users.json</code> and assigns it to the <code>users</code> variable.  The <code>src</code> attribute specifies the path to the file (relative to the POML file). The optional <code>type</code> attribute can specify the file type (e.g., \"json\", \"text\", \"csv\"). If not provided, POML attempts to infer it from the file extension.</p>"},{"location":"language/standalone/#syntax-3-importing-data-from-a-file-without-a-name","title":"Syntax 3: Importing data from a file without a name","text":"<p><pre><code>&lt;poml&gt;\n  &lt;let src=\"config.json\" /&gt;\n  &lt;p&gt;API Key: {{apiKey}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> If <code>config.json</code> contains <code>{ \"apiKey\": \"your_api_key\" }</code>, this will output \"API Key: your_api_key\". When you use <code>src</code> without <code>name</code>, and the file content is a JSON object, the properties of that object are directly added to the context.</p>"},{"location":"language/standalone/#syntax-4-setting-a-variable-using-inline-json","title":"Syntax 4: Setting a variable using inline JSON","text":"<pre><code>&lt;poml&gt;\n  &lt;let name=\"person\"&gt;\n    {\n      \"name\": \"Alice\",\n      \"age\": 30\n    }\n  &lt;/let&gt;\n  &lt;p&gt;Name: {{person.name}}, Age: {{person.age}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>This defines a <code>person</code> variable with the given JSON object. You can also specify the <code>type</code> attribute:</p> <pre><code>&lt;poml&gt;\n  &lt;let name=\"count\" type=\"integer\"&gt;5&lt;/let&gt;\n  &lt;p&gt;Count: {{count}}&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"language/standalone/#syntax-5-setting-a-variable-from-an-expression","title":"Syntax 5: Setting a variable from an expression","text":"<pre><code>&lt;poml&gt;\n  &lt;let name=\"base\" value=\"10\" /&gt;\n  &lt;let name=\"increment\" value=\"5\" /&gt;\n  &lt;let name=\"total\" value=\"{{ base + increment }}\" /&gt;\n  &lt;p&gt;Total: {{ total }}&lt;/p&gt;  &lt;!-- Output: Total: 15 --&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"language/standalone/#type-autocasting-in-attributes","title":"Type-Autocasting in Attributes","text":"<p>The attributes of components will be automatically cast based on their defined types in the component documentation. This means you don't have to worry about manually converting types in many cases.</p> <ul> <li>Boolean: If an attribute is defined as a boolean, values like <code>\"true\"</code>, <code>1</code>, <code>\"1\"</code>, or <code>{{true}}</code> will be cast to the boolean value <code>true</code>. Similarly, <code>\"false\"</code>, <code>0</code>, <code>\"0\"</code>, or <code>{{false}}</code> will be cast to <code>false</code>.</li> <li>Number: If an attribute is defined as a number, values like <code>\"123\"</code>, <code>45.6</code>, <code>{{anyNumber}}</code> or <code>{{myNumber+1.3}}</code> will be cast to their corresponding numeric values.</li> <li>Object: If an attribute is defined as an object, POML will attempt to parse the attribute value as a JSON string. For example, <code>data=\"{{{name: 'John', age: 30}}}\"</code> or <code>data='{\"name\":\"John\",\"age\":30}'</code> will be parsed into the corresponding JavaScript object.</li> <li>String: If an attribute is a string, no casting is performed.</li> </ul> <p>In the following example, the first auto-casting happened at let, where <code>true</code> is converted to boolean at <code>let</code> expression.</p> <pre><code>&lt;poml&gt;\n  &lt;let name=\"boolVar\" type=\"boolean\" value=\"true\"/&gt;\n  &lt;let name=\"numVar\" type=\"number\" value=\"42\"/&gt;\n  &lt;let name=\"objVar\" type=\"object\" value=\"{{ { key: 'value' } }}\"/&gt;\n\n  &lt;MyComponent boolProp=\"{{boolVar}}\" numProp=\"{{numVar}}\" objProp=\"{{objVar}}\" stringProp=\"hello\"/&gt;\n&lt;/poml&gt;\n</code></pre> <p>If MyComponent is defined with <code>boolProp</code> as boolean, <code>numProp</code> as number, <code>objProp</code> as object, and <code>stringProp</code> as string, the values will be interpreted and auto-casted again when <code>MyComponent</code> is used.</p>"},{"location":"language/standalone/#for-attribute","title":"For Attribute","text":"<p>To loop over a list, use the <code>for</code> attribute. The syntax is <code>for=\"itemName in listName\"</code>.</p> <pre><code>&lt;poml&gt;\n  &lt;list&gt;\n    &lt;item for=\"item in ['apple', 'banana', 'cherry']\"&gt;{{item}}&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/poml&gt;\n</code></pre> <p>This will render a list with \"apple\", \"banana\", and \"cherry\".</p>"},{"location":"language/standalone/#loop-variables","title":"Loop Variables","text":"<p>Inside the loop, you have access to special <code>loop</code> variables:</p> <ul> <li><code>loop.index</code>: The current iteration index (starting from 0).</li> <li><code>loop.length</code>: The total number of items in the list.</li> <li><code>loop.first</code>: <code>true</code> if it's the first iteration, <code>false</code> otherwise.</li> <li><code>loop.last</code>: <code>true</code> if it's the last iteration, <code>false</code> otherwise.</li> </ul> <p>Example:</p> <pre><code>&lt;poml&gt;\n&lt;let name=\"all_demos\" value='[\n    { \"input\": \"What is your name?\", \"output\": \"My name is POML.\" },\n    { \"input\": \"What can you do?\", \"output\": \"I can generate prompts.\" }\n]'/&gt;\n  &lt;examples&gt;\n    &lt;example for=\"example in all_demos\" chat=\"false\" caption=\"Example {{ loop.index + 1 }}\" captionStyle=\"header\"&gt;\n      &lt;input&gt;{{ example.input }}&lt;/input&gt;\n      &lt;output&gt;{{ example.output }}&lt;/output&gt;\n    &lt;/example&gt;\n  &lt;/examples&gt;\n&lt;/poml&gt;\n</code></pre> <p>This will generate two examples, with captions \"Example 1\" and \"Example 2\", displaying the input and output from each demo in the <code>all_demos</code> array. Note that we use <code>loop.index + 1</code> because <code>loop.index</code> starts from 0.</p>"},{"location":"language/standalone/#if-condition","title":"If Condition","text":"<p>You can conditionally render elements using the <code>if</code> attribute:</p> <pre><code>&lt;poml&gt;\n  &lt;let name=\"isVisible\" value=\"true\"/&gt;\n  &lt;let name=\"isHidden\" value=\"{{ !isVisible }}\"/&gt;\n  &lt;p if=\"isVisible\"&gt;This paragraph is visible.&lt;/p&gt;\n  &lt;p if=\"isHidden\"&gt;This paragraph is hidden.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>If <code>isVisible</code> is <code>true</code>, the first paragraph will be rendered. The second paragraph will not be rendered because isHidden is false. The value of <code>if</code> can be a simple variable name (which is treated as a boolean) or a POML expression.</p>"},{"location":"language/standalone/#include-files","title":"Include Files","text":"<p>You can split prompts into multiple files and include them using the <code>&lt;include&gt;</code> tag.</p> <pre><code>&lt;poml&gt;\n  &lt;include src=\"snippet.poml\" /&gt;\n&lt;/poml&gt;\n</code></pre> <p>The file specified in <code>src</code> is read and its contents are injected as if they were written in place. Variables from the current context are available inside the included file. The <code>for</code> and <code>if</code> attributes work as expected:</p> <pre><code>&lt;poml&gt;\n  &lt;include src=\"row.poml\" for=\"i in [1,2,3]\" /&gt;\n  &lt;include src=\"footer.poml\" if=\"showFooter\" /&gt;\n&lt;/poml&gt;\n</code></pre>"},{"location":"language/standalone/#stylesheet","title":"Stylesheet","text":"<p>POML allows you to define styles for your elements using the <code>&lt;stylesheet&gt;</code> tag.  This enables you to apply CSS-like styles (or, more generally, component attributes) to your markup.</p>"},{"location":"language/standalone/#using-stylesheet","title":"Using Stylesheet","text":"<p>You can define styles within a <code>&lt;stylesheet&gt;</code> tag. The stylesheet must be a valid JSON object and must be placed directly under the root <code>&lt;poml&gt;</code> element.</p> <pre><code>&lt;poml&gt;\n  &lt;stylesheet&gt;\n    {\n      \"p\": {\n        \"syntax\": \"json\"\n      }\n    }\n  &lt;/stylesheet&gt;\n  &lt;p&gt;This text will be rendered as JSON.&lt;/p&gt;\n&lt;/poml&gt;\n</code></pre> <p>In this example, all <code>&lt;p&gt;</code> elements will have their <code>syntax</code> attribute set to <code>\"json\"</code>. You can set any attribute of a component using the stylesheet.</p>"},{"location":"language/standalone/#classname-attribute","title":"ClassName Attribute","text":"<p>Elements can be identified with a <code>className</code> attribute for styling.  The stylesheet can then target elements with specific class names using a CSS-like selector syntax (using a dot <code>.</code> before the class name).</p> <pre><code>&lt;poml&gt;\n  &lt;table className=\"csv\" records=\"[[1,2,3],[4,5,6]]\"/&gt;\n  &lt;stylesheet&gt;\n    {\n      \".csv\": {\n        \"syntax\": \"csv\",\n        \"writerOptions\": \"{\\\\\"csvSeparator\\\\\": \\\\\";\\\\\", \\\\\"csvHeader\\\\\": false}\"\n      }\n    }\n  &lt;/stylesheet&gt;\n&lt;/poml&gt;\n</code></pre> <p>Here, the <code>&lt;table&gt;</code> element has the class name \"csv\".  The stylesheet targets elements with the class \"csv\" (using <code>.csv</code>) and sets their <code>syntax</code> to \"csv\" and <code>writerOptions</code> to a specific JSON string. Note the escaped backslashes (<code>\\\\</code>) in the <code>writerOptions</code> value, which are necessary because the stylesheet itself is a JSON string.  This example will render to:</p> <pre><code>1;2;3\n4;5;6\n</code></pre> <p>NOTE: The writerOptions API is experimental and is subject to change.</p>"},{"location":"language/proposals/poml_extended/","title":"Extended POML File Format Design Specification","text":"<p>Status: Under implementation</p>"},{"location":"language/proposals/poml_extended/#overview","title":"Overview","text":"<p>This document describes the design for an extended POML file format that supports mixed content files - files that can contain both pure text (e.g., Markdown) and POML markup elements seamlessly integrated together.</p>"},{"location":"language/proposals/poml_extended/#current-limitations","title":"Current Limitations","text":"<p>The current POML implementation requires files to be fully enclosed within <code>&lt;poml&gt;...&lt;/poml&gt;</code> tags. Even though the outer level <code>&lt;poml&gt;...&lt;/poml&gt;</code> can be optional, the markup file is always parsed with one single pass of XML parser. This creates friction when users want to:</p> <ol> <li>Write primarily text-based documents (like Markdown or Jinja) with occasional POML components</li> <li>Usually need to escape characters like <code>&lt;</code> and <code>&gt;</code> in text content</li> <li>Gradually migrate existing text files to use POML features</li> </ol>"},{"location":"language/proposals/poml_extended/#design-goals","title":"Design Goals","text":"<ol> <li>Backward Compatibility: Most of existing POML files should continue to work without changes</li> <li>Flexibility: Support pure text files with embedded POML elements</li> <li>Seamless Integration: Allow switching between text and POML modes within a single file</li> </ol>"},{"location":"language/proposals/poml_extended/#file-format-specification","title":"File Format Specification","text":""},{"location":"language/proposals/poml_extended/#extended-poml-files","title":"Extended POML Files","text":"<p>Extended POML files can contain:</p> <ol> <li>Pure Text Content: Regular text content (Markdown, plain text, etc.)</li> <li>POML Element Pairs: Any element pair defined in <code>componentDocs.json</code> (e.g., <code>&lt;poml&gt;...&lt;/poml&gt;</code>, <code>&lt;p&gt;...&lt;/p&gt;</code>, <code>&lt;task&gt;...&lt;/task&gt;</code>)</li> <li>Mixed Content: Combination of pure text and POML elements</li> </ol>"},{"location":"language/proposals/poml_extended/#element-detection","title":"Element Detection","text":"<p>The system will assume the whole file is a pure text file and detects certain parts as POML elements based on the following:</p> <ol> <li>Loading component definitions from <code>componentDocs.json</code> and extracting valid POML component names and their aliases.</li> <li>Scanning for opening tags that match these components, and scanning until the corresponding closing tag is found.</li> <li>If a special tag <code>&lt;text&gt;...&lt;/text&gt;</code> is found within a POML segment, it will be treated as pure text content and processed following the rules above (step 1 and 2).</li> </ol> <p>An example is shown below:</p>"},{"location":"language/proposals/poml_extended/#example-1","title":"Example 1","text":"<pre><code># My Analysis Document\n\nThis is a regular markdown document that explains the task.\n\n&lt;task&gt;\n  Analyze the following data and provide insights.\n&lt;/task&gt;\n\nHere are some key points to consider:\n\n- Data quality\n- Statistical significance  \n- Business impact\n\n&lt;examples&gt;\n  &lt;example&gt;\n    &lt;input&gt;Sample data point 1&lt;/input&gt;\n    &lt;output&gt;Analysis result 1&lt;/output&gt;\n  &lt;/example&gt;\n&lt;/examples&gt;\n\n## Conclusion\n\nThe analysis shows...\n</code></pre>"},{"location":"language/proposals/poml_extended/#example-2","title":"Example 2","text":"<pre><code>&lt;poml&gt;\n  &lt;task&gt;Process the following data&lt;/task&gt;\n  &lt;text&gt;\n    This is **markdown** content that will be processed as pure text.\n\n    - Item 1\n    - Item 2\n\n    {{ VARIABLES_WILL_ALSO_SHOWN_AS_IS }}\n    &lt;cp caption=\"Nested POML\"&gt;This is a nested POML component that will be processed as POML.&lt;/cp&gt;\n\n    No POML processing happens here.\n  &lt;/text&gt;\n  &lt;hint&gt;Remember to check the format&lt;/hint&gt;\n&lt;/poml&gt;\n\nThere can be some intervening text here as well.\n\n&lt;poml&gt;\n  &lt;p&gt;You can add another POML segment here: {{variable_will_be_substituted}}&lt;/p&gt;\n&lt;/poml&gt;\n\n&lt;p&gt;POML elements do not necessarily reside in a &lt;text&gt;&lt;poml&gt; (the &lt;poml&gt; here is processed as is.)&lt;/text&gt; element.&lt;/p&gt;\n</code></pre> <p>Escaping Note: To directly show a POML tag in the text, users can use a <code>&lt;text&gt;</code> tag to wrap the content, as shown in the example above. If they want to escape a pair such as <code>&lt;poml&gt;...&lt;/poml&gt;</code>, they can escape the opening tag and closing tag respectively, such as <code>&lt;text&gt;&lt;poml&gt;&lt;/text&gt;...&lt;text&gt;&lt;/poml&gt;&lt;/text&gt;</code>.</p>"},{"location":"language/proposals/poml_extended/#file-level-metadata","title":"File-level Metadata","text":"<p>Metadatas are information that is useful when parsing and rendering the file, such as context variables, stylesheets, version information, file paths, etc. File-level metadata can be included at any place of the file in a special <code>&lt;meta&gt;</code> tag. This metadata will be processed before any content parsing.</p>"},{"location":"language/proposals/poml_extended/#architecture-design","title":"Architecture Design","text":""},{"location":"language/proposals/poml_extended/#high-level-processing-pipeline","title":"High-level Processing Pipeline","text":"<p>The core of the new architecture is a three-pass process: Segmentation, Metadata Extraction, and Recursive Rendering.</p>"},{"location":"language/proposals/poml_extended/#i-segmentation-pass","title":"I. Segmentation Pass","text":"<p>This initial pass is a crucial preprocessing step that scans the raw file content and partitions it into a hierarchical tree of segments. It does not parse the full XML structure of POML blocks; it only identifies their boundaries.</p> <ul> <li>Objective: To classify every part of the file as <code>META</code>, <code>POML</code>, or <code>TEXT</code> and build a nested structure.</li> <li>Algorithm:</li> <li>Load all valid POML component tag names (including aliases) from <code>componentDocs.json</code>. This set of tags will be used for detection.</li> <li>Initialize the root of the segment tree as a single, top-level <code>TEXT</code> segment spanning the entire file, unless the root segment is a single <code>&lt;poml&gt;...&lt;/poml&gt;</code> block spanning the whole file (in which case it will be treated as a <code>POML</code> segment).</li> <li>Use a stack-based algorithm to scan the text.<ul> <li>When an opening tag (e.g., <code>&lt;task&gt;</code>) that matches a known POML component is found, push its name and start position onto the stack. This marks the beginning of a potential <code>POML</code> segment.</li> <li>When a closing tag (e.g., <code>&lt;/task&gt;</code>) is found that matches the tag at the top of the stack, pop the stack. This marks a complete <code>POML</code> segment. This new segment is added as a child to the current parent segment in the tree.</li> <li>The special <code>&lt;text&gt;</code> tag is handled recursively. If a <code>&lt;text&gt;</code> tag is found inside a <code>POML</code> segment, the scanner will treat its content as a nested <code>TEXT</code> segment. This <code>TEXT</code> segment can, in turn, contain more <code>POML</code> children.</li> <li>Any content not enclosed within identified <code>POML</code> tags remains part of its parent <code>TEXT</code> segment.</li> </ul> </li> <li><code>&lt;meta&gt;</code> tags are treated specially. They are identified and parsed into <code>META</code> segments at any level but are logically hoisted and processed first. They should not have children.</li> <li>Output: A <code>Segment</code> tree. For backward compatibility, if the root segment is a single <code>&lt;poml&gt;...&lt;/poml&gt;</code> block spanning the whole file, the system can revert to the original, simpler parsing model.</li> </ul> <p><code>Segment</code> Interface: The <code>children</code> property is key to representing the nested structure of mixed-content files.</p> <pre><code>interface Segment {\n  id: string;                      // Unique ID for caching and React keys\n  kind: 'META' | 'TEXT' | 'POML';\n  start: number;\n  end: number;\n  content: string;                 // The raw string content of the segment\n  parent?: Segment;                 // Reference to the parent segment\n  children: Segment[];             // Nested segments (e.g., a POML block within text)\n  tagName?: string;                 // For POML segments, the name of the root tag (e.g., 'task')\n}\n</code></pre>"},{"location":"language/proposals/poml_extended/#ii-metadata-processing","title":"II. Metadata Processing","text":"<p>Once the segment tree is built, all <code>META</code> segments are processed.</p> <ul> <li>Extraction: Traverse the tree to find all <code>META</code> segments.</li> <li>Population: Parse the content of each <code>&lt;meta&gt;</code> tag and populate the global <code>PomlContext</code> object.</li> <li>Removal: After processing, <code>META</code> segments are removed from the tree to prevent them from being rendered.</li> </ul> <p><code>PomlContext</code> Interface: This context object is the single source of truth for the entire file, passed through all readers. It's mutable, allowing stateful operations like <code>&lt;let&gt;</code> to have a file-wide effect.</p> <pre><code>interface PomlContext {\n  variables: { [key: string]: any }; // For {{ substitutions }} and &lt;let&gt; (Read/Write)\n  texts: { [key: string]: React.ReactElement }; // Maps TEXT_ID to content for &lt;text&gt; replacement (Read/Write)\n  stylesheet: { [key: string]: string }; // Merged styles from all &lt;meta&gt; tags (Read-Only during render)\n  minimalPomlVersion?: string;      // From &lt;meta&gt; (Read-Only)\n  sourcePath: string;                // File path for resolving includes (Read-Only)\n}\n</code></pre>"},{"location":"language/proposals/poml_extended/#iii-textpoml-dispatching-recursive-rendering","title":"III. Text/POML Dispatching (Recursive Rendering)","text":"<p>Rendering starts at the root of the segment tree and proceeds recursively. A controller dispatches segments to the appropriate reader.</p> <ul> <li> <p><code>PureTextReader</code>: Handles <code>TEXT</code> segments.</p> </li> <li> <p>Currently we directly render the pure-text contents as a single React element. In future, we can:</p> <ul> <li>Renders the text content, potentially using a Markdown processor.</li> <li>Performs variable substitutions (<code>{{...}}</code>) using the <code>variables</code> from <code>PomlContext</code>. The logic from <code>handleText</code> in the original <code>PomlFile</code> should be extracted into a shared utility for this.</li> </ul> </li> <li> <p>Iterates through its <code>children</code> segments. For each child <code>POML</code> segment, it calls the <code>PomlReader</code>.</p> </li> <li> <p><code>PomlReader</code>: Handles <code>POML</code> segments.</p> </li> <li> <p>Pre-processing: Before parsing, it replaces any direct child <code>&lt;text&gt;</code> regions with a self-closing placeholder tag containing a unique ID: <code>&lt;text ref=\"TEXT_ID_123\" /&gt;</code>. The original content of the <code>&lt;text&gt;</code> segment is stored in <code>context.texts</code>. This ensures the XML parser inside <code>PomlFile</code> doesn't fail on non-XML content (like Markdown).</p> </li> <li>Delegation: Instantiates a modified <code>PomlFile</code> class with the processed segment content and the shared <code>PomlContext</code>.</li> <li> <p>Rendering: Calls the <code>pomlFile.react(context)</code> method to render the segment.</p> </li> <li> <p><code>IntelliSense Layer</code>: The segment tree makes it easy to provide context-aware IntelliSense. By checking the <code>kind</code> of the segment at the cursor's offset, the request can be routed to the correct provider\u2014either the <code>PomlReader</code>'s XML-aware completion logic or a simpler text/variable completion provider for <code>TEXT</code> segments.</p> </li> </ul> <p><code>Reader</code> Interface: This interface defines the contract for both <code>PureTextReader</code> and <code>PomlReader</code>.</p> <pre><code>interface Reader {\n  read(segment: Segment, context: PomlContext?): React.ReactElement;\n  getHoverToken(segment: Segment, offset: number): PomlToken | undefined;\n  getCompletions(offset: number): PomlToken[];\n}\n</code></pre>"},{"location":"language/proposals/poml_extended/#implementation-pomlfile-refactoring","title":"Implementation &amp; <code>PomlFile</code> Refactoring","text":"<p>To achieve this design, the existing <code>PomlFile</code> class needs significant refactoring. Its role changes from a file-level controller to a specialized parser for <code>POML</code> segments.</p>"},{"location":"language/proposals/poml_extended/#key-modifications-to-pomlfile","title":"Key Modifications to <code>PomlFile</code>","text":"<ol> <li> <p>Constructor (<code>new PomlFile</code>):</p> </li> <li> <p>Remove Auto-Wrapping: The <code>autoAddPoml</code> logic must be removed. The <code>PomlReader</code> will only pass it well-formed XML content corresponding to a single <code>POML</code> segment. The constructor will now assume the input <code>text</code> is a valid XML string.</p> </li> <li> <p>Receive Context: The constructor should accept the <code>PomlContext</code> object to access shared state.</p> </li> <li> <p>State Management (<code>handleLet</code>):</p> </li> <li> <p>The <code>&lt;let&gt;</code> tag's implementation must be modified to read from and write to the shared <code>PomlContext.variables</code> object, not a local context. This ensures that a variable defined in one POML block is available to subsequent POML blocks in the same file.</p> </li> <li> <p>Handling <code>&lt;include&gt;</code>:</p> </li> <li> <p>The <code>handleInclude</code> method should be removed from <code>PomlFile</code>. Inclusion is now handled at a higher level by the main processing pipeline. When the <code>PomlReader</code> encounters an <code>&lt;include&gt;</code> tag, it will invoke the entire pipeline (Segmentation, Metadata, Rendering) on the included file and insert the resulting React elements.</p> </li> <li> <p>Parsing <code>TEXT</code> Placeholders:</p> </li> <li> <p>The core <code>parseXmlElement</code> method needs a new branch to handle the <code>&lt;text ref=\"...\" /&gt;</code> placeholder.</p> </li> <li>When it encounters this element:<ol> <li>It extracts the <code>ref</code> attribute (e.g., <code>\"TEXT_ID_123\"</code>).</li> <li>It looks up the corresponding raw text from <code>context.texts</code>.</li> <li>It fetches from the <code>context.texts</code> map and returns a React element containing the pure text content.</li> </ol> </li> </ol>"},{"location":"python/","title":"POML Python SDK","text":"<p>This documentation provides an overview of the POML Python SDK, which allows you to work with POML files and components in your Python projects.</p>"},{"location":"python/#installation","title":"Installation","text":""},{"location":"python/#stable-release","title":"Stable Release","text":"<pre><code>pip install --upgrade poml\n</code></pre>"},{"location":"python/#nightly-build","title":"Nightly Build","text":"<pre><code>pip install --upgrade --pre --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ poml\n</code></pre>"},{"location":"python/#references","title":"References","text":"<ul> <li>POML Core Reference: Detailed reference for the core POML components and utilities.</li> <li>POML Integration: Reference on how to integrate POML with your Python applications.</li> </ul>"},{"location":"python/core/","title":"Python POML Core Reference","text":""},{"location":"python/core/#poml","title":"<code>poml</code>","text":""},{"location":"python/core/#poml.clear_trace","title":"<code>clear_trace()</code>","text":"<p>Clear the collected trace log.</p> Source code in <code>python/poml/api.py</code> <pre><code>def clear_trace() -&gt; None:\n    \"\"\"Clear the collected trace log.\"\"\"\n    _trace_log.clear()\n</code></pre>"},{"location":"python/core/#poml.get_trace","title":"<code>get_trace()</code>","text":"<p>Return a copy of the trace log.</p> Source code in <code>python/poml/api.py</code> <pre><code>def get_trace() -&gt; List[Dict[str, Any]]:\n    \"\"\"Return a copy of the trace log.\"\"\"\n    return list(_trace_log)\n</code></pre>"},{"location":"python/core/#poml.poml","title":"<code>poml(markup, context=None, stylesheet=None, chat=True, output_file=None, format='dict', extra_args=None)</code>","text":"<p>Process POML markup and return the result in the specified format.</p> <p>POML (Prompt Orchestration Markup Language) is a markup language for creating structured prompts and conversations. This function processes POML markup with optional context and styling, returning the result in various formats.</p> <p>Parameters:</p> Name Type Description Default <code>markup</code> <code>str | Path</code> <p>POML markup content as a string, or path to a POML file. If a string that looks like a file path but doesn't exist, a warning is issued and it's treated as markup content.</p> required <code>context</code> <code>dict | str | Path | None</code> <p>Optional context data to inject into the POML template. Can be a dictionary, JSON string, or path to a JSON file.</p> <code>None</code> <code>stylesheet</code> <code>dict | str | Path | None</code> <p>Optional stylesheet for customizing POML rendering. Can be a dictionary, JSON string, or path to a JSON file.</p> <code>None</code> <code>chat</code> <code>bool</code> <p>If True, process as a chat conversation (default). If False, process as a single prompt.</p> <code>True</code> <code>output_file</code> <code>str | Path | None</code> <p>Optional path to save the output. If not provided, output is returned directly without saving to disk.</p> <code>None</code> <code>format</code> <code>OutputFormat</code> <p>Output format for the result: - \"raw\": Return raw string output from POML processor - \"dict\": Return the core LLM prompt as a dict or list - \"openai_chat\": Return OpenAI chat completion format - \"langchain\": Return LangChain message format - \"pydantic\": Return list of PomlMessage objects</p> <code>'dict'</code> <code>extra_args</code> <code>Optional[List[str]]</code> <p>Additional command-line arguments to pass to the POML processor.</p> <code>None</code> <p>Returns:</p> Type Description <code>list | dict | str</code> <p>The processed result in the specified format:</p> <code>list | dict | str</code> <ul> <li>str: When format=\"raw\"</li> </ul> <code>list | dict | str</code> <ul> <li>dict/list: When format=\"dict\"</li> </ul> <code>list | dict | str</code> <ul> <li>List[Dict[str, Any]]: When format=\"openai_chat\" or \"langchain\"</li> </ul> <code>list | dict | str</code> <ul> <li>List[PomlMessage]: When format=\"pydantic\"</li> </ul> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>When a specified file path doesn't exist.</p> <code>RuntimeError</code> <p>When the POML processor fails or backend tracing requirements aren't met.</p> <code>ValueError</code> <p>When an invalid output format is specified.</p> <p>Examples:</p> <p>Basic usage with markup string:</p> <pre><code>&gt;&gt;&gt; result = poml(\"&lt;p&gt;Hello {{name}}!&lt;/p&gt;\", context={\"name\": \"World\"})\n</code></pre> <p>Load from file with context:</p> <pre><code>&gt;&gt;&gt; result = poml(\"template.poml\", context=\"context.json\")\n</code></pre> <p>Get OpenAI chat format:</p> <pre><code>&gt;&gt;&gt; messages = poml(\"chat.poml\", format=\"openai_chat\")\n</code></pre> <p>Use with custom stylesheet:</p> <pre><code>&gt;&gt;&gt; result = poml(\n...     markup=\"template.poml\",\n...     context={\"user\": \"Alice\"},\n...     stylesheet={\"role\": {\"captionStyle\": \"bold\"}},\n...     format=\"pydantic\"\n... )\n</code></pre> <p>Save output to file:</p> <pre><code>&gt;&gt;&gt; poml(\"template.poml\", output_file=\"output.json\", format=\"raw\")\n</code></pre> Note <ul> <li>When tracing is enabled via set_trace(), call details are automatically logged</li> <li>The function supports various backend integrations (Weave, AgentOps, MLflow)</li> <li>Multi-modal content (images, etc.) is supported in chat format</li> </ul> Source code in <code>python/poml/api.py</code> <pre><code>def poml(\n    markup: str | Path,\n    context: dict | str | Path | None = None,\n    stylesheet: dict | str | Path | None = None,\n    chat: bool = True,\n    output_file: str | Path | None = None,\n    format: OutputFormat = \"dict\",\n    extra_args: Optional[List[str]] = None,\n) -&gt; list | dict | str:\n    \"\"\"Process POML markup and return the result in the specified format.\n\n    POML (Prompt Orchestration Markup Language) is a markup language for creating\n    structured prompts and conversations. This function processes POML markup\n    with optional context and styling, returning the result in various formats.\n\n    Args:\n        markup: POML markup content as a string, or path to a POML file.\n            If a string that looks like a file path but doesn't exist,\n            a warning is issued and it's treated as markup content.\n        context: Optional context data to inject into the POML template.\n            Can be a dictionary, JSON string, or path to a JSON file.\n        stylesheet: Optional stylesheet for customizing POML rendering.\n            Can be a dictionary, JSON string, or path to a JSON file.\n        chat: If True, process as a chat conversation (default).\n            If False, process as a single prompt.\n        output_file: Optional path to save the output. If not provided,\n            output is returned directly without saving to disk.\n        format: Output format for the result:\n            - \"raw\": Return raw string output from POML processor\n            - \"dict\": Return the core LLM prompt as a dict or list\n            - \"openai_chat\": Return OpenAI chat completion format\n            - \"langchain\": Return LangChain message format\n            - \"pydantic\": Return list of PomlMessage objects\n        extra_args: Additional command-line arguments to pass to the POML processor.\n\n    Returns:\n        The processed result in the specified format:\n        - str: When format=\"raw\"\n        - dict/list: When format=\"dict\"\n        - List[Dict[str, Any]]: When format=\"openai_chat\" or \"langchain\"\n        - List[PomlMessage]: When format=\"pydantic\"\n\n    Raises:\n        FileNotFoundError: When a specified file path doesn't exist.\n        RuntimeError: When the POML processor fails or backend tracing requirements aren't met.\n        ValueError: When an invalid output format is specified.\n\n    Examples:\n        Basic usage with markup string:\n        &gt;&gt;&gt; result = poml(\"&lt;p&gt;Hello {{name}}!&lt;/p&gt;\", context={\"name\": \"World\"})\n\n        Load from file with context:\n        &gt;&gt;&gt; result = poml(\"template.poml\", context=\"context.json\")\n\n        Get OpenAI chat format:\n        &gt;&gt;&gt; messages = poml(\"chat.poml\", format=\"openai_chat\")\n\n        Use with custom stylesheet:\n        &gt;&gt;&gt; result = poml(\n        ...     markup=\"template.poml\",\n        ...     context={\"user\": \"Alice\"},\n        ...     stylesheet={\"role\": {\"captionStyle\": \"bold\"}},\n        ...     format=\"pydantic\"\n        ... )\n\n        Save output to file:\n        &gt;&gt;&gt; poml(\"template.poml\", output_file=\"output.json\", format=\"raw\")\n\n    Note:\n        - When tracing is enabled via set_trace(), call details are automatically logged\n        - The function supports various backend integrations (Weave, AgentOps, MLflow)\n        - Multi-modal content (images, etc.) is supported in chat format\n    \"\"\"\n    temp_input_file = temp_context_file = temp_stylesheet_file = None\n    trace_record: Dict[str, Any] | None = None\n    try:\n        if _trace_enabled:\n            trace_record = {}\n            if isinstance(markup, Path) or os.path.exists(str(markup)):\n                path = Path(markup)\n                trace_record[\"markup_path\"] = str(path)\n                if path.exists():\n                    trace_record[\"markup\"] = path.read_text()\n            else:\n                trace_record[\"markup\"] = str(markup)\n\n            if isinstance(context, dict):\n                trace_record[\"context\"] = json.dumps(context)\n            elif context:\n                if os.path.exists(str(context)):\n                    cpath = Path(context)\n                    trace_record[\"context_path\"] = str(cpath)\n                    trace_record[\"context\"] = cpath.read_text()\n            if isinstance(stylesheet, dict):\n                trace_record[\"stylesheet\"] = json.dumps(stylesheet)\n            elif stylesheet:\n                if os.path.exists(str(stylesheet)):\n                    spath = Path(stylesheet)\n                    trace_record[\"stylesheet_path\"] = str(spath)\n                    trace_record[\"stylesheet\"] = spath.read_text()\n\n        if isinstance(markup, Path):\n            if not markup.exists():\n                raise FileNotFoundError(f\"File not found: {markup}\")\n        else:\n            if os.path.exists(markup):\n                markup = Path(markup)\n            else:\n                # Test if the markup looks like a path.\n                if re.match(r\"^[\\w\\-./]+$\", markup):\n                    warnings.warn(\n                        f\"The markup '{markup}' looks like a file path, but it does not exist. Assuming it is a POML string.\"\n                    )\n\n                temp_input_file = write_file(markup)\n                markup = Path(temp_input_file.name)\n        with tempfile.NamedTemporaryFile(\"r\") as temp_output_file:\n            if output_file is None:\n                output_file = temp_output_file.name\n                output_file_specified = False\n            else:\n                output_file_specified = True\n                if isinstance(output_file, Path):\n                    output_file = str(output_file)\n            args = [\"-f\", str(markup), \"-o\", output_file]\n            if isinstance(context, dict):\n                temp_context_file = write_file(json.dumps(context))\n                args.extend([\"--context-file\", temp_context_file.name])\n            elif context:\n                if os.path.exists(context):\n                    args.extend([\"--context-file\", str(context)])\n                else:\n                    raise FileNotFoundError(f\"File not found: {context}\")\n\n            if isinstance(stylesheet, dict):\n                temp_stylesheet_file = write_file(json.dumps(stylesheet))\n                args.extend([\"--stylesheet-file\", temp_stylesheet_file.name])\n            elif stylesheet:\n                if os.path.exists(stylesheet):\n                    args.extend([\"--stylesheet-file\", str(stylesheet)])\n                else:\n                    raise FileNotFoundError(f\"File not found: {stylesheet}\")\n\n            if chat:\n                args.extend([\"--chat\", \"true\"])\n            else:\n                args.extend([\"--chat\", \"false\"])\n\n            if _trace_enabled and _trace_dir is not None:\n                args.extend([\"--traceDir\", str(_trace_dir)])\n\n            if extra_args:\n                args.extend(extra_args)\n            process = run(*args)\n            if process.returncode != 0:\n                raise RuntimeError(\n                    f\"POML command failed with return code {process.returncode}. See the log for details.\"\n                )\n\n            if output_file_specified:\n                with open(output_file, \"r\") as output_file_handle:\n                    result = output_file_handle.read()\n            else:\n                result = temp_output_file.read()\n\n            if format == \"raw\":\n                # Do nothing\n                pass\n            else:\n                result = json.loads(result)\n                if isinstance(result, dict) and \"messages\" in result:\n                    # The new versions will always return a dict with \"messages\" key.\n                    result = result[\"messages\"]\n                if format != \"dict\":\n                    # Continue to validate the format.\n                    if chat:\n                        pydantic_result = [PomlMessage(**item) for item in result]\n                    else:\n                        # TODO: Make it a RichContent object\n                        pydantic_result = [PomlMessage(speaker=\"human\", content=result)]\n\n                    if format == \"pydantic\":\n                        return pydantic_result\n                    elif format == \"openai_chat\":\n                        return _poml_response_to_openai_chat(pydantic_result)\n                    elif format == \"langchain\":\n                        return _poml_response_to_langchain(pydantic_result)\n                    else:\n                        raise ValueError(f\"Unknown output format: {format}\")\n\n            if _weave_enabled:\n                from .integration import weave\n\n                trace_prefix = _latest_trace_prefix()\n                current_version = _current_trace_version()\n                if trace_prefix is None or current_version is None:\n                    raise RuntimeError(\"Weave tracing requires local tracing to be enabled.\")\n                poml_content = _read_latest_traced_file(\".poml\")\n                context_content = _read_latest_traced_file(\".context.json\")\n                stylesheet_content = _read_latest_traced_file(\".stylesheet.json\")\n\n                weave.log_poml_call(\n                    trace_prefix.name,\n                    poml_content or str(markup),\n                    json.loads(context_content) if context_content else None,\n                    json.loads(stylesheet_content) if stylesheet_content else None,\n                    result,\n                )\n\n            if _agentops_enabled:\n                from .integration import agentops\n\n                trace_prefix = _latest_trace_prefix()\n                current_version = _current_trace_version()\n                if trace_prefix is None or current_version is None:\n                    raise RuntimeError(\"AgentOps tracing requires local tracing to be enabled.\")\n                poml_content = _read_latest_traced_file(\".poml\")\n                context_content = _read_latest_traced_file(\".context.json\")\n                stylesheet_content = _read_latest_traced_file(\".stylesheet.json\")\n                agentops.log_poml_call(\n                    trace_prefix.name,\n                    str(markup),\n                    json.loads(context_content) if context_content else None,\n                    json.loads(stylesheet_content) if stylesheet_content else None,\n                    result,\n                )\n\n            if _mlflow_enabled:\n                from .integration import mlflow\n\n                trace_prefix = _latest_trace_prefix()\n                current_version = _current_trace_version()\n                if trace_prefix is None or current_version is None:\n                    raise RuntimeError(\"MLflow tracing requires local tracing to be enabled.\")\n                poml_content = _read_latest_traced_file(\".poml\")\n                context_content = _read_latest_traced_file(\".context.json\")\n                stylesheet_content = _read_latest_traced_file(\".stylesheet.json\")\n                mlflow.log_poml_call(\n                    trace_prefix.name,\n                    poml_content or str(markup),\n                    json.loads(context_content) if context_content else None,\n                    json.loads(stylesheet_content) if stylesheet_content else None,\n                    result,\n                )\n\n            if trace_record is not None:\n                trace_record[\"result\"] = result\n            return result\n    finally:\n        if temp_input_file:\n            temp_input_file.close()\n        if temp_context_file:\n            temp_context_file.close()\n        if temp_stylesheet_file:\n            temp_stylesheet_file.close()\n        if trace_record is not None:\n            _trace_log.append(trace_record)\n</code></pre>"},{"location":"python/core/#poml.set_trace","title":"<code>set_trace(enabled=True, /, *, trace_dir=None)</code>","text":"<p>Enable or disable tracing of <code>poml</code> calls with optional backend integrations.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool | List[Backend] | Backend</code> <p>Controls which tracing backends to enable. Can be: - True: Enable local tracing only (equivalent to [\"local\"]) - False: Disable all tracing (equivalent to []) - str: Enable a single backend (\"local\", \"weave\", \"agentops\", \"mlflow\") - List[str]: Enable multiple backends. \"local\" is auto-enabled if any backends are specified.</p> <code>True</code> <code>trace_dir</code> <code>Optional[str | Path]</code> <p>Optional directory for local trace files. If provided when local tracing is enabled, a subdirectory named by the current timestamp (YYYYMMDDHHMMSSffffff) is created inside trace_dir.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Path]</code> <p>Path to the trace directory if local tracing is enabled, None otherwise.</p> <code>Optional[Path]</code> <p>The directory may be shared with POML Node.js by setting the</p> <code>Optional[Path]</code> <p>POML_TRACE environment variable in the invoking script.</p> Available backends <ul> <li>\"local\": Save trace files to disk</li> <li>\"weave\": Log to Weights &amp; Biases Weave (requires local tracing)</li> <li>\"agentops\": Log to AgentOps (requires local tracing)</li> <li>\"mlflow\": Log to MLflow (requires local tracing)</li> </ul> Source code in <code>python/poml/api.py</code> <pre><code>def set_trace(\n    enabled: bool | List[Backend] | Backend = True, /, *, trace_dir: Optional[str | Path] = None\n) -&gt; Optional[Path]:\n    \"\"\"Enable or disable tracing of ``poml`` calls with optional backend integrations.\n\n    Args:\n        enabled: Controls which tracing backends to enable. Can be:\n            - True: Enable local tracing only (equivalent to [\"local\"])\n            - False: Disable all tracing (equivalent to [])\n            - str: Enable a single backend (\"local\", \"weave\", \"agentops\", \"mlflow\")\n            - List[str]: Enable multiple backends. \"local\" is auto-enabled if any backends are specified.\n        trace_dir: Optional directory for local trace files. If provided when local\n            tracing is enabled, a subdirectory named by the current timestamp\n            (YYYYMMDDHHMMSSffffff) is created inside trace_dir.\n\n    Returns:\n        Path to the trace directory if local tracing is enabled, None otherwise.\n        The directory may be shared with POML Node.js by setting the\n        POML_TRACE environment variable in the invoking script.\n\n    Available backends:\n        - \"local\": Save trace files to disk\n        - \"weave\": Log to Weights &amp; Biases Weave (requires local tracing)\n        - \"agentops\": Log to AgentOps (requires local tracing)\n        - \"mlflow\": Log to MLflow (requires local tracing)\n    \"\"\"\n\n    if enabled is True:\n        enabled = [\"local\"]\n    elif enabled is False:\n        enabled = []\n\n    if isinstance(enabled, str):\n        enabled = [enabled]\n\n    global _trace_enabled, _trace_dir, _weave_enabled, _agentops_enabled, _mlflow_enabled\n    if enabled or \"local\" in enabled:\n        # When enabled is non-empty, we always enable local tracing.\n        _trace_enabled = True\n        env_dir = os.environ.get(\"POML_TRACE\")\n        if trace_dir is not None:\n            base = Path(trace_dir)\n            base.mkdir(parents=True, exist_ok=True)\n            ts = datetime.now().strftime(\"%Y%m%d%H%M%S%f\")\n            run_dir = base / ts\n            run_dir.mkdir(parents=True, exist_ok=True)\n            _trace_dir = run_dir\n        elif env_dir:\n            run_dir = Path(env_dir)\n            run_dir.mkdir(parents=True, exist_ok=True)\n            _trace_dir = run_dir\n        else:\n            _trace_dir = None\n    else:\n        _trace_enabled = False\n        _trace_dir = None\n\n    if \"weave\" in enabled:\n        _weave_enabled = True\n    else:\n        _weave_enabled = False\n\n    if \"agentops\" in enabled:\n        _agentops_enabled = True\n    else:\n        _agentops_enabled = False\n\n    if \"mlflow\" in enabled:\n        _mlflow_enabled = True\n    else:\n        _mlflow_enabled = False\n\n    return _trace_dir\n</code></pre>"},{"location":"python/core/#poml.trace_artifact","title":"<code>trace_artifact(file_suffix, contents)</code>","text":"<p>Write an additional artifact file for the most recent <code>poml</code> call.</p> Source code in <code>python/poml/api.py</code> <pre><code>def trace_artifact(file_suffix: str, contents: str | bytes) -&gt; Optional[Path]:\n    \"\"\"Write an additional artifact file for the most recent ``poml`` call.\"\"\"\n    prefix = _latest_trace_prefix()\n    if prefix is None:\n        return None\n    suffix = file_suffix if file_suffix.startswith(\".\") else f\".{file_suffix}\"\n    path = Path(str(prefix) + suffix)\n    mode = \"wb\" if isinstance(contents, (bytes, bytearray)) else \"w\"\n    with open(path, mode) as f:\n        f.write(contents)\n    return path\n</code></pre>"},{"location":"python/core/#poml.prompt","title":"<code>poml.prompt</code>","text":""},{"location":"python/core/#poml.prompt.Prompt","title":"<code>Prompt</code>","text":"<p>               Bases: <code>_TagLib</code></p> <p>Builds an XML structure using ElementTree, supporting context-managed tags.</p> Source code in <code>python/poml/prompt.py</code> <pre><code>class Prompt(_TagLib):\n    \"\"\"\n    Builds an XML structure using ElementTree, supporting context-managed tags.\n    \"\"\"\n\n    def __init__(self):\n        self.root_elements: list[ET.Element] = []\n        self.current_parent_stack: list[ET.Element] = []  # Stack of current ET.Element parents\n\n    def _prepare_attrs(self, **attrs) -&gt; dict[str, str]:\n        \"\"\"Converts attribute values to strings suitable for ElementTree.\"\"\"\n        prepared = {}\n        for k, v in attrs.items():\n            if v is None:  # Skip None attributes\n                continue\n            key_str = str(k)  # Keys are typically strings\n            if isinstance(v, bool):\n                val_str = str(v).lower()  # XML often uses \"true\"/\"false\"\n            elif isinstance(v, bytes):\n                b64 = base64.b64encode(v).decode()\n                if key_str == \"buffer\":\n                    prepared[\"base64\"] = b64\n                    continue\n                else:\n                    val_str = base64.b64encode(v).decode(\"ascii\")\n            elif isinstance(v, (int, float, str)):\n                val_str = str(v)\n            else:\n                val_str = json.dumps(v)  # Fallback for complex types, convert to JSON string\n            prepared[key_str] = val_str\n        return prepared\n\n    def text(self, content: str):\n        \"\"\"Adds text content to the currently open XML element.\"\"\"\n        if not self.current_parent_stack:\n            raise ValueError(\"Cannot add text: No tag is currently open. Use a 'with' block for a tag.\")\n\n        current_el = self.current_parent_stack[-1]\n        # ElementTree handles XML escaping for text content automatically\n        content_str = str(content)\n\n        # Append text correctly for mixed content (text between child elements)\n        if len(current_el) &gt; 0:  # If current element has children\n            last_child = current_el[-1]\n            if last_child.tail is None:\n                last_child.tail = content_str\n            else:\n                last_child.tail += content_str\n        else:  # No children yet in the current element, add to its primary text\n            if current_el.text is None:\n                current_el.text = content_str\n            else:\n                current_el.text += content_str\n\n    def _generate_xml_string(self, pretty: bool) -&gt; str:\n        \"\"\"\n        Serializes the built XML structure to a string.\n        Can optionally pretty-print the output.\n        \"\"\"\n        if self.current_parent_stack:\n            # This warning is for cases where rendering/dumping happens with unclosed tags.\n            print(\n                f\"Warning: Generating XML with open tags: {[el.tag for el in self.current_parent_stack]}. \"\n                \"Ensure all 'with' blocks for tags are properly exited before finalizing XML.\"\n            )\n\n        xml_strings = []\n        for root_el in self.root_elements:\n            if pretty:\n                # ET.indent modifies the element in-place (Python 3.9+)\n                ET.indent(root_el, space=\"  \", level=0)\n                xml_strings.append(ET.tostring(root_el, encoding=\"unicode\", method=\"xml\"))\n            else:\n                # Serialize compactly without extra whitespace\n                xml_strings.append(ET.tostring(root_el, encoding=\"unicode\", method=\"xml\"))\n\n        # Join the string representations of each root-level element.\n        # If pretty printing and multiple roots, join with newlines for readability.\n        # Otherwise, join directly to form a contiguous XML stream.\n        joiner = \"\\n\" if pretty and len(xml_strings) &gt; 0 else \"\"  # Add newline between pretty roots\n        return joiner.join(xml_strings)\n\n    def render(self, chat: bool = True, context=None, stylesheet=None) -&gt; list | dict | str:\n        \"\"\"\n        Renders the final XML. Raises error if tags are still open.\n        \"\"\"\n        if self.current_parent_stack:\n            raise ValueError(\n                f\"Cannot render: Open tags remaining: {[el.tag for el in self.current_parent_stack]}. \"\n                \"Ensure all 'with' blocks for tags are properly exited.\"\n            )\n        # poml likely expects a compact, single XML string.\n        final_xml = self._generate_xml_string(pretty=False)\n        return poml(final_xml, context=context, stylesheet=stylesheet, chat=chat)\n\n    def dump_xml(self) -&gt; str:\n        \"\"\"\n        Dumps the generated XML string, pretty-printed by default (useful for debugging).\n        \"\"\"\n        return self._generate_xml_string(pretty=True)\n\n    def __enter__(self):\n        \"\"\"Enter a context for building a prompt.\n\n        The Prompt instance can be reused across multiple ``with`` blocks. On\n        each entry we simply reset the stack of currently open elements while\n        preserving any previously created root elements so that additional tags\n        can be appended in subsequent sessions.\n        \"\"\"\n\n        # Reset the stack of open elements for this new session but leave any\n        # existing root elements intact so the prompt can be extended across\n        # multiple ``with`` blocks.\n        self.current_parent_stack = []\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Cleans up Prompt state upon exiting a 'with' block.\"\"\"\n        if self.current_parent_stack and exc_type is None:\n            # This means the Prompt context itself exited while some _ImplicitDualTagHandler\n            # contexts (tags) were still notionally open.\n            warnings.warn(\n                f\"Warning: Prompt context exited with open tags: {[el.tag for el in self.current_parent_stack]}. \"\n                \"This may indicate nested tag context managers were not properly closed before the Prompt context ended.\"\n            )\n\n        # Clear any open elements from the stack.  Previously the entire state\n        # was discarded on exit which meant ``dump_xml`` and ``render`` could\n        # only be called while inside the ``with`` block.  By keeping the root\n        # elements around we allow callers to finalize or extend the prompt\n        # after the block has exited.\n        self.current_parent_stack.clear()\n\n    def tag(self, tag_name: str, **attrs) -&gt; _ImplicitDualTagHandler:\n        return _ImplicitDualTagHandler(self, tag_name, attrs)\n</code></pre>"},{"location":"python/core/#poml.prompt.Prompt.__enter__","title":"<code>__enter__()</code>","text":"<p>Enter a context for building a prompt.</p> <p>The Prompt instance can be reused across multiple <code>with</code> blocks. On each entry we simply reset the stack of currently open elements while preserving any previously created root elements so that additional tags can be appended in subsequent sessions.</p> Source code in <code>python/poml/prompt.py</code> <pre><code>def __enter__(self):\n    \"\"\"Enter a context for building a prompt.\n\n    The Prompt instance can be reused across multiple ``with`` blocks. On\n    each entry we simply reset the stack of currently open elements while\n    preserving any previously created root elements so that additional tags\n    can be appended in subsequent sessions.\n    \"\"\"\n\n    # Reset the stack of open elements for this new session but leave any\n    # existing root elements intact so the prompt can be extended across\n    # multiple ``with`` blocks.\n    self.current_parent_stack = []\n    return self\n</code></pre>"},{"location":"python/core/#poml.prompt.Prompt.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Cleans up Prompt state upon exiting a 'with' block.</p> Source code in <code>python/poml/prompt.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Cleans up Prompt state upon exiting a 'with' block.\"\"\"\n    if self.current_parent_stack and exc_type is None:\n        # This means the Prompt context itself exited while some _ImplicitDualTagHandler\n        # contexts (tags) were still notionally open.\n        warnings.warn(\n            f\"Warning: Prompt context exited with open tags: {[el.tag for el in self.current_parent_stack]}. \"\n            \"This may indicate nested tag context managers were not properly closed before the Prompt context ended.\"\n        )\n\n    # Clear any open elements from the stack.  Previously the entire state\n    # was discarded on exit which meant ``dump_xml`` and ``render`` could\n    # only be called while inside the ``with`` block.  By keeping the root\n    # elements around we allow callers to finalize or extend the prompt\n    # after the block has exited.\n    self.current_parent_stack.clear()\n</code></pre>"},{"location":"python/core/#poml.prompt.Prompt.dump_xml","title":"<code>dump_xml()</code>","text":"<p>Dumps the generated XML string, pretty-printed by default (useful for debugging).</p> Source code in <code>python/poml/prompt.py</code> <pre><code>def dump_xml(self) -&gt; str:\n    \"\"\"\n    Dumps the generated XML string, pretty-printed by default (useful for debugging).\n    \"\"\"\n    return self._generate_xml_string(pretty=True)\n</code></pre>"},{"location":"python/core/#poml.prompt.Prompt.render","title":"<code>render(chat=True, context=None, stylesheet=None)</code>","text":"<p>Renders the final XML. Raises error if tags are still open.</p> Source code in <code>python/poml/prompt.py</code> <pre><code>def render(self, chat: bool = True, context=None, stylesheet=None) -&gt; list | dict | str:\n    \"\"\"\n    Renders the final XML. Raises error if tags are still open.\n    \"\"\"\n    if self.current_parent_stack:\n        raise ValueError(\n            f\"Cannot render: Open tags remaining: {[el.tag for el in self.current_parent_stack]}. \"\n            \"Ensure all 'with' blocks for tags are properly exited.\"\n        )\n    # poml likely expects a compact, single XML string.\n    final_xml = self._generate_xml_string(pretty=False)\n    return poml(final_xml, context=context, stylesheet=stylesheet, chat=chat)\n</code></pre>"},{"location":"python/core/#poml.prompt.Prompt.text","title":"<code>text(content)</code>","text":"<p>Adds text content to the currently open XML element.</p> Source code in <code>python/poml/prompt.py</code> <pre><code>def text(self, content: str):\n    \"\"\"Adds text content to the currently open XML element.\"\"\"\n    if not self.current_parent_stack:\n        raise ValueError(\"Cannot add text: No tag is currently open. Use a 'with' block for a tag.\")\n\n    current_el = self.current_parent_stack[-1]\n    # ElementTree handles XML escaping for text content automatically\n    content_str = str(content)\n\n    # Append text correctly for mixed content (text between child elements)\n    if len(current_el) &gt; 0:  # If current element has children\n        last_child = current_el[-1]\n        if last_child.tail is None:\n            last_child.tail = content_str\n        else:\n            last_child.tail += content_str\n    else:  # No children yet in the current element, add to its primary text\n        if current_el.text is None:\n            current_el.text = content_str\n        else:\n            current_el.text += content_str\n</code></pre>"},{"location":"python/integration/","title":"POML Integrations","text":""},{"location":"python/integration/#poml.integration.agentops","title":"<code>poml.integration.agentops</code>","text":""},{"location":"python/integration/#poml.integration.agentops.log_poml_call","title":"<code>log_poml_call(name, prompt, context, stylesheet, result)</code>","text":"<p>Log the entire poml call to agentops.</p> Source code in <code>python/poml/integration/agentops.py</code> <pre><code>def log_poml_call(name: str, prompt: str, context: dict | None, stylesheet: dict | None, result: Any) -&gt; Any:\n    \"\"\"Log the entire poml call to agentops.\"\"\"\n\n    @agentops.operation(name=\"poml\")\n    def poml(prompt, context, stylesheet):\n        return result\n\n    poml(prompt, context, stylesheet)\n</code></pre>"},{"location":"python/integration/#poml.integration.langchain","title":"<code>poml.integration.langchain</code>","text":""},{"location":"python/integration/#poml.integration.langchain.LangchainPomlTemplate","title":"<code>LangchainPomlTemplate</code>","text":"<p>               Bases: <code>PromptTemplate</code></p> <p>A LangChain-compatible prompt template that uses POML (Prompt Markup Language) for formatting.</p> <p>This class extends LangChain's PromptTemplate to support POML markup, enabling rich prompt formatting with speaker modes and structured content. It can load templates from files or strings and format them into either ChatPromptValue or StringPromptValue objects.</p> <p>Attributes:</p> Name Type Description <code>template_file</code> <code>Union[str, Path, None]</code> <p>Path to the POML template file, if loaded from file.</p> <code>speaker_mode</code> <code>bool</code> <p>Whether to format output as chat messages (True) or plain text (False). Defaults to True.</p> <p>Examples:</p> <p>Create from a template string:</p> <pre><code>&gt;&gt;&gt; template = LangchainPomlTemplate.from_template(\n...     \"Hello {{name}}!\", speaker_mode=True\n... )\n&gt;&gt;&gt; result = template.format(name=\"Alice\")\n</code></pre> <p>Load from a POML file:</p> <pre><code>&gt;&gt;&gt; template = LangchainPomlTemplate.from_file(\n...     \"path/to/template.poml\", speaker_mode=False\n... )\n&gt;&gt;&gt; result = template.format(user_input=\"What is AI?\")\n</code></pre> Note <ul> <li>In speaker_mode=True, returns ChatPromptValue with structured messages</li> <li>In speaker_mode=False, returns StringPromptValue with plain text</li> <li>The from_examples() method is not supported and will raise NotImplementedError</li> </ul> Source code in <code>python/poml/integration/langchain.py</code> <pre><code>class LangchainPomlTemplate(PromptTemplate):\n    \"\"\"A LangChain-compatible prompt template that uses POML (Prompt Markup Language) for formatting.\n\n    This class extends LangChain's PromptTemplate to support POML markup, enabling rich prompt\n    formatting with speaker modes and structured content. It can load templates from files or\n    strings and format them into either ChatPromptValue or StringPromptValue objects.\n\n    Attributes:\n        template_file (Union[str, Path, None]): Path to the POML template file, if loaded from file.\n        speaker_mode (bool): Whether to format output as chat messages (True) or plain text (False).\n            Defaults to True.\n\n    Examples:\n        Create from a template string:\n        &gt;&gt;&gt; template = LangchainPomlTemplate.from_template(\n        ...     \"Hello {{name}}!\", speaker_mode=True\n        ... )\n        &gt;&gt;&gt; result = template.format(name=\"Alice\")\n\n        Load from a POML file:\n        &gt;&gt;&gt; template = LangchainPomlTemplate.from_file(\n        ...     \"path/to/template.poml\", speaker_mode=False\n        ... )\n        &gt;&gt;&gt; result = template.format(user_input=\"What is AI?\")\n\n    Note:\n        - In speaker_mode=True, returns ChatPromptValue with structured messages\n        - In speaker_mode=False, returns StringPromptValue with plain text\n        - The from_examples() method is not supported and will raise NotImplementedError\n    \"\"\"\n\n    template_file: Union[str, Path, None] = None\n    speaker_mode: bool = True\n\n    @property\n    @override\n    def lc_attributes(self) -&gt; dict[str, Any]:\n        return {\n            \"template_file\": self.template_file,\n            \"speaker_mode\": self.speaker_mode,\n            # Template format is not used\n            # \"template_format\": self.template_format,\n        }\n\n    @classmethod\n    @override\n    def get_lc_namespace(cls) -&gt; list[str]:\n        return [\"poml\", \"integration\", \"langchain\"]\n\n    @classmethod\n    def from_examples(cls, *args, **kwargs):\n        raise NotImplementedError(\n            \"LangchainPomlTemplate does not support from_examples. Use from_template or from_file instead.\"\n        )\n\n    @classmethod\n    def from_file(\n        cls, template_file: Union[str, Path], *args, speaker_mode: bool = True, **kwargs\n    ) -&gt; \"LangchainPomlTemplate\":\n        instance: LangchainPomlTemplate = super().from_file(template_file, **kwargs)  # type: ignore\n        instance.template_file = template_file\n        instance.speaker_mode = speaker_mode\n        return instance\n\n    @classmethod\n    def from_template(cls, *args, speaker_mode: bool = True, **kwargs) -&gt; \"LangchainPomlTemplate\":\n        instance: LangchainPomlTemplate = super().from_template(*args, **kwargs)  # type: ignore\n        instance.speaker_mode = speaker_mode\n        return instance\n\n    def format(self, **kwargs) -&gt; Union[ChatPromptValue, StringPromptValue]:  # type: ignore\n        kwargs = self._merge_partial_and_user_variables(**kwargs)\n        if self.template_file:\n            formatted_messages = poml_formatter(self.template_file, self.speaker_mode, kwargs)\n        else:\n            formatted_messages = poml_formatter(self.template, self.speaker_mode, kwargs)\n        if self.speaker_mode:\n            return ChatPromptValue(messages=formatted_messages)\n        else:\n            if len(formatted_messages) == 1:\n                if isinstance(formatted_messages[0].content, str):\n                    return StringPromptValue(text=formatted_messages[0].content)\n                elif isinstance(formatted_messages[0].content, list):\n                    # If the content is a list, we assume it's a single message with multiple parts.\n                    if len(formatted_messages[0].content) == 1:\n                        # If there's only one part, return it as a StringPromptValue\n                        if isinstance(formatted_messages[0].content[0], str):\n                            return StringPromptValue(text=formatted_messages[0].content[0])\n                        else:\n                            raise ValueError(\n                                f\"Unsupported content type for non-speaker mode: {formatted_messages[0].content[0]}\"\n                            )\n                    else:\n                        raise ValueError(\n                            f\"Multi-part contents is not supported for non-speaker mode: {formatted_messages[0].content}\"\n                        )\n                else:\n                    raise ValueError(f\"Unsupported content type for non-speaker mode: {formatted_messages[0].content}\")\n            else:\n                raise ValueError(\n                    f\"Multiple messages returned, but non-speaker mode requires a single message: {formatted_messages}\"\n                )\n\n    def format_prompt(self, **kwargs):\n        return self.format(**kwargs)\n</code></pre>"},{"location":"python/integration/#poml.integration.mlflow","title":"<code>poml.integration.mlflow</code>","text":""},{"location":"python/integration/#poml.integration.mlflow.log_poml_call","title":"<code>log_poml_call(name, prompt, context, stylesheet, result)</code>","text":"<p>Log the entire poml call to mlflow.</p> Source code in <code>python/poml/integration/mlflow.py</code> <pre><code>def log_poml_call(name: str, prompt: str, context: dict | None, stylesheet: dict | None, result: Any) -&gt; Any:\n    \"\"\"Log the entire poml call to mlflow.\"\"\"\n\n    @mlflow.trace\n    def poml(prompt, context, stylesheet):\n        return result\n\n    prompt_registered = mlflow.genai.register_prompt(\n        name=name,\n        template=prompt,\n        tags={\n            \"format\": \"poml\",\n            \"source\": \"auto\"\n        },\n    )\n\n    poml(prompt, context, stylesheet)\n</code></pre>"},{"location":"python/integration/#poml.integration.weave","title":"<code>poml.integration.weave</code>","text":""},{"location":"python/integration/#poml.integration.weave.log_poml_call","title":"<code>log_poml_call(name, prompt, context, stylesheet, result)</code>","text":"<p>Log the entire poml call to weave.</p> Source code in <code>python/poml/integration/weave.py</code> <pre><code>def log_poml_call(name: str, prompt: str, context: dict | None, stylesheet: dict | None, result: Any) -&gt; Any:\n    \"\"\"Log the entire poml call to weave.\"\"\"\n\n    @weave.op\n    def poml(prompt, context, stylesheet):\n        return result\n\n    prompt_ref = weave.publish(prompt, name=name)\n    if context is not None:\n        context_ref = weave.publish(context, name=name + \".context\")\n    else:\n        context_ref = context\n    if stylesheet is not None and stylesheet != \"{}\":\n        stylesheet_ref = weave.publish(stylesheet, name=name + \".stylesheet\")\n    else:\n        stylesheet_ref = stylesheet\n\n    poml(prompt_ref, context_ref, stylesheet_ref)\n</code></pre>"},{"location":"typescript/","title":"TypeScript API Reference","text":"<p>This documentation is auto-generated from the TypeScript source code using TypeDoc.</p>"},{"location":"typescript/#installation","title":"Installation","text":""},{"location":"typescript/#stable-release","title":"Stable Release","text":"<p>To use the POML TypeScript API, install the package via npm:</p> <pre><code>npm install pomljs\n</code></pre>"},{"location":"typescript/#nightly-build","title":"Nightly Build","text":"<pre><code>npm install pomljs@nightly\n</code></pre>"},{"location":"typescript/#quick-start","title":"Quick Start","text":"<pre><code>import { Paragraph, Image } from 'poml/essentials';\nimport { read, write } from 'poml';\nconst prompt = &lt;Paragraph&gt;\n  Hello, world! Here is an image:\n  &lt;Image src=\"photo.jpg\" alt=\"A beautiful scenery\" /&gt;\n&lt;/Paragraph&gt;;\n\n// Parse the prompt components into an intermediate representation (IR)\nconst ir = await read(prompt);\n\n// Render it to different formats\nconst markdown = write(ir);\n</code></pre>"},{"location":"typescript/#links","title":"Links","text":"<ul> <li>Components Documentation: detailed component specifications with examples and parameters.</li> <li>TypeScript API Reference: auto-generated API reference for TypeScript components and utilities.</li> </ul>"},{"location":"typescript/reference/","title":"index","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/#functions","title":"Functions","text":""},{"location":"typescript/reference/#_readwithfile","title":"_readWithFile()","text":"<p>_readWithFile(<code>element</code>, <code>options?</code>, <code>context?</code>, <code>stylesheet?</code>, <code>sourcePath?</code>): <code>Promise</code>\\&lt;[<code>string</code>, <code>undefined</code> | <code>PomlFile</code>]&gt;</p> <p>Defined in: packages/poml/index.ts:42</p>"},{"location":"typescript/reference/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/#element","title":"element","text":"<p><code>string</code> | <code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;</p>"},{"location":"typescript/reference/#options","title":"options?","text":"<p><code>PomlReaderOptions</code></p>"},{"location":"typescript/reference/#context","title":"context?","text":""},{"location":"typescript/reference/#stylesheet","title":"stylesheet?","text":""},{"location":"typescript/reference/#sourcepath","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;[<code>string</code>, <code>undefined</code> | <code>PomlFile</code>]&gt;</p>"},{"location":"typescript/reference/#cleartrace","title":"clearTrace()","text":"<p>clearTrace(): <code>void</code></p> <p>Defined in: packages/poml/util/trace.ts:54</p>"},{"location":"typescript/reference/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/#commandline","title":"commandLine()","text":"<p>commandLine(<code>args</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: packages/poml/index.ts:147</p>"},{"location":"typescript/reference/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/#args","title":"args","text":"<p><code>CliArgs</code></p>"},{"location":"typescript/reference/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"typescript/reference/#dumptrace","title":"dumpTrace()","text":"<p>dumpTrace(<code>markup</code>, <code>context?</code>, <code>stylesheet?</code>, <code>result?</code>, <code>sourcePath?</code>, <code>prettyResult?</code>): <code>void</code></p> <p>Defined in: packages/poml/util/trace.ts:84</p>"},{"location":"typescript/reference/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/#markup","title":"markup","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#context_1","title":"context?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/#stylesheet_1","title":"stylesheet?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/#result","title":"result?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/#sourcepath_1","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#prettyresult","title":"prettyResult?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/#parsejsonwithbuffers","title":"parseJsonWithBuffers()","text":"<p>parseJsonWithBuffers(<code>text</code>): <code>any</code></p> <p>Defined in: packages/poml/util/trace.ts:22</p>"},{"location":"typescript/reference/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/#text","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#returns_4","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/#poml","title":"poml()","text":"<p>poml(<code>element</code>): <code>Promise</code>\\&lt;<code>RichContent</code>&gt;</p> <p>Defined in: packages/poml/index.ts:114</p>"},{"location":"typescript/reference/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/#element_1","title":"element","text":"<p><code>string</code> | <code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;</p>"},{"location":"typescript/reference/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>RichContent</code>&gt;</p>"},{"location":"typescript/reference/#read","title":"read()","text":"<p>read(<code>element</code>, <code>options?</code>, <code>context?</code>, <code>stylesheet?</code>, <code>sourcePath?</code>): <code>Promise</code>\\&lt;<code>string</code>&gt;</p> <p>Defined in: packages/poml/index.ts:17</p>"},{"location":"typescript/reference/#parameters_5","title":"Parameters","text":""},{"location":"typescript/reference/#element_2","title":"element","text":"<p><code>string</code> | <code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;</p>"},{"location":"typescript/reference/#options_1","title":"options?","text":"<p><code>PomlReaderOptions</code></p>"},{"location":"typescript/reference/#context_2","title":"context?","text":""},{"location":"typescript/reference/#stylesheet_2","title":"stylesheet?","text":""},{"location":"typescript/reference/#sourcepath_2","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>string</code>&gt;</p>"},{"location":"typescript/reference/#settrace","title":"setTrace()","text":"<p>setTrace(<code>enabled</code>, <code>dir?</code>): <code>undefined</code> | <code>string</code></p> <p>Defined in: packages/poml/util/trace.ts:34</p>"},{"location":"typescript/reference/#parameters_6","title":"Parameters","text":""},{"location":"typescript/reference/#enabled","title":"enabled","text":"<p><code>boolean</code> = <code>true</code></p>"},{"location":"typescript/reference/#dir","title":"dir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#returns_7","title":"Returns","text":"<p><code>undefined</code> | <code>string</code></p>"},{"location":"typescript/reference/#write","title":"write()","text":"<p>Entry point for turning a parsed IR string into rich content or a list of speaker messages. The heavy lifting is done by <code>EnvironmentDispatcher</code>.</p>"},{"location":"typescript/reference/#call-signature","title":"Call Signature","text":"<p>write(<code>ir</code>, <code>options?</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/index.ts:82</p>"},{"location":"typescript/reference/#parameters_7","title":"Parameters","text":""},{"location":"typescript/reference/#ir","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_2","title":"options?","text":"<p><code>WriteOptionsNoSpeakerMode</code></p>"},{"location":"typescript/reference/#returns_8","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/#call-signature_1","title":"Call Signature","text":"<p>write(<code>ir</code>, <code>options</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/index.ts:83</p>"},{"location":"typescript/reference/#parameters_8","title":"Parameters","text":""},{"location":"typescript/reference/#ir_1","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_3","title":"options","text":"<p><code>WriteOptionsSpeakerMode</code></p>"},{"location":"typescript/reference/#returns_9","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/#call-signature_2","title":"Call Signature","text":"<p>write(<code>ir</code>, <code>options?</code>): <code>RichContent</code> | <code>Message</code>[]</p> <p>Defined in: packages/poml/index.ts:84</p>"},{"location":"typescript/reference/#parameters_9","title":"Parameters","text":""},{"location":"typescript/reference/#ir_2","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_4","title":"options?","text":"<p><code>WriteOptions</code></p>"},{"location":"typescript/reference/#returns_10","title":"Returns","text":"<p><code>RichContent</code> | <code>Message</code>[]</p>"},{"location":"typescript/reference/#writewithsourcemap","title":"writeWithSourceMap()","text":"<p>Variant of write that also exposes a source map describing the mapping between input indices and output content.</p>"},{"location":"typescript/reference/#call-signature_3","title":"Call Signature","text":"<p>writeWithSourceMap(<code>ir</code>, <code>options?</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/index.ts:98</p>"},{"location":"typescript/reference/#parameters_10","title":"Parameters","text":""},{"location":"typescript/reference/#ir_3","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_5","title":"options?","text":"<p><code>WriteOptionsNoSpeakerMode</code></p>"},{"location":"typescript/reference/#returns_11","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/#call-signature_4","title":"Call Signature","text":"<p>writeWithSourceMap(<code>ir</code>, <code>options</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/index.ts:99</p>"},{"location":"typescript/reference/#parameters_11","title":"Parameters","text":""},{"location":"typescript/reference/#ir_4","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_6","title":"options","text":"<p><code>WriteOptionsSpeakerMode</code></p>"},{"location":"typescript/reference/#returns_12","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/#call-signature_5","title":"Call Signature","text":"<p>writeWithSourceMap(<code>ir</code>, <code>options?</code>): <code>SourceMapRichContent</code>[] | <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/index.ts:100</p>"},{"location":"typescript/reference/#parameters_12","title":"Parameters","text":""},{"location":"typescript/reference/#ir_5","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/#options_7","title":"options?","text":"<p><code>WriteOptions</code></p>"},{"location":"typescript/reference/#returns_13","title":"Returns","text":"<p><code>SourceMapRichContent</code>[] | <code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/base/","title":"base","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/base/#classes","title":"Classes","text":""},{"location":"typescript/reference/base/#buffercollection","title":"BufferCollection","text":"<p>Defined in: packages/poml/base.tsx:370</p>"},{"location":"typescript/reference/base/#accessors","title":"Accessors","text":""},{"location":"typescript/reference/base/#instance","title":"instance","text":""},{"location":"typescript/reference/base/#get-signature","title":"Get Signature","text":"<p>get <code>static</code> instance(): <code>BufferCollection</code></p> <p>Defined in: packages/poml/base.tsx:379</p>"},{"location":"typescript/reference/base/#returns","title":"Returns","text":"<p><code>BufferCollection</code></p>"},{"location":"typescript/reference/base/#methods","title":"Methods","text":""},{"location":"typescript/reference/base/#clear","title":"clear()","text":"<p><code>static</code> clear(): <code>void</code></p> <p>Defined in: packages/poml/base.tsx:417</p>"},{"location":"typescript/reference/base/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#get","title":"get()","text":"<p><code>static</code> get\\&lt;<code>T</code>&gt;(<code>key</code>): <code>undefined</code> | <code>T</code></p> <p>Defined in: packages/poml/base.tsx:397</p>"},{"location":"typescript/reference/base/#type-parameters","title":"Type Parameters","text":""},{"location":"typescript/reference/base/#t","title":"T","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/base/#key","title":"key","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#returns_2","title":"Returns","text":"<p><code>undefined</code> | <code>T</code></p>"},{"location":"typescript/reference/base/#set","title":"set()","text":"<p><code>static</code> set(<code>key</code>, <code>value</code>): <code>void</code></p> <p>Defined in: packages/poml/base.tsx:402</p>"},{"location":"typescript/reference/base/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/base/#key_1","title":"key","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#value","title":"value","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#errorcollection","title":"ErrorCollection","text":"<p>Defined in: packages/poml/base.tsx:285</p> <p>A can to hold all the errors.</p>"},{"location":"typescript/reference/base/#accessors_1","title":"Accessors","text":""},{"location":"typescript/reference/base/#instance_1","title":"instance","text":""},{"location":"typescript/reference/base/#get-signature_1","title":"Get Signature","text":"<p>get <code>static</code> instance(): <code>ErrorCollection</code></p> <p>Defined in: packages/poml/base.tsx:292</p>"},{"location":"typescript/reference/base/#returns_4","title":"Returns","text":"<p><code>ErrorCollection</code></p>"},{"location":"typescript/reference/base/#methods_1","title":"Methods","text":""},{"location":"typescript/reference/base/#add","title":"add()","text":"<p><code>static</code> add(<code>error</code>): <code>void</code></p> <p>Defined in: packages/poml/base.tsx:299</p>"},{"location":"typescript/reference/base/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/base/#error","title":"error","text":"<p><code>PomlError</code></p>"},{"location":"typescript/reference/base/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#clear_1","title":"clear()","text":"<p><code>static</code> clear(): <code>void</code></p> <p>Defined in: packages/poml/base.tsx:319</p>"},{"location":"typescript/reference/base/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#empty","title":"empty()","text":"<p><code>static</code> empty(): <code>boolean</code></p> <p>Defined in: packages/poml/base.tsx:315</p>"},{"location":"typescript/reference/base/#returns_7","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"typescript/reference/base/#first","title":"first()","text":"<p><code>static</code> first(): <code>PomlError</code></p> <p>Defined in: packages/poml/base.tsx:303</p>"},{"location":"typescript/reference/base/#returns_8","title":"Returns","text":"<p><code>PomlError</code></p>"},{"location":"typescript/reference/base/#last","title":"last()","text":"<p><code>static</code> last(): <code>PomlError</code></p> <p>Defined in: packages/poml/base.tsx:307</p>"},{"location":"typescript/reference/base/#returns_9","title":"Returns","text":"<p><code>PomlError</code></p>"},{"location":"typescript/reference/base/#list","title":"list()","text":"<p><code>static</code> list(): <code>PomlError</code>[]</p> <p>Defined in: packages/poml/base.tsx:311</p>"},{"location":"typescript/reference/base/#returns_10","title":"Returns","text":"<p><code>PomlError</code>[]</p>"},{"location":"typescript/reference/base/#pomlcomponent","title":"PomlComponent","text":"<p>Defined in: packages/poml/base.tsx:596</p>"},{"location":"typescript/reference/base/#constructors","title":"Constructors","text":""},{"location":"typescript/reference/base/#constructor","title":"Constructor","text":"<p>new PomlComponent(<code>officialName</code>, <code>componentFunc</code>, <code>options</code>): <code>PomlComponent</code></p> <p>Defined in: packages/poml/base.tsx:601</p>"},{"location":"typescript/reference/base/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/base/#officialname","title":"officialName","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#componentfunc","title":"componentFunc","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#options","title":"options","text":"<p><code>ComponentOptions</code></p>"},{"location":"typescript/reference/base/#returns_11","title":"Returns","text":"<p><code>PomlComponent</code></p>"},{"location":"typescript/reference/base/#accessors_2","title":"Accessors","text":""},{"location":"typescript/reference/base/#name","title":"name","text":""},{"location":"typescript/reference/base/#get-signature_2","title":"Get Signature","text":"<p>get name(): <code>string</code></p> <p>Defined in: packages/poml/base.tsx:607</p>"},{"location":"typescript/reference/base/#returns_12","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#methods_2","title":"Methods","text":""},{"location":"typescript/reference/base/#getaliases","title":"getAliases()","text":"<p>getAliases(<code>lower</code>): <code>string</code>[]</p> <p>Defined in: packages/poml/base.tsx:611</p>"},{"location":"typescript/reference/base/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/base/#lower","title":"lower","text":"<p><code>boolean</code> = <code>true</code></p>"},{"location":"typescript/reference/base/#returns_13","title":"Returns","text":"<p><code>string</code>[]</p>"},{"location":"typescript/reference/base/#ispublic","title":"isPublic()","text":"<p>isPublic(): <code>boolean</code></p> <p>Defined in: packages/poml/base.tsx:647</p>"},{"location":"typescript/reference/base/#returns_14","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"typescript/reference/base/#mro","title":"mro()","text":"<p>mro(): <code>PomlComponent</code>[]</p> <p>Defined in: packages/poml/base.tsx:681</p>"},{"location":"typescript/reference/base/#returns_15","title":"Returns","text":"<p><code>PomlComponent</code>[]</p>"},{"location":"typescript/reference/base/#parameters_5","title":"parameters()","text":"<p>parameters(): <code>Parameter</code>[]</p> <p>Defined in: packages/poml/base.tsx:663</p>"},{"location":"typescript/reference/base/#returns_16","title":"Returns","text":"<p><code>Parameter</code>[]</p>"},{"location":"typescript/reference/base/#render","title":"render()","text":"<p>render(<code>props</code>): <code>any</code></p> <p>Defined in: packages/poml/base.tsx:799</p>"},{"location":"typescript/reference/base/#parameters_6","title":"Parameters","text":""},{"location":"typescript/reference/base/#props","title":"props","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#returns_17","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#spec","title":"spec()","text":"<p>spec(): <code>undefined</code> | <code>ComponentSpec</code></p> <p>Defined in: packages/poml/base.tsx:659</p>"},{"location":"typescript/reference/base/#returns_18","title":"Returns","text":"<p><code>undefined</code> | <code>ComponentSpec</code></p>"},{"location":"typescript/reference/base/#style","title":"style()","text":"<p>style(<code>props</code>, <code>stylesheet?</code>): <code>any</code></p> <p>Defined in: packages/poml/base.tsx:708</p>"},{"location":"typescript/reference/base/#parameters_7","title":"Parameters","text":""},{"location":"typescript/reference/base/#props_1","title":"props","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#stylesheet","title":"stylesheet?","text":"<p><code>StyleSheet</code></p>"},{"location":"typescript/reference/base/#returns_19","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#fromspec","title":"fromSpec()","text":"<p><code>static</code> fromSpec(<code>spec</code>): <code>PomlComponent</code></p> <p>Defined in: packages/poml/base.tsx:651</p>"},{"location":"typescript/reference/base/#parameters_8","title":"Parameters","text":""},{"location":"typescript/reference/base/#spec_1","title":"spec","text":"<p><code>ComponentSpec</code></p>"},{"location":"typescript/reference/base/#returns_20","title":"Returns","text":"<p><code>PomlComponent</code></p>"},{"location":"typescript/reference/base/#readerror","title":"ReadError","text":"<p>Defined in: packages/poml/base.tsx:248</p>"},{"location":"typescript/reference/base/#extends","title":"Extends","text":"<ul> <li><code>PomlError</code></li> </ul>"},{"location":"typescript/reference/base/#constructors_1","title":"Constructors","text":""},{"location":"typescript/reference/base/#constructor_1","title":"Constructor","text":"<p>new ReadError(<code>message</code>, <code>startIndex?</code>, <code>endIndex?</code>, <code>sourcePath?</code>, <code>options?</code>): <code>ReadError</code></p> <p>Defined in: packages/poml/base.tsx:249</p>"},{"location":"typescript/reference/base/#parameters_9","title":"Parameters","text":""},{"location":"typescript/reference/base/#message","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#startindex","title":"startIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#endindex","title":"endIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#sourcepath","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#options_1","title":"options?","text":"<p><code>PomlErrorOptions</code></p>"},{"location":"typescript/reference/base/#returns_21","title":"Returns","text":"<p><code>ReadError</code></p>"},{"location":"typescript/reference/base/#overrides","title":"Overrides","text":"<p><code>PomlError.constructor</code></p>"},{"location":"typescript/reference/base/#properties","title":"Properties","text":""},{"location":"typescript/reference/base/#cause","title":"cause?","text":"<p><code>optional</code> cause: <code>unknown</code></p> <p>Defined in: node_modules/typescript/lib/lib.es2022.error.d.ts:26</p>"},{"location":"typescript/reference/base/#inherited-from","title":"Inherited from","text":"<p><code>PomlError.cause</code></p>"},{"location":"typescript/reference/base/#endindex_1","title":"endIndex?","text":"<p><code>optional</code> endIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:252</p>"},{"location":"typescript/reference/base/#message_1","title":"message","text":"<p>message: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1077</p>"},{"location":"typescript/reference/base/#inherited-from_1","title":"Inherited from","text":"<p><code>PomlError.message</code></p>"},{"location":"typescript/reference/base/#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1076</p>"},{"location":"typescript/reference/base/#inherited-from_2","title":"Inherited from","text":"<p><code>PomlError.name</code></p>"},{"location":"typescript/reference/base/#severity","title":"severity","text":"<p>severity: <code>\"error\"</code> | <code>\"warning\"</code> = <code>'error'</code></p> <p>Defined in: packages/poml/base.tsx:230</p>"},{"location":"typescript/reference/base/#inherited-from_3","title":"Inherited from","text":"<p><code>PomlError.severity</code></p>"},{"location":"typescript/reference/base/#sourcepath_1","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:253</p>"},{"location":"typescript/reference/base/#stack","title":"stack?","text":"<p><code>optional</code> stack: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1078</p>"},{"location":"typescript/reference/base/#inherited-from_4","title":"Inherited from","text":"<p><code>PomlError.stack</code></p>"},{"location":"typescript/reference/base/#startindex_1","title":"startIndex?","text":"<p><code>optional</code> startIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:251</p>"},{"location":"typescript/reference/base/#stacktracelimit","title":"stackTraceLimit","text":"<p><code>static</code> stackTraceLimit: <code>number</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:149</p> <p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames collected by a stack trace (whether generated by <code>new Error().stack</code> or <code>Error.captureStackTrace(obj)</code>).</p> <p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes will affect any stack trace captured after the value has been changed.</p> <p>If set to a non-number value, or set to a negative number, stack traces will not capture any frames.</p>"},{"location":"typescript/reference/base/#inherited-from_5","title":"Inherited from","text":"<p><code>PomlError.stackTraceLimit</code></p>"},{"location":"typescript/reference/base/#methods_3","title":"Methods","text":""},{"location":"typescript/reference/base/#capturestacktrace","title":"captureStackTrace()","text":"<p><code>static</code> captureStackTrace(<code>targetObject</code>, <code>constructorOpt?</code>): <code>void</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:133</p> <p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns a string representing the location in the code at which <code>Error.captureStackTrace()</code> was called.</p> <pre><code>const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // Similar to `new Error().stack`\n</code></pre> <p>The first line of the trace will be prefixed with <code>${myObject.name}: ${myObject.message}</code>.</p> <p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames above <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the generated stack trace.</p> <p>The <code>constructorOpt</code> argument is useful for hiding implementation details of error generation from the user. For instance:</p> <pre><code>function a() {\n  b();\n}\n\nfunction b() {\n  c();\n}\n\nfunction c() {\n  // Create an error without stack trace to avoid calculating the stack trace twice.\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  const error = new Error();\n  Error.stackTraceLimit = stackTraceLimit;\n\n  // Capture the stack trace above function b\n  Error.captureStackTrace(error, b); // Neither function c, nor b is included in the stack trace\n  throw error;\n}\n\na();\n</code></pre>"},{"location":"typescript/reference/base/#parameters_10","title":"Parameters","text":""},{"location":"typescript/reference/base/#targetobject","title":"targetObject","text":"<p><code>object</code></p>"},{"location":"typescript/reference/base/#constructoropt","title":"constructorOpt?","text":"<p><code>Function</code></p>"},{"location":"typescript/reference/base/#returns_22","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#inherited-from_6","title":"Inherited from","text":"<p><code>PomlError.captureStackTrace</code></p>"},{"location":"typescript/reference/base/#fromprops","title":"fromProps()","text":"<p><code>static</code> fromProps(<code>message</code>, <code>props</code>, <code>options?</code>): <code>ReadError</code></p> <p>Defined in: packages/poml/base.tsx:260</p>"},{"location":"typescript/reference/base/#parameters_11","title":"Parameters","text":""},{"location":"typescript/reference/base/#message_2","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#props_2","title":"props","text":"<p><code>PropsBase</code></p>"},{"location":"typescript/reference/base/#options_2","title":"options?","text":"<p><code>PomlErrorOptions</code></p>"},{"location":"typescript/reference/base/#returns_23","title":"Returns","text":"<p><code>ReadError</code></p>"},{"location":"typescript/reference/base/#preparestacktrace","title":"prepareStackTrace()","text":"<p><code>static</code> prepareStackTrace(<code>err</code>, <code>stackTraces</code>): <code>any</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:137</p>"},{"location":"typescript/reference/base/#parameters_12","title":"Parameters","text":""},{"location":"typescript/reference/base/#err","title":"err","text":"<p><code>Error</code></p>"},{"location":"typescript/reference/base/#stacktraces","title":"stackTraces","text":"<p><code>CallSite</code>[]</p>"},{"location":"typescript/reference/base/#returns_24","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#see","title":"See","text":"<p>https://v8.dev/docs/stack-trace-api#customizing-stack-traces</p>"},{"location":"typescript/reference/base/#inherited-from_7","title":"Inherited from","text":"<p><code>PomlError.prepareStackTrace</code></p>"},{"location":"typescript/reference/base/#systemerror","title":"SystemError","text":"<p>Defined in: packages/poml/base.tsx:241</p>"},{"location":"typescript/reference/base/#extends_1","title":"Extends","text":"<ul> <li><code>PomlError</code></li> </ul>"},{"location":"typescript/reference/base/#constructors_2","title":"Constructors","text":""},{"location":"typescript/reference/base/#constructor_2","title":"Constructor","text":"<p>new SystemError(<code>message</code>, <code>options?</code>): <code>SystemError</code></p> <p>Defined in: packages/poml/base.tsx:242</p>"},{"location":"typescript/reference/base/#parameters_13","title":"Parameters","text":""},{"location":"typescript/reference/base/#message_3","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#options_3","title":"options?","text":"<p><code>ErrorOptions</code></p>"},{"location":"typescript/reference/base/#returns_25","title":"Returns","text":"<p><code>SystemError</code></p>"},{"location":"typescript/reference/base/#overrides_1","title":"Overrides","text":"<p><code>PomlError.constructor</code></p>"},{"location":"typescript/reference/base/#properties_1","title":"Properties","text":""},{"location":"typescript/reference/base/#cause_1","title":"cause?","text":"<p><code>optional</code> cause: <code>unknown</code></p> <p>Defined in: node_modules/typescript/lib/lib.es2022.error.d.ts:26</p>"},{"location":"typescript/reference/base/#inherited-from_8","title":"Inherited from","text":"<p><code>PomlError.cause</code></p>"},{"location":"typescript/reference/base/#message_4","title":"message","text":"<p>message: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1077</p>"},{"location":"typescript/reference/base/#inherited-from_9","title":"Inherited from","text":"<p><code>PomlError.message</code></p>"},{"location":"typescript/reference/base/#name_2","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1076</p>"},{"location":"typescript/reference/base/#inherited-from_10","title":"Inherited from","text":"<p><code>PomlError.name</code></p>"},{"location":"typescript/reference/base/#severity_1","title":"severity","text":"<p>severity: <code>\"error\"</code> | <code>\"warning\"</code> = <code>'error'</code></p> <p>Defined in: packages/poml/base.tsx:230</p>"},{"location":"typescript/reference/base/#inherited-from_11","title":"Inherited from","text":"<p><code>ReadError</code>.<code>severity</code></p>"},{"location":"typescript/reference/base/#stack_1","title":"stack?","text":"<p><code>optional</code> stack: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1078</p>"},{"location":"typescript/reference/base/#inherited-from_12","title":"Inherited from","text":"<p><code>PomlError.stack</code></p>"},{"location":"typescript/reference/base/#stacktracelimit_1","title":"stackTraceLimit","text":"<p><code>static</code> stackTraceLimit: <code>number</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:149</p> <p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames collected by a stack trace (whether generated by <code>new Error().stack</code> or <code>Error.captureStackTrace(obj)</code>).</p> <p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes will affect any stack trace captured after the value has been changed.</p> <p>If set to a non-number value, or set to a negative number, stack traces will not capture any frames.</p>"},{"location":"typescript/reference/base/#inherited-from_13","title":"Inherited from","text":"<p><code>PomlError.stackTraceLimit</code></p>"},{"location":"typescript/reference/base/#methods_4","title":"Methods","text":""},{"location":"typescript/reference/base/#capturestacktrace_1","title":"captureStackTrace()","text":"<p><code>static</code> captureStackTrace(<code>targetObject</code>, <code>constructorOpt?</code>): <code>void</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:133</p> <p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns a string representing the location in the code at which <code>Error.captureStackTrace()</code> was called.</p> <pre><code>const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // Similar to `new Error().stack`\n</code></pre> <p>The first line of the trace will be prefixed with <code>${myObject.name}: ${myObject.message}</code>.</p> <p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames above <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the generated stack trace.</p> <p>The <code>constructorOpt</code> argument is useful for hiding implementation details of error generation from the user. For instance:</p> <pre><code>function a() {\n  b();\n}\n\nfunction b() {\n  c();\n}\n\nfunction c() {\n  // Create an error without stack trace to avoid calculating the stack trace twice.\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  const error = new Error();\n  Error.stackTraceLimit = stackTraceLimit;\n\n  // Capture the stack trace above function b\n  Error.captureStackTrace(error, b); // Neither function c, nor b is included in the stack trace\n  throw error;\n}\n\na();\n</code></pre>"},{"location":"typescript/reference/base/#parameters_14","title":"Parameters","text":""},{"location":"typescript/reference/base/#targetobject_1","title":"targetObject","text":"<p><code>object</code></p>"},{"location":"typescript/reference/base/#constructoropt_1","title":"constructorOpt?","text":"<p><code>Function</code></p>"},{"location":"typescript/reference/base/#returns_26","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#inherited-from_14","title":"Inherited from","text":"<p><code>PomlError.captureStackTrace</code></p>"},{"location":"typescript/reference/base/#preparestacktrace_1","title":"prepareStackTrace()","text":"<p><code>static</code> prepareStackTrace(<code>err</code>, <code>stackTraces</code>): <code>any</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:137</p>"},{"location":"typescript/reference/base/#parameters_15","title":"Parameters","text":""},{"location":"typescript/reference/base/#err_1","title":"err","text":"<p><code>Error</code></p>"},{"location":"typescript/reference/base/#stacktraces_1","title":"stackTraces","text":"<p><code>CallSite</code>[]</p>"},{"location":"typescript/reference/base/#returns_27","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#see_1","title":"See","text":"<p>https://v8.dev/docs/stack-trace-api#customizing-stack-traces</p>"},{"location":"typescript/reference/base/#inherited-from_15","title":"Inherited from","text":"<p><code>PomlError.prepareStackTrace</code></p>"},{"location":"typescript/reference/base/#writeerror","title":"WriteError","text":"<p>Defined in: packages/poml/base.tsx:265</p>"},{"location":"typescript/reference/base/#extends_2","title":"Extends","text":"<ul> <li><code>PomlError</code></li> </ul>"},{"location":"typescript/reference/base/#constructors_3","title":"Constructors","text":""},{"location":"typescript/reference/base/#constructor_3","title":"Constructor","text":"<p>new WriteError(<code>message</code>, <code>startIndex?</code>, <code>endIndex?</code>, <code>sourcePath?</code>, <code>irStartIndex?</code>, <code>irEndIndex?</code>, <code>relatedIr?</code>, <code>options?</code>): <code>WriteError</code></p> <p>Defined in: packages/poml/base.tsx:266</p>"},{"location":"typescript/reference/base/#parameters_16","title":"Parameters","text":""},{"location":"typescript/reference/base/#message_5","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#startindex_2","title":"startIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#endindex_2","title":"endIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#sourcepath_2","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#irstartindex","title":"irStartIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#irendindex","title":"irEndIndex?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/base/#relatedir","title":"relatedIr?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#options_4","title":"options?","text":"<p><code>PomlErrorOptions</code></p>"},{"location":"typescript/reference/base/#returns_28","title":"Returns","text":"<p><code>WriteError</code></p>"},{"location":"typescript/reference/base/#overrides_2","title":"Overrides","text":"<p><code>PomlError.constructor</code></p>"},{"location":"typescript/reference/base/#properties_2","title":"Properties","text":""},{"location":"typescript/reference/base/#cause_2","title":"cause?","text":"<p><code>optional</code> cause: <code>unknown</code></p> <p>Defined in: node_modules/typescript/lib/lib.es2022.error.d.ts:26</p>"},{"location":"typescript/reference/base/#inherited-from_16","title":"Inherited from","text":"<p><code>PomlError.cause</code></p>"},{"location":"typescript/reference/base/#endindex_3","title":"endIndex?","text":"<p><code>optional</code> endIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:269</p>"},{"location":"typescript/reference/base/#irendindex_1","title":"irEndIndex?","text":"<p><code>optional</code> irEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:272</p>"},{"location":"typescript/reference/base/#irstartindex_1","title":"irStartIndex?","text":"<p><code>optional</code> irStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:271</p>"},{"location":"typescript/reference/base/#message_6","title":"message","text":"<p>message: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1077</p>"},{"location":"typescript/reference/base/#inherited-from_17","title":"Inherited from","text":"<p><code>PomlError.message</code></p>"},{"location":"typescript/reference/base/#name_3","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1076</p>"},{"location":"typescript/reference/base/#inherited-from_18","title":"Inherited from","text":"<p><code>PomlError.name</code></p>"},{"location":"typescript/reference/base/#relatedir_1","title":"relatedIr?","text":"<p><code>optional</code> relatedIr: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:273</p>"},{"location":"typescript/reference/base/#severity_2","title":"severity","text":"<p>severity: <code>\"error\"</code> | <code>\"warning\"</code> = <code>'error'</code></p> <p>Defined in: packages/poml/base.tsx:230</p>"},{"location":"typescript/reference/base/#inherited-from_19","title":"Inherited from","text":"<p><code>PomlError.severity</code></p>"},{"location":"typescript/reference/base/#sourcepath_3","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:270</p>"},{"location":"typescript/reference/base/#stack_2","title":"stack?","text":"<p><code>optional</code> stack: <code>string</code></p> <p>Defined in: node_modules/typescript/lib/lib.es5.d.ts:1078</p>"},{"location":"typescript/reference/base/#inherited-from_20","title":"Inherited from","text":"<p><code>PomlError.stack</code></p>"},{"location":"typescript/reference/base/#startindex_3","title":"startIndex?","text":"<p><code>optional</code> startIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:268</p>"},{"location":"typescript/reference/base/#stacktracelimit_2","title":"stackTraceLimit","text":"<p><code>static</code> stackTraceLimit: <code>number</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:149</p> <p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames collected by a stack trace (whether generated by <code>new Error().stack</code> or <code>Error.captureStackTrace(obj)</code>).</p> <p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes will affect any stack trace captured after the value has been changed.</p> <p>If set to a non-number value, or set to a negative number, stack traces will not capture any frames.</p>"},{"location":"typescript/reference/base/#inherited-from_21","title":"Inherited from","text":"<p><code>PomlError.stackTraceLimit</code></p>"},{"location":"typescript/reference/base/#methods_5","title":"Methods","text":""},{"location":"typescript/reference/base/#capturestacktrace_2","title":"captureStackTrace()","text":"<p><code>static</code> captureStackTrace(<code>targetObject</code>, <code>constructorOpt?</code>): <code>void</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:133</p> <p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns a string representing the location in the code at which <code>Error.captureStackTrace()</code> was called.</p> <pre><code>const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // Similar to `new Error().stack`\n</code></pre> <p>The first line of the trace will be prefixed with <code>${myObject.name}: ${myObject.message}</code>.</p> <p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames above <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the generated stack trace.</p> <p>The <code>constructorOpt</code> argument is useful for hiding implementation details of error generation from the user. For instance:</p> <pre><code>function a() {\n  b();\n}\n\nfunction b() {\n  c();\n}\n\nfunction c() {\n  // Create an error without stack trace to avoid calculating the stack trace twice.\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  const error = new Error();\n  Error.stackTraceLimit = stackTraceLimit;\n\n  // Capture the stack trace above function b\n  Error.captureStackTrace(error, b); // Neither function c, nor b is included in the stack trace\n  throw error;\n}\n\na();\n</code></pre>"},{"location":"typescript/reference/base/#parameters_17","title":"Parameters","text":""},{"location":"typescript/reference/base/#targetobject_2","title":"targetObject","text":"<p><code>object</code></p>"},{"location":"typescript/reference/base/#constructoropt_2","title":"constructorOpt?","text":"<p><code>Function</code></p>"},{"location":"typescript/reference/base/#returns_29","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#inherited-from_22","title":"Inherited from","text":"<p><code>PomlError.captureStackTrace</code></p>"},{"location":"typescript/reference/base/#preparestacktrace_2","title":"prepareStackTrace()","text":"<p><code>static</code> prepareStackTrace(<code>err</code>, <code>stackTraces</code>): <code>any</code></p> <p>Defined in: node_modules/@types/node/globals.d.ts:137</p>"},{"location":"typescript/reference/base/#parameters_18","title":"Parameters","text":""},{"location":"typescript/reference/base/#err_2","title":"err","text":"<p><code>Error</code></p>"},{"location":"typescript/reference/base/#stacktraces_2","title":"stackTraces","text":"<p><code>CallSite</code>[]</p>"},{"location":"typescript/reference/base/#returns_30","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#see_2","title":"See","text":"<p>https://v8.dev/docs/stack-trace-api#customizing-stack-traces</p>"},{"location":"typescript/reference/base/#inherited-from_23","title":"Inherited from","text":"<p><code>PomlError.prepareStackTrace</code></p>"},{"location":"typescript/reference/base/#interfaces","title":"Interfaces","text":""},{"location":"typescript/reference/base/#componentspec","title":"ComponentSpec","text":"<p>Defined in: packages/poml/base.tsx:572</p>"},{"location":"typescript/reference/base/#properties_3","title":"Properties","text":""},{"location":"typescript/reference/base/#basecomponents","title":"baseComponents","text":"<p>baseComponents: <code>string</code>[]</p> <p>Defined in: packages/poml/base.tsx:576</p>"},{"location":"typescript/reference/base/#description","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:574</p>"},{"location":"typescript/reference/base/#example","title":"example","text":"<p>example: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:577</p>"},{"location":"typescript/reference/base/#name_4","title":"name?","text":"<p><code>optional</code> name: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:573</p>"},{"location":"typescript/reference/base/#params","title":"params","text":"<p>params: <code>Parameter</code>[]</p> <p>Defined in: packages/poml/base.tsx:575</p>"},{"location":"typescript/reference/base/#contentmultimedia","title":"ContentMultiMedia","text":"<p>Defined in: packages/poml/base.tsx:21</p> <p>This is to show in the final rendered prompt.</p>"},{"location":"typescript/reference/base/#properties_4","title":"Properties","text":""},{"location":"typescript/reference/base/#alt","title":"alt?","text":"<p><code>optional</code> alt: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:24</p>"},{"location":"typescript/reference/base/#base64","title":"base64","text":"<p>base64: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:23</p>"},{"location":"typescript/reference/base/#type","title":"type","text":"<p>type: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:22</p>"},{"location":"typescript/reference/base/#message_7","title":"Message","text":"<p>Defined in: packages/poml/base.tsx:29</p>"},{"location":"typescript/reference/base/#properties_5","title":"Properties","text":""},{"location":"typescript/reference/base/#content","title":"content","text":"<p>content: <code>RichContent</code></p> <p>Defined in: packages/poml/base.tsx:31</p>"},{"location":"typescript/reference/base/#speaker","title":"speaker","text":"<p>speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:30</p>"},{"location":"typescript/reference/base/#parameter","title":"Parameter","text":"<p>Defined in: packages/poml/base.tsx:562</p>"},{"location":"typescript/reference/base/#properties_6","title":"Properties","text":""},{"location":"typescript/reference/base/#choices","title":"choices","text":"<p>choices: <code>string</code>[]</p> <p>Defined in: packages/poml/base.tsx:566</p>"},{"location":"typescript/reference/base/#defaultvalue","title":"defaultValue","text":"<p>defaultValue: <code>undefined</code> | <code>string</code></p> <p>Defined in: packages/poml/base.tsx:568</p>"},{"location":"typescript/reference/base/#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:567</p>"},{"location":"typescript/reference/base/#fallbacktype","title":"fallbackType","text":"<p>fallbackType: <code>undefined</code> | <code>string</code></p> <p>Defined in: packages/poml/base.tsx:565</p>"},{"location":"typescript/reference/base/#name_5","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:563</p>"},{"location":"typescript/reference/base/#required","title":"required","text":"<p>required: <code>boolean</code></p> <p>Defined in: packages/poml/base.tsx:569</p>"},{"location":"typescript/reference/base/#type_1","title":"type","text":"<p>type: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:564</p>"},{"location":"typescript/reference/base/#propsbase","title":"PropsBase","text":"<p>Defined in: packages/poml/base.tsx:92</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/base/#extended-by","title":"Extended by","text":"<ul> <li><code>PropsSyntaxBase</code></li> </ul>"},{"location":"typescript/reference/base/#properties_7","title":"Properties","text":""},{"location":"typescript/reference/base/#charlimit","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:109</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/base/#classname","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:94</p>"},{"location":"typescript/reference/base/#originalendindex","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:99</p>"},{"location":"typescript/reference/base/#originalstartindex","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:98</p>"},{"location":"typescript/reference/base/#priority","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:113</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/base/#sourcepath_4","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:102</p>"},{"location":"typescript/reference/base/#speaker_1","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:93</p>"},{"location":"typescript/reference/base/#tokenlimit","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:111</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/base/#whitespace","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:106</p>"},{"location":"typescript/reference/base/#writeroptions","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:105</p>"},{"location":"typescript/reference/base/#sourcemapmessage","title":"SourceMapMessage","text":"<p>Defined in: packages/poml/base.tsx:42</p>"},{"location":"typescript/reference/base/#properties_8","title":"Properties","text":""},{"location":"typescript/reference/base/#content_1","title":"content","text":"<p>content: <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/base.tsx:48</p>"},{"location":"typescript/reference/base/#endindex_4","title":"endIndex","text":"<p>endIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:44</p>"},{"location":"typescript/reference/base/#irendindex_2","title":"irEndIndex","text":"<p>irEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:46</p>"},{"location":"typescript/reference/base/#irstartindex_2","title":"irStartIndex","text":"<p>irStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:45</p>"},{"location":"typescript/reference/base/#speaker_2","title":"speaker","text":"<p>speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:47</p>"},{"location":"typescript/reference/base/#startindex_4","title":"startIndex","text":"<p>startIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:43</p>"},{"location":"typescript/reference/base/#sourcemaprichcontent","title":"SourceMapRichContent","text":"<p>Defined in: packages/poml/base.tsx:34</p>"},{"location":"typescript/reference/base/#properties_9","title":"Properties","text":""},{"location":"typescript/reference/base/#content_2","title":"content","text":"<p>content: <code>RichContent</code></p> <p>Defined in: packages/poml/base.tsx:39</p>"},{"location":"typescript/reference/base/#endindex_5","title":"endIndex","text":"<p>endIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:36</p>"},{"location":"typescript/reference/base/#irendindex_3","title":"irEndIndex","text":"<p>irEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:38</p>"},{"location":"typescript/reference/base/#irstartindex_3","title":"irStartIndex","text":"<p>irStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:37</p>"},{"location":"typescript/reference/base/#startindex_5","title":"startIndex","text":"<p>startIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:35</p>"},{"location":"typescript/reference/base/#stylesheet_1","title":"StyleSheet","text":"<p>Defined in: packages/poml/base.tsx:479</p> <p>Stylesheet is a way to configure the props to be used in the components globally. It can be used to set multiple things, including markup syntax, presentation approach, text formats, and more, as long as they are supported by the components' props. If a globally set prop is not supported by a component, it will be ignored.</p> <p>The style can be set for all components or for a specific component type, such as:</p> <pre><code>const stylesheet = {\n  '*': {\n    presentation: 'markup',\n    markupLang: 'markdown',\n    listStyle: 'unordered'\n  },\n  'table': {\n    presentation: 'serialize',\n    serializer: 'json'\n  },\n  Example: {\n    messageInteraction: true\n  },\n  TaskDescription: {\n    titleMarkupTransform: 'header',\n    titleTextTransform: {\n      case: 'upper'\n    }\n  }\n}\n</code></pre> <p>The stylesheet can be then set via a <code>StyleSheetProvider</code> component:</p> <pre><code>&lt;StyleSheetProvider stylesheet={stylesheet}&gt;&lt;MyPrompt /&gt;&lt;/StyleSheetProvider&gt;\n</code></pre>"},{"location":"typescript/reference/base/#indexable","title":"Indexable","text":"<p>[<code>match</code>: <code>string</code>]: <code>AnyProps</code></p>"},{"location":"typescript/reference/base/#type-aliases","title":"Type Aliases","text":""},{"location":"typescript/reference/base/#richcontent","title":"RichContent","text":"<p>RichContent = <code>string</code> | (<code>string</code> | <code>ContentMultiMedia</code>)[]</p> <p>Defined in: packages/poml/base.tsx:27</p>"},{"location":"typescript/reference/base/#speaker_3","title":"Speaker","text":"<p>Speaker = <code>\"system\"</code> | <code>\"human\"</code> | <code>\"ai\"</code></p> <p>Defined in: packages/poml/base.tsx:15</p>"},{"location":"typescript/reference/base/#variables","title":"Variables","text":""},{"location":"typescript/reference/base/#validspeakers","title":"ValidSpeakers","text":"<p><code>const</code> ValidSpeakers: <code>string</code>[]</p> <p>Defined in: packages/poml/base.tsx:16</p>"},{"location":"typescript/reference/base/#functions","title":"Functions","text":""},{"location":"typescript/reference/base/#component","title":"component()","text":""},{"location":"typescript/reference/base/#call-signature","title":"Call Signature","text":"<p>component(<code>name</code>, <code>options?</code>): \\&lt;<code>T</code>&gt;(<code>fn</code>) =&gt; <code>T</code></p> <p>Defined in: packages/poml/base.tsx:941</p> <p>Usage: 1. <code>component('my-component', ['mc'])(MyComponent)</code> 2. <code>component('my-component', {   aliases: ['mc'],   requiredProps: ['requiredProp'],   unwantedProps: ['unwantedProp'],   applyStyleSheet: false })(MyComponent)</code></p>"},{"location":"typescript/reference/base/#parameters_19","title":"Parameters","text":""},{"location":"typescript/reference/base/#name_6","title":"name","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#options_5","title":"options?","text":"<p><code>string</code>[]</p>"},{"location":"typescript/reference/base/#returns_31","title":"Returns","text":"<p>\\&lt;<code>T</code>&gt;(<code>fn</code>): <code>T</code></p>"},{"location":"typescript/reference/base/#type-parameters_1","title":"Type Parameters","text":""},{"location":"typescript/reference/base/#t_1","title":"T","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#parameters_20","title":"Parameters","text":""},{"location":"typescript/reference/base/#fn","title":"fn","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#returns_32","title":"Returns","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#call-signature_1","title":"Call Signature","text":"<p>component(<code>name</code>, <code>options?</code>): \\&lt;<code>T</code>&gt;(<code>fn</code>) =&gt; <code>T</code></p> <p>Defined in: packages/poml/base.tsx:942</p> <p>Usage: 1. <code>component('my-component', ['mc'])(MyComponent)</code> 2. <code>component('my-component', {   aliases: ['mc'],   requiredProps: ['requiredProp'],   unwantedProps: ['unwantedProp'],   applyStyleSheet: false })(MyComponent)</code></p>"},{"location":"typescript/reference/base/#parameters_21","title":"Parameters","text":""},{"location":"typescript/reference/base/#name_7","title":"name","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#options_6","title":"options?","text":"<p><code>NonStrictComponentOptions</code></p>"},{"location":"typescript/reference/base/#returns_33","title":"Returns","text":"<p>\\&lt;<code>T</code>&gt;(<code>fn</code>): <code>T</code></p>"},{"location":"typescript/reference/base/#type-parameters_2","title":"Type Parameters","text":""},{"location":"typescript/reference/base/#t_2","title":"T","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#parameters_22","title":"Parameters","text":""},{"location":"typescript/reference/base/#fn_1","title":"fn","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#returns_34","title":"Returns","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#expandrelative","title":"expandRelative()","text":"<p>expandRelative(<code>src</code>): <code>string</code></p> <p>Defined in: packages/poml/base.tsx:551</p>"},{"location":"typescript/reference/base/#parameters_23","title":"Parameters","text":""},{"location":"typescript/reference/base/#src","title":"src","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#returns_35","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#findcomponentbyalias","title":"findComponentByAlias()","text":"<p>findComponentByAlias(<code>alias</code>, <code>disabled?</code>): <code>string</code> | <code>PomlComponent</code></p> <p>Defined in: packages/poml/base.tsx:984</p> <p>Find a component by its alias. If not found, return a string that suggests the closest match.</p>"},{"location":"typescript/reference/base/#parameters_24","title":"Parameters","text":""},{"location":"typescript/reference/base/#alias","title":"alias","text":"<p><code>string</code></p> <p>Alias or official name.</p>"},{"location":"typescript/reference/base/#disabled","title":"disabled?","text":"<p><code>Set</code>\\&lt;<code>string</code>&gt;</p>"},{"location":"typescript/reference/base/#returns_36","title":"Returns","text":"<p><code>string</code> | <code>PomlComponent</code></p>"},{"location":"typescript/reference/base/#findcomponentbyaliasorundefined","title":"findComponentByAliasOrUndefined()","text":"<p>findComponentByAliasOrUndefined(<code>alias</code>, <code>disabled?</code>): <code>undefined</code> | <code>PomlComponent</code></p> <p>Defined in: packages/poml/base.tsx:991</p>"},{"location":"typescript/reference/base/#parameters_25","title":"Parameters","text":""},{"location":"typescript/reference/base/#alias_1","title":"alias","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#disabled_1","title":"disabled?","text":"<p><code>Set</code>\\&lt;<code>string</code>&gt;</p>"},{"location":"typescript/reference/base/#returns_37","title":"Returns","text":"<p><code>undefined</code> | <code>PomlComponent</code></p>"},{"location":"typescript/reference/base/#irelement","title":"irElement()","text":"<p>irElement(<code>type</code>, <code>props</code>, ...<code>children</code>): <code>DOMElement</code>\\&lt;{[<code>k</code>: <code>string</code>]: <code>undefined</code> | { }; }, <code>Element</code>&gt;</p> <p>Defined in: packages/poml/base.tsx:120</p> <p>Create an element that will be visible in the IR. Helper function for logging and debugging purposes.</p>"},{"location":"typescript/reference/base/#parameters_26","title":"Parameters","text":""},{"location":"typescript/reference/base/#type_2","title":"type","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#props_3","title":"props","text":"<p><code>any</code></p>"},{"location":"typescript/reference/base/#children","title":"children","text":"<p>...<code>ReactNode</code>[]</p>"},{"location":"typescript/reference/base/#returns_38","title":"Returns","text":"<p><code>DOMElement</code>\\&lt;{[<code>k</code>: <code>string</code>]: <code>undefined</code> | { }; }, <code>Element</code>&gt;</p>"},{"location":"typescript/reference/base/#listcomponents","title":"listComponents()","text":"<p>listComponents(): <code>PomlComponent</code>[]</p> <p>Defined in: packages/poml/base.tsx:998</p>"},{"location":"typescript/reference/base/#returns_39","title":"Returns","text":"<p><code>PomlComponent</code>[]</p>"},{"location":"typescript/reference/base/#richcontentfromsourcemap","title":"richContentFromSourceMap()","text":"<p>richContentFromSourceMap(<code>contents</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/base.tsx:51</p>"},{"location":"typescript/reference/base/#parameters_27","title":"Parameters","text":""},{"location":"typescript/reference/base/#contents","title":"contents","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/base/#returns_40","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/base/#sourceprovider","title":"SourceProvider()","text":"<p>SourceProvider(<code>__namedParameters</code>): <code>Element</code></p> <p>Defined in: packages/poml/base.tsx:545</p>"},{"location":"typescript/reference/base/#parameters_28","title":"Parameters","text":""},{"location":"typescript/reference/base/#__namedparameters","title":"__namedParameters","text":"<p><code>PropsWithChildren</code>\\&lt;{ <code>source</code>: <code>string</code>; }&gt;</p>"},{"location":"typescript/reference/base/#returns_41","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/base/#stylesheetprovider","title":"StyleSheetProvider()","text":"<p>StyleSheetProvider(<code>__namedParameters</code>): <code>Element</code></p> <p>Defined in: packages/poml/base.tsx:489</p>"},{"location":"typescript/reference/base/#parameters_29","title":"Parameters","text":""},{"location":"typescript/reference/base/#__namedparameters_1","title":"__namedParameters","text":"<p><code>PropsWithChildren</code>\\&lt;{ <code>stylesheet</code>: <code>StyleSheet</code>; }&gt;</p>"},{"location":"typescript/reference/base/#returns_42","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/base/#trimchildrenwhitespace","title":"trimChildrenWhiteSpace()","text":"<p>trimChildrenWhiteSpace(<code>children</code>, <code>props</code>): (<code>undefined</code> | <code>null</code> | <code>string</code> | <code>number</code> | <code>bigint</code> | <code>boolean</code> | <code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt; | <code>Iterable</code>\\&lt;<code>ReactNode</code>, <code>any</code>, <code>any</code>&gt; | <code>Promise</code>\\&lt;<code>AwaitedReactNode</code>&gt;)[]</p> <p>Defined in: packages/poml/base.tsx:146</p>"},{"location":"typescript/reference/base/#parameters_30","title":"Parameters","text":""},{"location":"typescript/reference/base/#children_1","title":"children","text":"<p><code>ReactNode</code></p>"},{"location":"typescript/reference/base/#props_4","title":"props","text":"<p><code>PropsBase</code></p>"},{"location":"typescript/reference/base/#returns_43","title":"Returns","text":"<p>(<code>undefined</code> | <code>null</code> | <code>string</code> | <code>number</code> | <code>bigint</code> | <code>boolean</code> | <code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt; | <code>Iterable</code>\\&lt;<code>ReactNode</code>, <code>any</code>, <code>any</code>&gt; | <code>Promise</code>\\&lt;<code>AwaitedReactNode</code>&gt;)[]</p>"},{"location":"typescript/reference/base/#unregistercomponent","title":"unregisterComponent()","text":"<p>unregisterComponent(<code>alias</code>): <code>void</code></p> <p>Defined in: packages/poml/base.tsx:976</p>"},{"location":"typescript/reference/base/#parameters_31","title":"Parameters","text":""},{"location":"typescript/reference/base/#alias_2","title":"alias","text":"<p><code>string</code></p>"},{"location":"typescript/reference/base/#returns_44","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/base/#usewithcatch","title":"useWithCatch()","text":"<p>useWithCatch\\&lt;<code>T</code>&gt;(<code>promise</code>, <code>props</code>): <code>void</code> | <code>T</code></p> <p>Defined in: packages/poml/base.tsx:423</p>"},{"location":"typescript/reference/base/#type-parameters_3","title":"Type Parameters","text":""},{"location":"typescript/reference/base/#t_3","title":"T","text":"<p><code>T</code></p>"},{"location":"typescript/reference/base/#parameters_32","title":"Parameters","text":""},{"location":"typescript/reference/base/#promise","title":"promise","text":"<p><code>Promise</code>\\&lt;<code>T</code>&gt;</p>"},{"location":"typescript/reference/base/#props_5","title":"props","text":"<p><code>PropsBase</code></p>"},{"location":"typescript/reference/base/#returns_45","title":"Returns","text":"<p><code>void</code> | <code>T</code></p>"},{"location":"typescript/reference/cli/","title":"cli","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/components/","title":"components","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/components/#interfaces","title":"Interfaces","text":""},{"location":"typescript/reference/components/#basecaptionedparagraphprops","title":"BaseCaptionedParagraphProps","text":"<p>Defined in: packages/poml/components/utils.tsx:15</p>"},{"location":"typescript/reference/components/#extends","title":"Extends","text":"<ul> <li><code>PropsSyntaxAny</code></li> </ul>"},{"location":"typescript/reference/components/#properties","title":"Properties","text":""},{"location":"typescript/reference/components/#captionending","title":"captionEnding?","text":"<p><code>optional</code> captionEnding: <code>\"newline\"</code> | <code>\"none\"</code> | <code>\"colon\"</code> | <code>\"colon-newline\"</code></p> <p>Defined in: packages/poml/components/utils.tsx:19</p>"},{"location":"typescript/reference/components/#captionserialized","title":"captionSerialized?","text":"<p><code>optional</code> captionSerialized: <code>string</code></p> <p>Defined in: packages/poml/components/utils.tsx:16</p>"},{"location":"typescript/reference/components/#captionstyle","title":"captionStyle?","text":"<p><code>optional</code> captionStyle: <code>\"header\"</code> | <code>\"bold\"</code> | <code>\"plain\"</code> | <code>\"hidden\"</code></p> <p>Defined in: packages/poml/components/utils.tsx:17</p>"},{"location":"typescript/reference/components/#captiontailingspace","title":"captionTailingSpace?","text":"<p><code>optional</code> captionTailingSpace: <code>boolean</code></p> <p>Defined in: packages/poml/components/utils.tsx:20</p>"},{"location":"typescript/reference/components/#captiontexttransform","title":"captionTextTransform?","text":"<p><code>optional</code> captionTextTransform: <code>\"upper\"</code> | <code>\"lower\"</code> | <code>\"capitalize\"</code> | <code>\"none\"</code></p> <p>Defined in: packages/poml/components/utils.tsx:18</p>"},{"location":"typescript/reference/components/#charlimit","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:109</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from","title":"Inherited from","text":"<p><code>PropsSyntaxAny.charLimit</code></p>"},{"location":"typescript/reference/components/#classname","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:94</p>"},{"location":"typescript/reference/components/#inherited-from_1","title":"Inherited from","text":"<p><code>PropsSyntaxAny.className</code></p>"},{"location":"typescript/reference/components/#name","title":"name?","text":"<p><code>optional</code> name: <code>string</code></p> <p>Defined in: packages/poml/presentation.tsx:489</p>"},{"location":"typescript/reference/components/#inherited-from_2","title":"Inherited from","text":"<p><code>PropsSyntaxAny.name</code></p>"},{"location":"typescript/reference/components/#originalendindex","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:99</p>"},{"location":"typescript/reference/components/#inherited-from_3","title":"Inherited from","text":"<p><code>PropsSyntaxAny.originalEndIndex</code></p>"},{"location":"typescript/reference/components/#originalstartindex","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:98</p>"},{"location":"typescript/reference/components/#inherited-from_4","title":"Inherited from","text":"<p><code>PropsSyntaxAny.originalStartIndex</code></p>"},{"location":"typescript/reference/components/#priority","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:113</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/components/#inherited-from_5","title":"Inherited from","text":"<p><code>PropsSyntaxAny.priority</code></p>"},{"location":"typescript/reference/components/#sourcepath","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:102</p>"},{"location":"typescript/reference/components/#inherited-from_6","title":"Inherited from","text":"<p><code>PropsSyntaxAny.sourcePath</code></p>"},{"location":"typescript/reference/components/#speaker","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:93</p>"},{"location":"typescript/reference/components/#inherited-from_7","title":"Inherited from","text":"<p><code>PropsSyntaxAny.speaker</code></p>"},{"location":"typescript/reference/components/#syntax","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/components/#inherited-from_8","title":"Inherited from","text":"<p><code>PropsSyntaxAny.syntax</code></p>"},{"location":"typescript/reference/components/#tokenlimit","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:111</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_9","title":"Inherited from","text":"<p><code>PropsSyntaxAny.tokenLimit</code></p>"},{"location":"typescript/reference/components/#type","title":"type?","text":"<p><code>optional</code> type: <code>AnyValue</code></p> <p>Defined in: packages/poml/presentation.tsx:490</p>"},{"location":"typescript/reference/components/#inherited-from_10","title":"Inherited from","text":"<p><code>PropsSyntaxAny.type</code></p>"},{"location":"typescript/reference/components/#whitespace","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:106</p>"},{"location":"typescript/reference/components/#inherited-from_11","title":"Inherited from","text":"<p><code>PropsSyntaxAny.whiteSpace</code></p>"},{"location":"typescript/reference/components/#writeroptions","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:105</p>"},{"location":"typescript/reference/components/#inherited-from_12","title":"Inherited from","text":"<p><code>PropsSyntaxAny.writerOptions</code></p>"},{"location":"typescript/reference/components/#folderprops","title":"FolderProps","text":"<p>Defined in: packages/poml/components/tree.tsx:312</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/components/#extends_1","title":"Extends","text":"<ul> <li><code>PropsSyntaxBase</code></li> </ul>"},{"location":"typescript/reference/components/#properties_1","title":"Properties","text":""},{"location":"typescript/reference/components/#charlimit_1","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:109</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_13","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/components/#classname_1","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:94</p>"},{"location":"typescript/reference/components/#inherited-from_14","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>className</code></p>"},{"location":"typescript/reference/components/#data","title":"data?","text":"<p><code>optional</code> data: <code>TreeItemData</code>[]</p> <p>Defined in: packages/poml/components/tree.tsx:314</p>"},{"location":"typescript/reference/components/#filter","title":"filter?","text":"<p><code>optional</code> filter: <code>string</code> | <code>RegExp</code></p> <p>Defined in: packages/poml/components/tree.tsx:315</p>"},{"location":"typescript/reference/components/#maxdepth","title":"maxDepth?","text":"<p><code>optional</code> maxDepth: <code>number</code></p> <p>Defined in: packages/poml/components/tree.tsx:316</p>"},{"location":"typescript/reference/components/#originalendindex_1","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:99</p>"},{"location":"typescript/reference/components/#inherited-from_15","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/components/#originalstartindex_1","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:98</p>"},{"location":"typescript/reference/components/#inherited-from_16","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/components/#priority_1","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:113</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/components/#inherited-from_17","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/components/#showcontent","title":"showContent?","text":"<p><code>optional</code> showContent: <code>boolean</code></p> <p>Defined in: packages/poml/components/tree.tsx:317</p>"},{"location":"typescript/reference/components/#sourcepath_1","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:102</p>"},{"location":"typescript/reference/components/#inherited-from_18","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/components/#speaker_1","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:93</p>"},{"location":"typescript/reference/components/#inherited-from_19","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/components/#src","title":"src?","text":"<p><code>optional</code> src: <code>string</code></p> <p>Defined in: packages/poml/components/tree.tsx:313</p>"},{"location":"typescript/reference/components/#syntax_1","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/components/#inherited-from_20","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>syntax</code></p>"},{"location":"typescript/reference/components/#tokenlimit_1","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:111</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_21","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/components/#whitespace_1","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:106</p>"},{"location":"typescript/reference/components/#inherited-from_22","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/components/#writeroptions_1","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:105</p>"},{"location":"typescript/reference/components/#inherited-from_23","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/components/#recordcolumns","title":"RecordColumns","text":"<p>Defined in: packages/poml/components/table.tsx:17</p>"},{"location":"typescript/reference/components/#properties_2","title":"Properties","text":""},{"location":"typescript/reference/components/#columns","title":"columns?","text":"<p><code>optional</code> columns: <code>ColumnDefinition</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:19</p>"},{"location":"typescript/reference/components/#records","title":"records","text":"<p>records: <code>any</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:18</p>"},{"location":"typescript/reference/components/#tableprops","title":"TableProps","text":"<p>Defined in: packages/poml/components/table.tsx:24</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/components/#extends_2","title":"Extends","text":"<ul> <li><code>PropsSyntaxBase</code></li> </ul>"},{"location":"typescript/reference/components/#properties_3","title":"Properties","text":""},{"location":"typescript/reference/components/#charlimit_2","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:109</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_24","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/components/#classname_2","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:94</p>"},{"location":"typescript/reference/components/#inherited-from_25","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>className</code></p>"},{"location":"typescript/reference/components/#columns_1","title":"columns?","text":"<p><code>optional</code> columns: <code>ColumnDefinition</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:26</p>"},{"location":"typescript/reference/components/#maxcolumns","title":"maxColumns?","text":"<p><code>optional</code> maxColumns: <code>number</code></p> <p>Defined in: packages/poml/components/table.tsx:32</p>"},{"location":"typescript/reference/components/#maxrecords","title":"maxRecords?","text":"<p><code>optional</code> maxRecords: <code>number</code></p> <p>Defined in: packages/poml/components/table.tsx:31</p>"},{"location":"typescript/reference/components/#originalendindex_2","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:99</p>"},{"location":"typescript/reference/components/#inherited-from_26","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/components/#originalstartindex_2","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:98</p>"},{"location":"typescript/reference/components/#inherited-from_27","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/components/#parser","title":"parser?","text":"<p><code>optional</code> parser: <code>TableParser</code></p> <p>Defined in: packages/poml/components/table.tsx:28</p>"},{"location":"typescript/reference/components/#priority_2","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:113</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/components/#inherited-from_28","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/components/#records_1","title":"records?","text":"<p><code>optional</code> records: <code>string</code> | <code>any</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:25</p>"},{"location":"typescript/reference/components/#selectedcolumns","title":"selectedColumns?","text":"<p><code>optional</code> selectedColumns: <code>string</code> | <code>string</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:29</p>"},{"location":"typescript/reference/components/#selectedrecords","title":"selectedRecords?","text":"<p><code>optional</code> selectedRecords: <code>string</code> | <code>number</code>[]</p> <p>Defined in: packages/poml/components/table.tsx:30</p>"},{"location":"typescript/reference/components/#sourcepath_2","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:102</p>"},{"location":"typescript/reference/components/#inherited-from_29","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/components/#speaker_2","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:93</p>"},{"location":"typescript/reference/components/#inherited-from_30","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/components/#src_1","title":"src?","text":"<p><code>optional</code> src: <code>string</code></p> <p>Defined in: packages/poml/components/table.tsx:27</p>"},{"location":"typescript/reference/components/#syntax_2","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/components/#inherited-from_31","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>syntax</code></p>"},{"location":"typescript/reference/components/#tokenlimit_2","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:111</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_32","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/components/#whitespace_2","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:106</p>"},{"location":"typescript/reference/components/#inherited-from_33","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/components/#writeroptions_2","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:105</p>"},{"location":"typescript/reference/components/#inherited-from_34","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/components/#treeitemdata","title":"TreeItemData","text":"<p>Defined in: packages/poml/components/tree.tsx:17</p>"},{"location":"typescript/reference/components/#properties_4","title":"Properties","text":""},{"location":"typescript/reference/components/#children","title":"children?","text":"<p><code>optional</code> children: <code>TreeItemData</code>[]</p> <p>Defined in: packages/poml/components/tree.tsx:20</p>"},{"location":"typescript/reference/components/#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: packages/poml/components/tree.tsx:18</p>"},{"location":"typescript/reference/components/#value","title":"value?","text":"<p><code>optional</code> value: <code>string</code></p> <p>Defined in: packages/poml/components/tree.tsx:19</p>"},{"location":"typescript/reference/components/#treeprops","title":"TreeProps","text":"<p>Defined in: packages/poml/components/tree.tsx:23</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/components/#extends_3","title":"Extends","text":"<ul> <li><code>PropsSyntaxBase</code></li> </ul>"},{"location":"typescript/reference/components/#properties_5","title":"Properties","text":""},{"location":"typescript/reference/components/#charlimit_3","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:109</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_35","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/components/#classname_3","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:94</p>"},{"location":"typescript/reference/components/#inherited-from_36","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>className</code></p>"},{"location":"typescript/reference/components/#items","title":"items","text":"<p>items: <code>TreeItemData</code>[]</p> <p>Defined in: packages/poml/components/tree.tsx:24</p>"},{"location":"typescript/reference/components/#originalendindex_3","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:99</p>"},{"location":"typescript/reference/components/#inherited-from_37","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/components/#originalstartindex_3","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:98</p>"},{"location":"typescript/reference/components/#inherited-from_38","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/components/#priority_3","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:113</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/components/#inherited-from_39","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/components/#showcontent_1","title":"showContent?","text":"<p><code>optional</code> showContent: <code>boolean</code></p> <p>Defined in: packages/poml/components/tree.tsx:25</p>"},{"location":"typescript/reference/components/#sourcepath_3","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:102</p>"},{"location":"typescript/reference/components/#inherited-from_40","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/components/#speaker_3","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:93</p>"},{"location":"typescript/reference/components/#inherited-from_41","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/components/#syntax_3","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/components/#inherited-from_42","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>syntax</code></p>"},{"location":"typescript/reference/components/#tokenlimit_3","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:111</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_43","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/components/#whitespace_3","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:106</p>"},{"location":"typescript/reference/components/#inherited-from_44","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/components/#writeroptions_3","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:105</p>"},{"location":"typescript/reference/components/#inherited-from_45","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/components/#webpageprops","title":"WebpageProps","text":"<p>Defined in: packages/poml/components/webpage.tsx:9</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/components/#extends_4","title":"Extends","text":"<ul> <li><code>PropsSyntaxBase</code></li> </ul>"},{"location":"typescript/reference/components/#properties_6","title":"Properties","text":""},{"location":"typescript/reference/components/#base64","title":"base64?","text":"<p><code>optional</code> base64: <code>string</code></p> <p>Defined in: packages/poml/components/webpage.tsx:13</p>"},{"location":"typescript/reference/components/#buffer","title":"buffer?","text":"<p><code>optional</code> buffer: <code>string</code> | <code>Buffer</code>\\&lt;<code>ArrayBufferLike</code>&gt;</p> <p>Defined in: packages/poml/components/webpage.tsx:12</p>"},{"location":"typescript/reference/components/#charlimit_4","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:109</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_46","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/components/#classname_4","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:94</p>"},{"location":"typescript/reference/components/#inherited-from_47","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>className</code></p>"},{"location":"typescript/reference/components/#extracttext","title":"extractText?","text":"<p><code>optional</code> extractText: <code>boolean</code></p> <p>Defined in: packages/poml/components/webpage.tsx:14</p>"},{"location":"typescript/reference/components/#originalendindex_4","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:99</p>"},{"location":"typescript/reference/components/#inherited-from_48","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/components/#originalstartindex_4","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:98</p>"},{"location":"typescript/reference/components/#inherited-from_49","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/components/#priority_4","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:113</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/components/#inherited-from_50","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/components/#selector","title":"selector?","text":"<p><code>optional</code> selector: <code>string</code></p> <p>Defined in: packages/poml/components/webpage.tsx:15</p>"},{"location":"typescript/reference/components/#sourcepath_4","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:102</p>"},{"location":"typescript/reference/components/#inherited-from_51","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/components/#speaker_4","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:93</p>"},{"location":"typescript/reference/components/#inherited-from_52","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/components/#src_2","title":"src?","text":"<p><code>optional</code> src: <code>string</code></p> <p>Defined in: packages/poml/components/webpage.tsx:10</p>"},{"location":"typescript/reference/components/#syntax_4","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/components/#inherited-from_53","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>syntax</code></p>"},{"location":"typescript/reference/components/#tokenlimit_4","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:111</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/components/#inherited-from_54","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/components/#url","title":"url?","text":"<p><code>optional</code> url: <code>string</code></p> <p>Defined in: packages/poml/components/webpage.tsx:11</p>"},{"location":"typescript/reference/components/#whitespace_4","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:106</p>"},{"location":"typescript/reference/components/#inherited-from_55","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/components/#writeroptions_4","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:105</p>"},{"location":"typescript/reference/components/#inherited-from_56","title":"Inherited from","text":"<p><code>PropsSyntaxBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/components/#variables","title":"Variables","text":""},{"location":"typescript/reference/components/#aimessage","title":"AiMessage()","text":"<p><code>const</code> AiMessage: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/message.tsx:59</p> <p>Wrap the contents in a AI message.</p>"},{"location":"typescript/reference/components/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/components/#props","title":"props","text":""},{"location":"typescript/reference/components/#children_1","title":"children?","text":"<p><code>ReactNode</code></p>"},{"location":"typescript/reference/components/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see","title":"See","text":"<p>Text for other props available.</p>"},{"location":"typescript/reference/components/#example","title":"Example","text":"<pre><code>&lt;ai-msg&gt;Paris&lt;/ai-msg&gt;\n</code></pre>"},{"location":"typescript/reference/components/#caption","title":"Caption()","text":"<p><code>const</code> Caption: (<code>props</code>) =&gt; <code>null</code> | <code>Element</code></p> <p>Defined in: packages/poml/components/utils.tsx:72</p>"},{"location":"typescript/reference/components/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_1","title":"props","text":"<p><code>CaptionedParagraphProps</code></p>"},{"location":"typescript/reference/components/#returns_1","title":"Returns","text":"<p><code>null</code> | <code>Element</code></p>"},{"location":"typescript/reference/components/#captionedparagraph","title":"CaptionedParagraph()","text":"<p><code>const</code> CaptionedParagraph: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/utils.tsx:188</p> <p>CaptionedParagraph (<code>&lt;cp&gt;</code> for short) creates a paragraph with a customized caption title.</p>"},{"location":"typescript/reference/components/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_2","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CaptionedParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_2","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_1","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_1","title":"Example","text":"<pre><code>&lt;cp caption=\"Constraints\"&gt;\n  &lt;list&gt;\n    &lt;item&gt;Do not exceed 1000 tokens.&lt;/item&gt;\n    &lt;item&gt;Please use simple words.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/cp&gt;\n</code></pre>"},{"location":"typescript/reference/components/#conversation","title":"Conversation()","text":"<p><code>const</code> Conversation: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/message.tsx:128</p> <p>Display a conversation between system, human and AI.</p>"},{"location":"typescript/reference/components/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_3","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>ConversationProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_3","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#example_2","title":"Example","text":"<pre><code>&lt;conversation messages=\"{{[{ speaker: 'human', content: 'What is the capital of France?' }, { speaker: 'ai', content: 'Paris' }]}}\" /&gt;\n</code></pre>"},{"location":"typescript/reference/components/#document","title":"Document()","text":"<p><code>const</code> Document: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/document.tsx:271</p> <p>Displaying an external document like PDF, TXT or DOCX.</p>"},{"location":"typescript/reference/components/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_4","title":"props","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_4","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_2","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/components/#example_3","title":"Example","text":"<p>To display a Word document without including the real multimedia: <pre><code>&lt;Document src=\"sample.docx\" multimedia=\"false\"/&gt;\n</code></pre></p>"},{"location":"typescript/reference/components/#example_4","title":"Example()","text":"<p><code>const</code> Example: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:348</p> <p>Example is useful for providing a context, helping the model to understand what kind of inputs and outputs are expected. It can also be used to demonstrate the desired output style, clarifying the structure, tone, or level of detail in the response.</p>"},{"location":"typescript/reference/components/#parameters_5","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_5","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>ExampleProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_5","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_3","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_5","title":"Example","text":"<pre><code>&lt;example&gt;\n  &lt;input&gt;What is the capital of France?&lt;/input&gt;\n  &lt;output&gt;Paris&lt;/output&gt;\n&lt;/example&gt;\n</code></pre> <pre><code>&lt;task&gt;Summarize the following passage in a single sentence.&lt;/task&gt;\n&lt;example&gt;\n  &lt;input caption=\"Passage\"&gt;The sun provides energy for life on Earth through processes like photosynthesis.&lt;/input&gt;\n  &lt;output caption=\"Summary\"&gt;The sun is essential for energy and life processes on Earth.&lt;/output&gt;\n&lt;/example&gt;\n</code></pre>"},{"location":"typescript/reference/components/#exampleinput","title":"ExampleInput()","text":"<p><code>const</code> ExampleInput: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:407</p> <p>ExampleInput (<code>&lt;input&gt;</code>) is a paragraph that represents an example input. By default, it's spoken by a human speaker in a chat context, but you can manually specify the speaker.</p>"},{"location":"typescript/reference/components/#parameters_6","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_6","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_6","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_4","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_6","title":"Example","text":"<pre><code>&lt;input&gt;What is the capital of France?&lt;/input&gt;\n</code></pre> <p>When used with a template:</p> <pre><code>&lt;input&gt;What is the capital of {{country}}?&lt;/input&gt;\n</code></pre>"},{"location":"typescript/reference/components/#exampleoutput","title":"ExampleOutput()","text":"<p><code>const</code> ExampleOutput: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:462</p> <p>ExampleOutput (<code>&lt;output&gt;</code>) is a paragraph that represents an example output. By default, it's spoken by a AI speaker in a chat context, but you can manually specify the speaker.</p>"},{"location":"typescript/reference/components/#parameters_7","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_7","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_7","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_5","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_7","title":"Example","text":"<pre><code>&lt;output&gt;The capital of France is Paris.&lt;/output&gt;\n</code></pre> <p>When used with a template:</p> <pre><code>&lt;output&gt;The capital of {{country}} is {{capital}}.&lt;/output&gt;\n</code></pre>"},{"location":"typescript/reference/components/#exampleset","title":"ExampleSet()","text":"<p><code>const</code> ExampleSet: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:284</p> <p>Example set (<code>&lt;examples&gt;</code>) is a collection of examples that are usually presented in a list. With the example set, you can manage multiple examples under a single title and optionally an introducer, as well as the same <code>chat</code> format. You can also choose to use <code>&lt;example&gt;</code> purely without example set.</p>"},{"location":"typescript/reference/components/#parameters_8","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_8","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>ExampleSetProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_8","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_6","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_8","title":"Example","text":"<pre><code>&lt;examples chat={{true}}&gt;\n  &lt;example&gt;\n    &lt;input&gt;What is the capital of France?&lt;/input&gt;\n    &lt;output&gt;Paris&lt;/output&gt;\n  &lt;/example&gt;\n  &lt;example&gt;\n    &lt;input&gt;What is the capital of Germany?&lt;/input&gt;\n    &lt;output&gt;Berlin&lt;/output&gt;\n  &lt;/example&gt;\n&lt;/examples&gt;\n</code></pre>"},{"location":"typescript/reference/components/#folder","title":"Folder()","text":"<p><code>const</code> Folder: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/tree.tsx:339</p> <p>Displays a directory structure as a tree.</p>"},{"location":"typescript/reference/components/#parameters_9","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_9","title":"props","text":"<p><code>FolderProps</code></p>"},{"location":"typescript/reference/components/#returns_9","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#example_9","title":"Example","text":"<p>To display a directory structure with a filter for Python files: <pre><code>&lt;folder src=\"project_dir\" filter=\".*\\.py$\" maxDepth=\"3\" /&gt;\n</code></pre></p>"},{"location":"typescript/reference/components/#hint","title":"Hint()","text":"<p><code>const</code> Hint: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:188</p> <p>Hint can be used anywhere in the prompt where you want to provide a helpful tip or explanation. It is usually a short and concise statement that guides the LLM in the right direction.</p>"},{"location":"typescript/reference/components/#parameters_10","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_10","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_10","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_7","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_10","title":"Example","text":"<pre><code>&lt;hint&gt;Alice first purchased 4 apples and then 3 more, so she has 7 apples in total.&lt;/hint&gt;\n</code></pre>"},{"location":"typescript/reference/components/#humanmessage","title":"HumanMessage()","text":"<p><code>const</code> HumanMessage: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/message.tsx:38</p> <p>Wrap the contents in a user message.</p>"},{"location":"typescript/reference/components/#parameters_11","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_11","title":"props","text":""},{"location":"typescript/reference/components/#children_2","title":"children?","text":"<p><code>ReactNode</code></p>"},{"location":"typescript/reference/components/#returns_11","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_8","title":"See","text":"<p>Text for other props available.</p>"},{"location":"typescript/reference/components/#example_11","title":"Example","text":"<pre><code>&lt;user-msg&gt;What is the capital of France?&lt;/user-msg&gt;\n</code></pre>"},{"location":"typescript/reference/components/#introducer","title":"Introducer()","text":"<p><code>const</code> Introducer: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:225</p> <p>Introducer is a paragraph before a long paragraph (usually a list of examples, steps, or instructions). It serves as a context introducing what is expected to follow.</p>"},{"location":"typescript/reference/components/#parameters_12","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_12","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_12","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_9","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_12","title":"Example","text":"<pre><code>&lt;introducer&gt;Here are some examples.&lt;/introducer&gt;\n</code></pre>"},{"location":"typescript/reference/components/#messagecontent","title":"MessageContent()","text":"<p><code>const</code> MessageContent: (<code>props</code>) =&gt; <code>undefined</code> | <code>Element</code></p> <p>Defined in: packages/poml/components/message.tsx:82</p> <p>Display a message content.</p>"},{"location":"typescript/reference/components/#parameters_13","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_13","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>MessageContentProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_13","title":"Returns","text":"<p><code>undefined</code> | <code>Element</code></p>"},{"location":"typescript/reference/components/#example_13","title":"Example","text":"<pre><code>&lt;msg-content content=\"What is the capital of France?\" /&gt;\n</code></pre>"},{"location":"typescript/reference/components/#outputformat","title":"OutputFormat()","text":"<p><code>const</code> OutputFormat: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:110</p> <p>Output format deals with the format in which the model should provide the output. It can be a specific format such as JSON, XML, or CSV, or a general format such as a story, a diagram or steps of instructions. Please refrain from specifying too complex formats that the model may not be able to generate, such as a PDF file or a video.</p>"},{"location":"typescript/reference/components/#parameters_14","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_14","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_14","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_10","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_14","title":"Example","text":"<pre><code>&lt;output-format&gt;Respond with a JSON without additional characters or punctuations.&lt;/output-format&gt;\n</code></pre>"},{"location":"typescript/reference/components/#question","title":"Question()","text":"<p><code>const</code> Question: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:517</p> <p>Question (<code>&lt;qa&gt;</code>) is actually a combination of a question and a prompt for the answer. It's usually used at the end of a prompt to ask a question. The question is followed by a prompt for answer (e.g., <code>Answer:</code>) to guide the model to respond.</p>"},{"location":"typescript/reference/components/#parameters_15","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_15","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>QuestionProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_15","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_11","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_15","title":"Example","text":"<pre><code>&lt;qa&gt;What is the capital of France?&lt;/qa&gt;\n</code></pre>"},{"location":"typescript/reference/components/#role","title":"Role()","text":"<p><code>const</code> Role: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:31</p> <p>Specifies the role you want the language model to assume when responding. Defining a role provides the model with a perspective or context, such as a scientist, poet, child, or any other persona you choose.</p>"},{"location":"typescript/reference/components/#parameters_16","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_16","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_16","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_12","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_16","title":"Example","text":"<pre><code>&lt;role&gt;You are a data scientist.&lt;/role&gt;\n</code></pre>"},{"location":"typescript/reference/components/#stepwiseinstructions","title":"StepwiseInstructions()","text":"<p><code>const</code> StepwiseInstructions: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:152</p> <p>StepwiseInstructions that elaborates the task by providing a list of steps or instructions. Each step should be concise and clear, and the list should be easy to follow.</p>"},{"location":"typescript/reference/components/#parameters_17","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_17","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_17","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_13","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_17","title":"Example","text":"<pre><code>&lt;stepwise-instructions&gt;\n  &lt;list&gt;\n    &lt;item&gt;Interpret and rewrite user's query.&lt;/item&gt;\n    &lt;item&gt;Think of a plan to solve the query.&lt;/item&gt;\n    &lt;item&gt;Generate a response based on the plan.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/stepwise-instructions&gt;\n</code></pre>"},{"location":"typescript/reference/components/#systemmessage","title":"SystemMessage()","text":"<p><code>const</code> SystemMessage: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/message.tsx:17</p> <p>Wrap the contents in a system message.</p>"},{"location":"typescript/reference/components/#parameters_18","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_18","title":"props","text":""},{"location":"typescript/reference/components/#children_3","title":"children?","text":"<p><code>ReactNode</code></p>"},{"location":"typescript/reference/components/#returns_18","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_14","title":"See","text":"<p>Text for other props available.</p>"},{"location":"typescript/reference/components/#example_18","title":"Example","text":"<pre><code>&lt;system-msg&gt;Answer concisely.&lt;/system-msg&gt;\n</code></pre>"},{"location":"typescript/reference/components/#table","title":"Table()","text":"<p><code>const</code> Table: (<code>props</code>) =&gt; <code>undefined</code> | <code>Element</code></p> <p>Defined in: packages/poml/components/table.tsx:387</p> <p>Displaying a table with records and columns.</p>"},{"location":"typescript/reference/components/#parameters_19","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_19","title":"props","text":"<p><code>TableProps</code></p>"},{"location":"typescript/reference/components/#returns_19","title":"Returns","text":"<p><code>undefined</code> | <code>Element</code></p>"},{"location":"typescript/reference/components/#see_15","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/components/#example_19","title":"Example","text":"<pre><code>&lt;table records=\"{{[{ name: 'Alice', age: 20 }, { name: 'Bob', age: 30 }]}}\" /&gt;\n</code></pre> <p>To import an excel file, and display the first 10 records in csv syntax:</p> <pre><code>&lt;table src=\"data.xlsx\" parser=\"excel\" maxRecords=\"10\" syntax=\"csv\" /&gt;\n</code></pre>"},{"location":"typescript/reference/components/#task","title":"Task()","text":"<p><code>const</code> Task: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/instructions.tsx:76</p> <p>Task represents the action you want the language model to perform. It is a directive or instruction that you want the model to follow. Task is usually not long, but rather a concise and clear statement. Users can also include a list of steps or instructions to complete the task.</p>"},{"location":"typescript/reference/components/#parameters_20","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_20","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>CustomizableCaptionParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/components/#returns_20","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_16","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/components/#example_20","title":"Example","text":"<pre><code>&lt;task&gt;Cook a recipe on how to prepare a beef dish.&lt;/task&gt;\n</code></pre> <p>When including a list of steps: <pre><code>&lt;task&gt;\n  Planning a schedule for a travel.\n  &lt;list&gt;\n    &lt;item&gt;Decide on the destination and plan the duration.&lt;/item&gt;\n    &lt;item&gt;Find useful information about the destination.&lt;/item&gt;\n    &lt;item&gt;Write down the schedule for each day.&lt;/item&gt;\n  &lt;/list&gt;\n&lt;/task&gt;\n</code></pre></p>"},{"location":"typescript/reference/components/#tree","title":"Tree()","text":"<p><code>const</code> Tree: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/tree.tsx:205</p> <p>Renders a tree structure in various formats.</p>"},{"location":"typescript/reference/components/#parameters_21","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_21","title":"props","text":"<p><code>TreeProps</code></p>"},{"location":"typescript/reference/components/#returns_21","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#example_21","title":"Example","text":"<pre><code>&lt;Tree items={treeData} syntax=\"markdown\" showContent={true} /&gt;\n</code></pre>"},{"location":"typescript/reference/components/#webpage","title":"Webpage()","text":"<p><code>const</code> Webpage: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/components/webpage.tsx:128</p> <p>Displays content from a webpage.</p>"},{"location":"typescript/reference/components/#parameters_22","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_22","title":"props","text":"<p><code>WebpageProps</code></p>"},{"location":"typescript/reference/components/#returns_22","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/components/#see_17","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/components/#example_22","title":"Example","text":"<p>Display content from a URL: <pre><code>&lt;webpage url=\"https://example.com\" /&gt;\n</code></pre></p> <p>Extract only specific content using a selector: <pre><code>&lt;webpage url=\"https://example.com\" selector=\"main article\" /&gt;\n</code></pre></p> <p>Convert HTML to structured POML components: <pre><code>&lt;webpage url=\"https://example.com\" extractText=\"false\" /&gt;\n</code></pre></p>"},{"location":"typescript/reference/components/#functions","title":"Functions","text":""},{"location":"typescript/reference/components/#htmltopoml","title":"htmlToPoml()","text":"<p>htmlToPoml(<code>element</code>, <code>$</code>, <code>options?</code>): <code>ReactElement</code></p> <p>Defined in: packages/poml/components/document.tsx:114</p>"},{"location":"typescript/reference/components/#parameters_23","title":"Parameters","text":""},{"location":"typescript/reference/components/#element","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/components/#_1","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/components/#options","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_23","title":"Returns","text":"<p><code>ReactElement</code></p>"},{"location":"typescript/reference/components/#parsepythonstyleslice","title":"parsePythonStyleSlice()","text":"<p>parsePythonStyleSlice(<code>slice</code>, <code>totalLength</code>): [<code>number</code>, <code>number</code>]</p> <p>Defined in: packages/poml/components/utils.tsx:229</p>"},{"location":"typescript/reference/components/#parameters_24","title":"Parameters","text":""},{"location":"typescript/reference/components/#slice","title":"slice","text":"<p><code>string</code></p>"},{"location":"typescript/reference/components/#totallength","title":"totalLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/components/#returns_24","title":"Returns","text":"<p>[<code>number</code>, <code>number</code>]</p>"},{"location":"typescript/reference/components/#readdocx","title":"readDocx()","text":"<p>readDocx(<code>dataBuffer</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:166</p>"},{"location":"typescript/reference/components/#parameters_25","title":"Parameters","text":""},{"location":"typescript/reference/components/#databuffer","title":"dataBuffer","text":"<p><code>Buffer</code></p>"},{"location":"typescript/reference/components/#options_1","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_25","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#readdocxfrompath","title":"readDocxFromPath()","text":"<p>readDocxFromPath(<code>filePath</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:175</p>"},{"location":"typescript/reference/components/#parameters_26","title":"Parameters","text":""},{"location":"typescript/reference/components/#filepath","title":"filePath","text":"<p><code>string</code></p>"},{"location":"typescript/reference/components/#options_2","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_26","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#readpdf","title":"readPdf()","text":"<p>readPdf(<code>dataBuffer</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:36</p>"},{"location":"typescript/reference/components/#parameters_27","title":"Parameters","text":""},{"location":"typescript/reference/components/#databuffer_1","title":"dataBuffer","text":"<p><code>Buffer</code></p>"},{"location":"typescript/reference/components/#options_3","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_27","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#readpdffrompath","title":"readPdfFromPath()","text":"<p>readPdfFromPath(<code>filePath</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:51</p>"},{"location":"typescript/reference/components/#parameters_28","title":"Parameters","text":""},{"location":"typescript/reference/components/#filepath_1","title":"filePath","text":"<p><code>string</code></p>"},{"location":"typescript/reference/components/#options_4","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_28","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#readtxt","title":"readTxt()","text":"<p>readTxt(<code>dataBuffer</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:183</p>"},{"location":"typescript/reference/components/#parameters_29","title":"Parameters","text":""},{"location":"typescript/reference/components/#databuffer_2","title":"dataBuffer","text":"<p><code>Buffer</code></p>"},{"location":"typescript/reference/components/#options_5","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_29","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#readtxtfrompath","title":"readTxtFromPath()","text":"<p>readTxtFromPath(<code>filePath</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Defined in: packages/poml/components/document.tsx:191</p>"},{"location":"typescript/reference/components/#parameters_30","title":"Parameters","text":""},{"location":"typescript/reference/components/#filepath_2","title":"filePath","text":"<p><code>string</code></p>"},{"location":"typescript/reference/components/#options_6","title":"options?","text":"<p><code>DocumentProps</code></p>"},{"location":"typescript/reference/components/#returns_30","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReactElement</code>\\&lt;<code>unknown</code>, <code>string</code> | <code>JSXElementConstructor</code>\\&lt;<code>any</code>&gt;&gt;&gt;</p>"},{"location":"typescript/reference/components/#torecordcolumns","title":"toRecordColumns()","text":"<p>toRecordColumns(<code>props</code>): <code>RecordColumns</code></p> <p>Defined in: packages/poml/components/table.tsx:248</p>"},{"location":"typescript/reference/components/#parameters_31","title":"Parameters","text":""},{"location":"typescript/reference/components/#props_23","title":"props","text":"<p><code>TableProps</code></p>"},{"location":"typescript/reference/components/#returns_31","title":"Returns","text":"<p><code>RecordColumns</code></p>"},{"location":"typescript/reference/essentials/","title":"essentials","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/essentials/#interfaces","title":"Interfaces","text":""},{"location":"typescript/reference/essentials/#propssyntaxbase","title":"PropsSyntaxBase","text":"<p>Defined in: packages/poml/essentials.tsx:20</p> <p>Props base serves the following props subclass, as far as I can now think of: 1. Props for markup basic components 2. Props for serialization basic components 3. Props for essential general components   3.1. Props for other high-level components</p>"},{"location":"typescript/reference/essentials/#extends","title":"Extends","text":"<ul> <li><code>PropsBase</code></li> </ul>"},{"location":"typescript/reference/essentials/#extended-by","title":"Extended by","text":"<ul> <li><code>TableProps</code></li> <li><code>TreeProps</code></li> <li><code>FolderProps</code></li> <li><code>WebpageProps</code></li> </ul>"},{"location":"typescript/reference/essentials/#properties","title":"Properties","text":""},{"location":"typescript/reference/essentials/#charlimit","title":"charLimit?","text":"<p><code>optional</code> charLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:109</p> <p>Soft character limit before truncation is applied.</p>"},{"location":"typescript/reference/essentials/#inherited-from","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>charLimit</code></p>"},{"location":"typescript/reference/essentials/#classname","title":"className?","text":"<p><code>optional</code> className: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:94</p>"},{"location":"typescript/reference/essentials/#inherited-from_1","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>className</code></p>"},{"location":"typescript/reference/essentials/#originalendindex","title":"originalEndIndex?","text":"<p><code>optional</code> originalEndIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:99</p>"},{"location":"typescript/reference/essentials/#inherited-from_2","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>originalEndIndex</code></p>"},{"location":"typescript/reference/essentials/#originalstartindex","title":"originalStartIndex?","text":"<p><code>optional</code> originalStartIndex: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:98</p>"},{"location":"typescript/reference/essentials/#inherited-from_3","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>originalStartIndex</code></p>"},{"location":"typescript/reference/essentials/#priority","title":"priority?","text":"<p><code>optional</code> priority: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:113</p> <p>Priority used when truncating globally. Lower numbers are dropped first.</p>"},{"location":"typescript/reference/essentials/#inherited-from_4","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>priority</code></p>"},{"location":"typescript/reference/essentials/#sourcepath","title":"sourcePath?","text":"<p><code>optional</code> sourcePath: <code>string</code></p> <p>Defined in: packages/poml/base.tsx:102</p>"},{"location":"typescript/reference/essentials/#inherited-from_5","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>sourcePath</code></p>"},{"location":"typescript/reference/essentials/#speaker","title":"speaker?","text":"<p><code>optional</code> speaker: <code>Speaker</code></p> <p>Defined in: packages/poml/base.tsx:93</p>"},{"location":"typescript/reference/essentials/#inherited-from_6","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>speaker</code></p>"},{"location":"typescript/reference/essentials/#syntax","title":"syntax?","text":"<p><code>optional</code> syntax: <code>string</code></p> <p>Defined in: packages/poml/essentials.tsx:21</p>"},{"location":"typescript/reference/essentials/#tokenlimit","title":"tokenLimit?","text":"<p><code>optional</code> tokenLimit: <code>number</code></p> <p>Defined in: packages/poml/base.tsx:111</p> <p>Soft token limit before truncation is applied.</p>"},{"location":"typescript/reference/essentials/#inherited-from_7","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>tokenLimit</code></p>"},{"location":"typescript/reference/essentials/#whitespace","title":"whiteSpace?","text":"<p><code>optional</code> whiteSpace: <code>\"filter\"</code> | <code>\"pre\"</code> | <code>\"trim\"</code></p> <p>Defined in: packages/poml/base.tsx:106</p>"},{"location":"typescript/reference/essentials/#inherited-from_8","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>whiteSpace</code></p>"},{"location":"typescript/reference/essentials/#writeroptions","title":"writerOptions?","text":"<p><code>optional</code> writerOptions: <code>object</code></p> <p>Defined in: packages/poml/base.tsx:105</p>"},{"location":"typescript/reference/essentials/#inherited-from_9","title":"Inherited from","text":"<p><code>PropsBase</code>.<code>writerOptions</code></p>"},{"location":"typescript/reference/essentials/#type-aliases","title":"Type Aliases","text":""},{"location":"typescript/reference/essentials/#propssyntaxany","title":"PropsSyntaxAny","text":"<p>PropsSyntaxAny = <code>PropsSyntaxBase</code> &amp; <code>Serialize.AnyProps</code></p> <p>Defined in: packages/poml/essentials.tsx:24</p>"},{"location":"typescript/reference/essentials/#variables","title":"Variables","text":""},{"location":"typescript/reference/essentials/#anyorfree","title":"AnyOrFree()","text":"<p><code>const</code> AnyOrFree: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:101</p>"},{"location":"typescript/reference/essentials/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>object</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#audio","title":"Audio()","text":"<p><code>const</code> Audio: (<code>props</code>) =&gt; <code>null</code> | <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:758</p> <p>Audio (<code>&lt;audio&gt;</code>) embeds an audio file in the content.</p> <p>Accepts either a file path (<code>src</code>) or base64-encoded audio data (<code>base64</code>). The MIME type can be provided via <code>type</code> or will be inferred from the file extension.</p>"},{"location":"typescript/reference/essentials/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_1","title":"props","text":"<p><code>AudioProps</code></p>"},{"location":"typescript/reference/essentials/#returns_1","title":"Returns","text":"<p><code>null</code> | <code>Element</code></p>"},{"location":"typescript/reference/essentials/#examples","title":"Examples","text":"<pre><code>&lt;Audio src=\"path/to/audio.mp3\" /&gt;\n</code></pre> <pre><code>&lt;Audio base64=\"...\" type=\"audio/wav\" /&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#bold","title":"Bold()","text":"<p><code>const</code> Bold: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:388</p> <p>Bold (<code>&lt;b&gt;</code>) emphasizes text in a bold style when using markup syntaxes.</p>"},{"location":"typescript/reference/essentials/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_2","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_2","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example","title":"Example","text":"<pre><code>&lt;p&gt;&lt;b&gt;Task:&lt;/b&gt; Do something.&lt;/p&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#code","title":"Code()","text":"<p><code>const</code> Code: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:515</p> <p>Code is used to represent code snippets or inline code in markup syntaxes.</p>"},{"location":"typescript/reference/essentials/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_3","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>InlineProps</code> &amp; <code>CodeProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_3","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_1","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/essentials/#example_1","title":"Example","text":"<pre><code>&lt;code inline=\"true\"&gt;const x = 42;&lt;/code&gt;\n</code></pre> <pre><code>&lt;code lang=\"javascript\"&gt;\nconst x = 42;\n&lt;/code&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#header","title":"Header()","text":"<p><code>const</code> Header: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:309</p> <p>Header (<code>&lt;h&gt;</code>) renders headings in markup syntaxes. It's commonly used to highlight titles or section headings. The header level will be automatically computed based on the context. Use SubContent (<code>&lt;section&gt;</code>) for nested content.</p>"},{"location":"typescript/reference/essentials/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_4","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>ParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_4","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_2","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/essentials/#example_2","title":"Example","text":"<pre><code>&lt;Header syntax=\"markdown\"&gt;Section Title&lt;/Header&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#image","title":"Image()","text":"<p><code>const</code> Image: (<code>props</code>) =&gt; <code>null</code> | <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:687</p> <p>Image (<code>&lt;img&gt;</code>) displays an image in the content. Alternatively, it can also be shown as an alt text by specifying the <code>syntax</code> prop. Note that syntax must be specified as <code>multimedia</code> to show the image.</p>"},{"location":"typescript/reference/essentials/#parameters_5","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_5","title":"props","text":"<p><code>ImageProps</code></p>"},{"location":"typescript/reference/essentials/#returns_5","title":"Returns","text":"<p><code>null</code> | <code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_3","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_3","title":"Example","text":"<pre><code>&lt;Image src=\"path/to/image.jpg\" alt=\"Image description\" position=\"bottom\" /&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#inline","title":"Inline()","text":"<p><code>const</code> Inline: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:251</p> <p>Inline (<code>&lt;span&gt;</code>) is a container for inline content. When used with markup syntaxes, it wraps text in an inline style, without any preceding or following blank characters. In serializer syntaxes, it's treated as a generic value. Inline elements are not designed to be used alone (especially in serializer syntaxes). One might notice problematic renderings (e.g., speaker not applied) when using it alone.</p>"},{"location":"typescript/reference/essentials/#parameters_6","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_6","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_6","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#example_4","title":"Example","text":"<pre><code>&lt;p&gt;I'm listening to &lt;span&gt;music&lt;/span&gt; right now.&lt;/p&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#italic","title":"Italic()","text":"<p><code>const</code> Italic: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:416</p> <p>Italic (<code>&lt;i&gt;</code>) emphasizes text in an italic style when using markup syntaxes.</p>"},{"location":"typescript/reference/essentials/#parameters_7","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_7","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_7","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_4","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_5","title":"Example","text":"<pre><code>Your &lt;i&gt;italicized&lt;/i&gt; text.\n</code></pre>"},{"location":"typescript/reference/essentials/#list","title":"List()","text":"<p><code>const</code> List: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:558</p> <p>List (<code>&lt;list&gt;</code>) is a container for multiple ListItem (<code>&lt;item&gt;</code>) elements. When used with markup syntaxes, a bullet or numbering is added.</p>"},{"location":"typescript/reference/essentials/#parameters_8","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_8","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>ListProps</code> &amp; <code>ParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_8","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_5","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/essentials/#example_6","title":"Example","text":"<pre><code>&lt;list listStyle=\"decimal\"&gt;\n  &lt;item&gt;Item 1&lt;/item&gt;\n  &lt;item&gt;Item 2&lt;/item&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#listitem","title":"ListItem()","text":"<p><code>const</code> ListItem: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:599</p> <p>ListItem (<code>&lt;item&gt;</code>) is an item within a List component. In markup mode, it is rendered with the specified bullet or numbering style.</p>"},{"location":"typescript/reference/essentials/#parameters_9","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_9","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>ParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_9","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_6","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/essentials/#example_7","title":"Example","text":"<pre><code>&lt;list listStyle=\"decimal\"&gt;\n  &lt;item blankLine=\"true\"&gt;Item 1&lt;/item&gt;\n  &lt;item&gt;Item 2&lt;/item&gt;\n&lt;/list&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#newline","title":"Newline()","text":"<p><code>const</code> Newline: (<code>props</code>) =&gt; <code>null</code> | <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:284</p> <p>Newline (<code>&lt;br&gt;</code>) explicitly adds a line break, primarily in markup syntaxes. In serializer syntaxes, it's ignored.</p>"},{"location":"typescript/reference/essentials/#parameters_10","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_10","title":"props","text":"<p><code>PropsSyntaxBase</code> &amp; <code>NewlineProps</code></p>"},{"location":"typescript/reference/essentials/#returns_10","title":"Returns","text":"<p><code>null</code> | <code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_7","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_8","title":"Example","text":"<pre><code>&lt;br /&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#object","title":"Object()","text":"<p><code>const</code> Object: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:640</p> <p>Object (<code>&lt;obj&gt;</code>, <code>&lt;dataObj&gt;</code>) displays external data or object content. When in serialize mode, it's serialized according to the given serializer.</p>"},{"location":"typescript/reference/essentials/#parameters_11","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_11","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>ObjectProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_11","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_8","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_9","title":"Example","text":"<pre><code>&lt;Object syntax=\"json\" data=\"{ key: 'value' }\" /&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#paragraph","title":"Paragraph()","text":"<p><code>const</code> Paragraph: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:207</p> <p>Paragraph (<code>&lt;p&gt;</code>) is a standalone section preceded by and followed by two blank lines in markup syntaxes. It's mostly used for text contents.</p>"},{"location":"typescript/reference/essentials/#parameters_12","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_12","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>ParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_12","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_9","title":"See","text":"<p>Text for other props available.</p>"},{"location":"typescript/reference/essentials/#example_10","title":"Example","text":"<pre><code>&lt;p&gt;Contents of the paragraph.&lt;/p&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#poml","title":"Poml()","text":"<p><code>const</code> Poml: (<code>props</code>) =&gt; <code>Element</code> = <code>Text</code></p> <p>Defined in: packages/poml/essentials.tsx:192</p>"},{"location":"typescript/reference/essentials/#parameters_13","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_13","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxAny</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_13","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#strikethrough","title":"Strikethrough()","text":"<p><code>const</code> Strikethrough: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:446</p> <p>Strikethrough (<code>&lt;s&gt;</code>, <code>&lt;strike&gt;</code>) indicates removed or invalid text in markup syntaxes.</p>"},{"location":"typescript/reference/essentials/#parameters_14","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_14","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_14","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_10","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_11","title":"Example","text":"<pre><code>&lt;s&gt;This messages is removed.&lt;/s&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#subcontent","title":"SubContent()","text":"<p><code>const</code> SubContent: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:351</p> <p>SubContent (<code>&lt;section&gt;</code>) renders nested content, often following a header. The headers within the section will be automatically adjusted to a lower level.</p>"},{"location":"typescript/reference/essentials/#parameters_15","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_15","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code> &amp; <code>AnyProps</code> &amp; <code>ParagraphProps</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_15","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_11","title":"See","text":"<p>Paragraph for other props available.</p>"},{"location":"typescript/reference/essentials/#example_12","title":"Example","text":"<pre><code>&lt;h&gt;Section Title&lt;/h&gt;\n&lt;section&gt;\n  &lt;h&gt;Sub-section Title&lt;/h&gt;  &lt;!-- Nested header --&gt;\n  &lt;p&gt;Sub-section details&lt;/p&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"typescript/reference/essentials/#text","title":"Text()","text":"<p><code>const</code> Text: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:164</p> <p>Text (<code>&lt;text&gt;</code>, <code>&lt;poml&gt;</code>) is a wrapper for any contents. By default, it uses <code>markdown</code> syntax and writes the contents within it directly to the output. When used with \"markup\" syntaxes, it renders a standalone section preceded and followed by one blank line. It's mostly used in the root element of a prompt, but it should also work in any other places. This component will be automatically added as a wrapping root element if it's not provided: 1. If the first element is pure text contents, <code>&lt;poml syntax=\"text\"&gt;</code> will be added. 2. If the first element is a POML component, <code>&lt;poml syntax=\"markdown\"&gt;</code> will be added.</p>"},{"location":"typescript/reference/essentials/#parameters_16","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_16","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxAny</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_16","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#underline","title":"Underline()","text":"<p><code>const</code> Underline: (<code>props</code>) =&gt; <code>Element</code></p> <p>Defined in: packages/poml/essentials.tsx:476</p> <p>Underline (<code>&lt;u&gt;</code>) draws a line beneath text in markup syntaxes.</p>"},{"location":"typescript/reference/essentials/#parameters_17","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_17","title":"props","text":"<p><code>PropsWithChildren</code>\\&lt;<code>PropsSyntaxBase</code>&gt;</p>"},{"location":"typescript/reference/essentials/#returns_17","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"typescript/reference/essentials/#see_12","title":"See","text":"<p>Inline for other props available.</p>"},{"location":"typescript/reference/essentials/#example_13","title":"Example","text":"<pre><code>This text is &lt;u&gt;underlined&lt;/u&gt;.\n</code></pre>"},{"location":"typescript/reference/essentials/#functions","title":"Functions","text":""},{"location":"typescript/reference/essentials/#computesyntaxcontext","title":"computeSyntaxContext()","text":"<p>computeSyntaxContext(<code>props</code>, <code>defaultSyntax?</code>, <code>invalidPresentations?</code>): <code>Presentation</code></p> <p>Defined in: packages/poml/essentials.tsx:34</p>"},{"location":"typescript/reference/essentials/#parameters_18","title":"Parameters","text":""},{"location":"typescript/reference/essentials/#props_18","title":"props","text":"<p><code>PropsSyntaxBase</code></p>"},{"location":"typescript/reference/essentials/#defaultsyntax","title":"defaultSyntax?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/essentials/#invalidpresentations","title":"invalidPresentations?","text":"<p><code>string</code>[]</p>"},{"location":"typescript/reference/essentials/#returns_18","title":"Returns","text":"<p><code>Presentation</code></p>"},{"location":"typescript/reference/file/","title":"file","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/file/#classes","title":"Classes","text":""},{"location":"typescript/reference/file/#pomlfile","title":"PomlFile","text":"<p>Defined in: packages/poml/file.tsx:56</p>"},{"location":"typescript/reference/file/#constructors","title":"Constructors","text":""},{"location":"typescript/reference/file/#constructor","title":"Constructor","text":"<p>new PomlFile(<code>text</code>, <code>options?</code>, <code>sourcePath?</code>): <code>PomlFile</code></p> <p>Defined in: packages/poml/file.tsx:71</p>"},{"location":"typescript/reference/file/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/file/#text","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/file/#options","title":"options?","text":"<p><code>PomlReaderOptions</code></p>"},{"location":"typescript/reference/file/#sourcepath","title":"sourcePath?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/file/#returns","title":"Returns","text":"<p><code>PomlFile</code></p>"},{"location":"typescript/reference/file/#methods","title":"Methods","text":""},{"location":"typescript/reference/file/#getcompletions","title":"getCompletions()","text":"<p>getCompletions(<code>offset</code>): <code>PomlToken</code>[]</p> <p>Defined in: packages/poml/file.tsx:312</p>"},{"location":"typescript/reference/file/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/file/#offset","title":"offset","text":"<p><code>number</code></p>"},{"location":"typescript/reference/file/#returns_1","title":"Returns","text":"<p><code>PomlToken</code>[]</p>"},{"location":"typescript/reference/file/#getexpressionevaluations","title":"getExpressionEvaluations()","text":"<p>getExpressionEvaluations(<code>range</code>): <code>any</code>[]</p> <p>Defined in: packages/poml/file.tsx:429</p>"},{"location":"typescript/reference/file/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/file/#range","title":"range","text":"<p><code>Range</code></p>"},{"location":"typescript/reference/file/#returns_2","title":"Returns","text":"<p><code>any</code>[]</p>"},{"location":"typescript/reference/file/#getexpressiontokens","title":"getExpressionTokens()","text":"<p>getExpressionTokens(): <code>PomlToken</code>[]</p> <p>Defined in: packages/poml/file.tsx:334</p>"},{"location":"typescript/reference/file/#returns_3","title":"Returns","text":"<p><code>PomlToken</code>[]</p>"},{"location":"typescript/reference/file/#gethovertoken","title":"getHoverToken()","text":"<p>getHoverToken(<code>offset</code>): <code>undefined</code> | <code>PomlToken</code></p> <p>Defined in: packages/poml/file.tsx:304</p>"},{"location":"typescript/reference/file/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/file/#offset_1","title":"offset","text":"<p><code>number</code></p>"},{"location":"typescript/reference/file/#returns_4","title":"Returns","text":"<p><code>undefined</code> | <code>PomlToken</code></p>"},{"location":"typescript/reference/file/#getresponseschema","title":"getResponseSchema()","text":"<p>getResponseSchema(): <code>undefined</code> | <code>Schema</code></p> <p>Defined in: packages/poml/file.tsx:253</p>"},{"location":"typescript/reference/file/#returns_5","title":"Returns","text":"<p><code>undefined</code> | <code>Schema</code></p>"},{"location":"typescript/reference/file/#getruntimeparameters","title":"getRuntimeParameters()","text":"<p>getRuntimeParameters(): <code>undefined</code> | {[<code>key</code>: <code>string</code>]: <code>any</code>; }</p> <p>Defined in: packages/poml/file.tsx:261</p>"},{"location":"typescript/reference/file/#returns_6","title":"Returns","text":"<p><code>undefined</code> | {[<code>key</code>: <code>string</code>]: <code>any</code>; }</p>"},{"location":"typescript/reference/file/#gettoolsschema","title":"getToolsSchema()","text":"<p>getToolsSchema(): <code>undefined</code> | <code>ToolsSchema</code></p> <p>Defined in: packages/poml/file.tsx:257</p>"},{"location":"typescript/reference/file/#returns_7","title":"Returns","text":"<p><code>undefined</code> | <code>ToolsSchema</code></p>"},{"location":"typescript/reference/file/#react","title":"react()","text":"<p>react(<code>context?</code>): <code>ReactElement</code></p> <p>Defined in: packages/poml/file.tsx:277</p>"},{"location":"typescript/reference/file/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/file/#context","title":"context?","text":""},{"location":"typescript/reference/file/#returns_8","title":"Returns","text":"<p><code>ReactElement</code></p>"},{"location":"typescript/reference/file/#xmlrootelement","title":"xmlRootElement()","text":"<p>xmlRootElement(): <code>undefined</code> | <code>XMLElement</code></p> <p>Defined in: packages/poml/file.tsx:265</p>"},{"location":"typescript/reference/file/#returns_9","title":"Returns","text":"<p><code>undefined</code> | <code>XMLElement</code></p>"},{"location":"typescript/reference/file/#interfaces","title":"Interfaces","text":""},{"location":"typescript/reference/file/#pomlreaderoptions","title":"PomlReaderOptions","text":"<p>Defined in: packages/poml/file.tsx:27</p>"},{"location":"typescript/reference/file/#properties","title":"Properties","text":""},{"location":"typescript/reference/file/#autoaddpoml","title":"autoAddPoml?","text":"<p><code>optional</code> autoAddPoml: <code>boolean</code></p> <p>Defined in: packages/poml/file.tsx:29</p>"},{"location":"typescript/reference/file/#crlftolf","title":"crlfToLf?","text":"<p><code>optional</code> crlfToLf: <code>boolean</code></p> <p>Defined in: packages/poml/file.tsx:30</p>"},{"location":"typescript/reference/file/#trim","title":"trim?","text":"<p><code>optional</code> trim: <code>boolean</code></p> <p>Defined in: packages/poml/file.tsx:28</p>"},{"location":"typescript/reference/file/#pomltoken","title":"PomlToken","text":"<p>Defined in: packages/poml/file.tsx:39</p>"},{"location":"typescript/reference/file/#properties_1","title":"Properties","text":""},{"location":"typescript/reference/file/#attribute","title":"attribute?","text":"<p><code>optional</code> attribute: <code>string</code></p> <p>Defined in: packages/poml/file.tsx:43</p>"},{"location":"typescript/reference/file/#element","title":"element?","text":"<p><code>optional</code> element: <code>string</code></p> <p>Defined in: packages/poml/file.tsx:42</p>"},{"location":"typescript/reference/file/#expression","title":"expression?","text":"<p><code>optional</code> expression: <code>string</code></p> <p>Defined in: packages/poml/file.tsx:45</p>"},{"location":"typescript/reference/file/#range_1","title":"range","text":"<p>range: <code>Range</code></p> <p>Defined in: packages/poml/file.tsx:41</p>"},{"location":"typescript/reference/file/#type","title":"type","text":"<p>type: <code>\"element\"</code> | <code>\"attribute\"</code> | <code>\"attributeValue\"</code> | <code>\"expression\"</code></p> <p>Defined in: packages/poml/file.tsx:40</p>"},{"location":"typescript/reference/file/#value","title":"value?","text":"<p><code>optional</code> value: <code>string</code></p> <p>Defined in: packages/poml/file.tsx:44</p>"},{"location":"typescript/reference/writer/","title":"writer","text":"<p>POML TypeScript API</p>"},{"location":"typescript/reference/writer/#classes","title":"Classes","text":""},{"location":"typescript/reference/writer/#csvwriter","title":"CsvWriter","text":"<p>Defined in: packages/poml/writer.ts:1357</p>"},{"location":"typescript/reference/writer/#extends","title":"Extends","text":"<ul> <li><code>MarkdownWriter</code></li> </ul>"},{"location":"typescript/reference/writer/#extended-by","title":"Extended by","text":"<ul> <li><code>TsvWriter</code></li> </ul>"},{"location":"typescript/reference/writer/#constructors","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor","title":"Constructor","text":"<p>new CsvWriter(<code>ir?</code>, <code>options?</code>): <code>CsvWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns","title":"Returns","text":"<p><code>CsvWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>constructor</code></p>"},{"location":"typescript/reference/writer/#properties","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_1","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_1","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>ir</code></p>"},{"location":"typescript/reference/writer/#options_1","title":"options","text":"<p><code>protected</code> options: <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_2","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_3","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:270</p>"},{"location":"typescript/reference/writer/#parameters_1","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_1","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_1","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_4","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#createmappingnode","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:151</p>"},{"location":"typescript/reference/writer/#parameters_2","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_2","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_5","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>createMappingNode</code></p>"},{"location":"typescript/reference/writer/#handletable","title":"handleTable()","text":"<p><code>protected</code> handleTable(<code>tableHeadElements</code>, <code>tableBodyElements</code>, <code>tableElement</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1358</p>"},{"location":"typescript/reference/writer/#parameters_3","title":"Parameters","text":""},{"location":"typescript/reference/writer/#tableheadelements","title":"tableHeadElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tablebodyelements","title":"tableBodyElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tableelement","title":"tableElement","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_2","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_3","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#overrides","title":"Overrides","text":"<p><code>MarkdownWriter</code>.<code>handleTable</code></p>"},{"location":"typescript/reference/writer/#indentmappings","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:177</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_4","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_4","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_6","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:193</p>"},{"location":"typescript/reference/writer/#parameters_5","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_1","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_1","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_5","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_7","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:656</p>"},{"location":"typescript/reference/writer/#parameters_6","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_2","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns_6","title":"Returns","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#inherited-from_8","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>initializeOptions</code></p>"},{"location":"typescript/reference/writer/#makebox","title":"makeBox()","text":"<p><code>protected</code> makeBox(<code>text</code>, <code>layout</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:674</p>"},{"location":"typescript/reference/writer/#parameters_7","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text","title":"text","text":"<p><code>string</code> | <code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#layout","title":"layout","text":"<p><code>\"block\"</code> | <code>\"newline\"</code> | <code>\"inline\"</code></p>"},{"location":"typescript/reference/writer/#element_1","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_7","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_9","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>makeBox</code></p>"},{"location":"typescript/reference/writer/#markuplanguage","title":"markupLanguage()","text":"<p><code>protected</code> markupLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1408</p>"},{"location":"typescript/reference/writer/#returns_8","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#overrides_1","title":"Overrides","text":"<p><code>MarkdownWriter</code>.<code>markupLanguage</code></p>"},{"location":"typescript/reference/writer/#processmultipletablerows","title":"processMultipleTableRows()","text":"<p><code>protected</code> processMultipleTableRows(<code>elements</code>, <code>$</code>): <code>StringTableRow</code>[]</p> <p>Defined in: packages/poml/writer.ts:1047</p>"},{"location":"typescript/reference/writer/#parameters_8","title":"Parameters","text":""},{"location":"typescript/reference/writer/#elements","title":"elements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_3","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_9","title":"Returns","text":"<p><code>StringTableRow</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_10","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>processMultipleTableRows</code></p>"},{"location":"typescript/reference/writer/#raiseerror","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:206</p>"},{"location":"typescript/reference/writer/#parameters_9","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_2","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_10","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_11","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>raiseError</code></p>"},{"location":"typescript/reference/writer/#raiseerrorandreturnempty","title":"raiseErrorAndReturnEmpty()","text":"<p><code>protected</code> raiseErrorAndReturnEmpty(<code>message</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:669</p>"},{"location":"typescript/reference/writer/#parameters_10","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_1","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_3","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_11","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_12","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>raiseErrorAndReturnEmpty</code></p>"},{"location":"typescript/reference/writer/#reset","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_11","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_2","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_12","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_13","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_12","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_1","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_3","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_13","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_14","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>truncateText</code></p>"},{"location":"typescript/reference/writer/#write","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:251</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_13","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_3","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_14","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_15","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1229</p>"},{"location":"typescript/reference/writer/#parameters_14","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_4","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_4","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_15","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_16","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writeelementtreeimpl","title":"writeElementTreeImpl()","text":"<p><code>protected</code> writeElementTreeImpl(<code>element</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1387</p>"},{"location":"typescript/reference/writer/#parameters_15","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_5","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_5","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_16","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#overrides_2","title":"Overrides","text":"<p><code>MarkdownWriter</code>.<code>writeElementTreeImpl</code></p>"},{"location":"typescript/reference/writer/#writemessages","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:262</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_16","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_4","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_17","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_17","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:392</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_17","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_5","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_18","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_18","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:382</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_18","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_6","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_19","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_19","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#environmentdispatcher","title":"EnvironmentDispatcher","text":"<p>Defined in: packages/poml/writer.ts:568</p>"},{"location":"typescript/reference/writer/#extends_1","title":"Extends","text":"<ul> <li><code>Writer</code>\\&lt;<code>any</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_1","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_1","title":"Constructor","text":"<p>new EnvironmentDispatcher(<code>ir?</code>, <code>options?</code>): <code>EnvironmentDispatcher</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_19","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_7","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_4","title":"options?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#returns_20","title":"Returns","text":"<p><code>EnvironmentDispatcher</code></p>"},{"location":"typescript/reference/writer/#inherited-from_20","title":"Inherited from","text":"<p><code>Writer&lt;any&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_1","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_8","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_21","title":"Inherited from","text":"<p><code>MarkdownWriter</code>.<code>ir</code></p>"},{"location":"typescript/reference/writer/#options_5","title":"options","text":"<p><code>protected</code> options: <code>any</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_22","title":"Inherited from","text":"<p><code>Writer.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_1","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_1","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_23","title":"Inherited from","text":"<p><code>Writer.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_1","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_1","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:270</p>"},{"location":"typescript/reference/writer/#parameters_20","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_1","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_6","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_21","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_24","title":"Inherited from","text":"<p><code>Writer.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_1","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:151</p>"},{"location":"typescript/reference/writer/#parameters_21","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_6","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_1","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_22","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_25","title":"Inherited from","text":"<p><code>Writer.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_1","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:177</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_22","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_1","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_2","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_2","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_23","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_26","title":"Inherited from","text":"<p><code>Writer.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_1","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:193</p>"},{"location":"typescript/reference/writer/#parameters_23","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_1","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_3","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_3","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_24","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_27","title":"Inherited from","text":"<p><code>Writer.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_1","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:82</p>"},{"location":"typescript/reference/writer/#parameters_24","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_6","title":"options?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#returns_25","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_28","title":"Inherited from","text":"<p><code>Writer.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#raiseerror_1","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:206</p>"},{"location":"typescript/reference/writer/#parameters_25","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_2","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_7","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_26","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_29","title":"Inherited from","text":"<p><code>Writer.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_1","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_26","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_9","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_27","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_30","title":"Inherited from","text":"<p><code>Writer.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_1","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_27","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_2","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_1","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_1","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_7","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_28","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_31","title":"Inherited from","text":"<p><code>Writer.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_1","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:251</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_28","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_10","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_29","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_32","title":"Inherited from","text":"<p><code>Writer.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_1","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:569</p>"},{"location":"typescript/reference/writer/#parameters_29","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_8","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_7","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_30","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_3","title":"Overrides","text":"<p><code>Writer.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_1","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:262</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_30","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_11","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_31","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_33","title":"Inherited from","text":"<p><code>Writer.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_1","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:392</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_31","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_12","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_32","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_34","title":"Inherited from","text":"<p><code>Writer.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_1","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:382</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_32","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_13","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_33","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_35","title":"Inherited from","text":"<p><code>Writer.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#freewriter","title":"FreeWriter","text":"<p>Defined in: packages/poml/writer.ts:1749</p>"},{"location":"typescript/reference/writer/#extends_2","title":"Extends","text":"<ul> <li><code>Writer</code>\\&lt;<code>FreeOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_2","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_2","title":"Constructor","text":"<p>new FreeWriter(<code>ir?</code>, <code>options?</code>): <code>FreeWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_33","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_14","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_8","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_34","title":"Returns","text":"<p><code>FreeWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_36","title":"Inherited from","text":"<p><code>Writer&lt;FreeOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_2","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_15","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_37","title":"Inherited from","text":"<p><code>Writer.ir</code></p>"},{"location":"typescript/reference/writer/#options_9","title":"options","text":"<p><code>protected</code> options: <code>TruncateOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_38","title":"Inherited from","text":"<p><code>Writer.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_2","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_2","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_39","title":"Inherited from","text":"<p><code>Writer.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_2","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_2","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:270</p>"},{"location":"typescript/reference/writer/#parameters_34","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_2","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_8","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_35","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_40","title":"Inherited from","text":"<p><code>Writer.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_2","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:151</p>"},{"location":"typescript/reference/writer/#parameters_35","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_9","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_2","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_36","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_41","title":"Inherited from","text":"<p><code>Writer.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_2","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:177</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_36","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_2","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_4","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_4","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_37","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_42","title":"Inherited from","text":"<p><code>Writer.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_2","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:193</p>"},{"location":"typescript/reference/writer/#parameters_37","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_2","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_5","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_5","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_38","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_43","title":"Inherited from","text":"<p><code>Writer.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_2","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>TruncateOptions</code></p> <p>Defined in: packages/poml/writer.ts:1750</p>"},{"location":"typescript/reference/writer/#parameters_38","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_10","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_39","title":"Returns","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_4","title":"Overrides","text":"<p><code>Writer.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#raiseerror_2","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:206</p>"},{"location":"typescript/reference/writer/#parameters_39","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_3","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_10","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_40","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_44","title":"Inherited from","text":"<p><code>Writer.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_2","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_40","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_16","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_41","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_45","title":"Inherited from","text":"<p><code>Writer.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_2","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_41","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_3","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_2","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_2","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_11","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_42","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_46","title":"Inherited from","text":"<p><code>Writer.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_2","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:251</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_42","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_17","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_43","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_47","title":"Inherited from","text":"<p><code>Writer.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_2","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1790</p>"},{"location":"typescript/reference/writer/#parameters_43","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_11","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_9","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_44","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_5","title":"Overrides","text":"<p><code>Writer.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_2","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:262</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_44","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_18","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_45","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_48","title":"Inherited from","text":"<p><code>Writer.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_2","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:392</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_45","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_19","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_46","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_49","title":"Inherited from","text":"<p><code>Writer.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_2","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:382</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_46","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_20","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_47","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_50","title":"Inherited from","text":"<p><code>Writer.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#htmlwriter","title":"HtmlWriter","text":"<p>Defined in: packages/poml/writer.ts:1253</p>"},{"location":"typescript/reference/writer/#extends_3","title":"Extends","text":"<ul> <li><code>Writer</code>\\&lt;<code>HtmlOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_3","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_3","title":"Constructor","text":"<p>new HtmlWriter(<code>ir?</code>, <code>options?</code>): <code>HtmlWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_47","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_21","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_12","title":"options?","text":"<p><code>HtmlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_48","title":"Returns","text":"<p><code>HtmlWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_51","title":"Inherited from","text":"<p><code>Writer&lt;HtmlOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_3","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_22","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_52","title":"Inherited from","text":"<p><code>Writer.ir</code></p>"},{"location":"typescript/reference/writer/#options_13","title":"options","text":"<p><code>protected</code> options: <code>HtmlOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_53","title":"Inherited from","text":"<p><code>Writer.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_3","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_3","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_54","title":"Inherited from","text":"<p><code>Writer.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_3","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_3","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:270</p>"},{"location":"typescript/reference/writer/#parameters_48","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_3","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_10","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_49","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_55","title":"Inherited from","text":"<p><code>Writer.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_3","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:151</p>"},{"location":"typescript/reference/writer/#parameters_49","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_12","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_3","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_50","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_56","title":"Inherited from","text":"<p><code>Writer.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_3","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:177</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_50","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_3","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_6","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_6","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_51","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_57","title":"Inherited from","text":"<p><code>Writer.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_3","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:193</p>"},{"location":"typescript/reference/writer/#parameters_51","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_3","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_7","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_7","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_52","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_58","title":"Inherited from","text":"<p><code>Writer.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_3","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>HtmlOptions</code></p> <p>Defined in: packages/poml/writer.ts:1256</p>"},{"location":"typescript/reference/writer/#parameters_52","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_14","title":"options?","text":"<p><code>HtmlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_53","title":"Returns","text":"<p><code>HtmlOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_6","title":"Overrides","text":"<p><code>Writer.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#raiseerror_3","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:206</p>"},{"location":"typescript/reference/writer/#parameters_53","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_4","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_13","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_54","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_59","title":"Inherited from","text":"<p><code>Writer.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_3","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_54","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_23","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_55","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_60","title":"Inherited from","text":"<p><code>Writer.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_3","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_55","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_4","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_3","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_3","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_15","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_56","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_61","title":"Inherited from","text":"<p><code>Writer.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_3","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:251</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_56","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_24","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_57","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_62","title":"Inherited from","text":"<p><code>Writer.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_3","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1338</p>"},{"location":"typescript/reference/writer/#parameters_57","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_14","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_11","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_58","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_7","title":"Overrides","text":"<p><code>Writer.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_3","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:262</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_58","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_25","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_59","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_63","title":"Inherited from","text":"<p><code>Writer.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_3","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:392</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_59","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_26","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_60","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_64","title":"Inherited from","text":"<p><code>Writer.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_3","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:382</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_60","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_27","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_61","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_65","title":"Inherited from","text":"<p><code>Writer.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#jsonwriter","title":"JsonWriter","text":"<p>Defined in: packages/poml/writer.ts:1600</p>"},{"location":"typescript/reference/writer/#extends_4","title":"Extends","text":"<ul> <li><code>SerializeWriter</code>\\&lt;<code>JsonOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_4","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_4","title":"Constructor","text":"<p>new JsonWriter(<code>ir?</code>, <code>options?</code>): <code>JsonWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_61","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_28","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_16","title":"options?","text":"<p><code>JsonOptions</code></p>"},{"location":"typescript/reference/writer/#returns_62","title":"Returns","text":"<p><code>JsonWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_66","title":"Inherited from","text":"<p><code>SerializeWriter&lt;JsonOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_4","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_29","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_67","title":"Inherited from","text":"<p><code>SerializeWriter.ir</code></p>"},{"location":"typescript/reference/writer/#options_17","title":"options","text":"<p><code>protected</code> options: <code>JsonOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_68","title":"Inherited from","text":"<p><code>SerializeWriter.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_4","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_4","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_69","title":"Inherited from","text":"<p><code>SerializeWriter.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#accessors","title":"Accessors","text":""},{"location":"typescript/reference/writer/#serializelanguage","title":"serializeLanguage","text":""},{"location":"typescript/reference/writer/#get-signature","title":"Get Signature","text":"<p>get serializeLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1601</p>"},{"location":"typescript/reference/writer/#returns_63","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#overrides_8","title":"Overrides","text":"<p><code>SerializeWriter.serializeLanguage</code></p>"},{"location":"typescript/reference/writer/#methods_4","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_4","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:270</p>"},{"location":"typescript/reference/writer/#parameters_62","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_4","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_12","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_64","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_70","title":"Inherited from","text":"<p><code>SerializeWriter.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_4","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:151</p>"},{"location":"typescript/reference/writer/#parameters_63","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_15","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_4","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_65","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_71","title":"Inherited from","text":"<p><code>SerializeWriter.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_4","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:177</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_64","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_4","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_8","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_8","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_66","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_72","title":"Inherited from","text":"<p><code>SerializeWriter.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_4","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:193</p>"},{"location":"typescript/reference/writer/#parameters_65","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_4","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_9","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_9","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_67","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_73","title":"Inherited from","text":"<p><code>SerializeWriter.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_4","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>JsonOptions</code></p> <p>Defined in: packages/poml/writer.ts:1605</p>"},{"location":"typescript/reference/writer/#parameters_66","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_18","title":"options?","text":"<p><code>JsonOptions</code></p>"},{"location":"typescript/reference/writer/#returns_68","title":"Returns","text":"<p><code>JsonOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_9","title":"Overrides","text":"<p><code>SerializeWriter.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#parseany","title":"parseAny()","text":"<p><code>protected</code> parseAny(<code>element</code>, <code>$</code>, <code>singleAsObject?</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1463</p>"},{"location":"typescript/reference/writer/#parameters_67","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_16","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_13","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#singleasobject","title":"singleAsObject?","text":"<p><code>boolean</code></p>"},{"location":"typescript/reference/writer/#returns_69","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_74","title":"Inherited from","text":"<p><code>SerializeWriter.parseAny</code></p>"},{"location":"typescript/reference/writer/#parseenv","title":"parseEnv()","text":"<p><code>protected</code> parseEnv(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1553</p>"},{"location":"typescript/reference/writer/#parameters_68","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_17","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_14","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_70","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_75","title":"Inherited from","text":"<p><code>SerializeWriter.parseEnv</code></p>"},{"location":"typescript/reference/writer/#parsegeneralelement","title":"parseGeneralElement()","text":"<p><code>protected</code> parseGeneralElement(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1581</p>"},{"location":"typescript/reference/writer/#parameters_69","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_18","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_15","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_71","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_76","title":"Inherited from","text":"<p><code>SerializeWriter.parseGeneralElement</code></p>"},{"location":"typescript/reference/writer/#parseobject","title":"parseObject()","text":"<p><code>protected</code> parseObject(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1539</p>"},{"location":"typescript/reference/writer/#parameters_70","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_19","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_16","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_72","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_77","title":"Inherited from","text":"<p><code>SerializeWriter.parseObject</code></p>"},{"location":"typescript/reference/writer/#parsetext","title":"parseText()","text":"<p><code>protected</code> parseText(<code>element</code>, <code>text</code>, <code>type</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1428</p>"},{"location":"typescript/reference/writer/#parameters_71","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_20","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#text_5","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#type","title":"type","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_73","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_78","title":"Inherited from","text":"<p><code>SerializeWriter.parseText</code></p>"},{"location":"typescript/reference/writer/#raiseerror_4","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:206</p>"},{"location":"typescript/reference/writer/#parameters_72","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_5","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_21","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_74","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_79","title":"Inherited from","text":"<p><code>SerializeWriter.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_4","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_73","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_30","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_75","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_80","title":"Inherited from","text":"<p><code>SerializeWriter.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_4","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_74","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_6","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_4","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_4","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_19","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_76","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_81","title":"Inherited from","text":"<p><code>SerializeWriter.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_4","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:251</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_75","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_31","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_77","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_82","title":"Inherited from","text":"<p><code>SerializeWriter.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_4","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1611</p>"},{"location":"typescript/reference/writer/#parameters_76","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_22","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_17","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_78","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_10","title":"Overrides","text":"<p><code>SerializeWriter.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_4","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:262</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_77","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_32","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_79","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_83","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_4","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:392</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_78","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_33","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_80","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_84","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_4","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:382</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_79","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_34","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_81","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_85","title":"Inherited from","text":"<p><code>SerializeWriter.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#markdownwriter","title":"MarkdownWriter","text":"<p>Defined in: packages/poml/writer.ts:655</p>"},{"location":"typescript/reference/writer/#extends_5","title":"Extends","text":"<ul> <li><code>Writer</code>\\&lt;<code>MarkdownOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#extended-by_1","title":"Extended by","text":"<ul> <li><code>CsvWriter</code></li> </ul>"},{"location":"typescript/reference/writer/#constructors_5","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_5","title":"Constructor","text":"<p>new MarkdownWriter(<code>ir?</code>, <code>options?</code>): <code>MarkdownWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_80","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_35","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_20","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns_82","title":"Returns","text":"<p><code>MarkdownWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_86","title":"Inherited from","text":"<p><code>Writer&lt;MarkdownOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_5","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_36","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_87","title":"Inherited from","text":"<p><code>Writer.ir</code></p>"},{"location":"typescript/reference/writer/#options_21","title":"options","text":"<p><code>protected</code> options: <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_88","title":"Inherited from","text":"<p><code>Writer.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_5","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_5","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_89","title":"Inherited from","text":"<p><code>Writer.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_5","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_5","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:270</p>"},{"location":"typescript/reference/writer/#parameters_81","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_5","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_18","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_83","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_90","title":"Inherited from","text":"<p><code>Writer.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_5","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:151</p>"},{"location":"typescript/reference/writer/#parameters_82","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_23","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_5","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_84","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_91","title":"Inherited from","text":"<p><code>Writer.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#handletable_1","title":"handleTable()","text":"<p><code>protected</code> handleTable(<code>tableHeadElements</code>, <code>tableBodyElements</code>, <code>tableElement</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1073</p>"},{"location":"typescript/reference/writer/#parameters_83","title":"Parameters","text":""},{"location":"typescript/reference/writer/#tableheadelements_1","title":"tableHeadElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tablebodyelements_1","title":"tableBodyElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tableelement_1","title":"tableElement","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_19","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_85","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#indentmappings_5","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:177</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_84","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_5","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_10","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_10","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_86","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_92","title":"Inherited from","text":"<p><code>Writer.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_5","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:193</p>"},{"location":"typescript/reference/writer/#parameters_85","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_5","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_11","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_11","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_87","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_93","title":"Inherited from","text":"<p><code>Writer.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_5","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:656</p>"},{"location":"typescript/reference/writer/#parameters_86","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_22","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns_88","title":"Returns","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_11","title":"Overrides","text":"<p><code>Writer.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#makebox_1","title":"makeBox()","text":"<p><code>protected</code> makeBox(<code>text</code>, <code>layout</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:674</p>"},{"location":"typescript/reference/writer/#parameters_87","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_7","title":"text","text":"<p><code>string</code> | <code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#layout_1","title":"layout","text":"<p><code>\"block\"</code> | <code>\"newline\"</code> | <code>\"inline\"</code></p>"},{"location":"typescript/reference/writer/#element_24","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_89","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#markuplanguage_1","title":"markupLanguage()","text":"<p><code>protected</code> markupLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1241</p>"},{"location":"typescript/reference/writer/#returns_90","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#processmultipletablerows_1","title":"processMultipleTableRows()","text":"<p><code>protected</code> processMultipleTableRows(<code>elements</code>, <code>$</code>): <code>StringTableRow</code>[]</p> <p>Defined in: packages/poml/writer.ts:1047</p>"},{"location":"typescript/reference/writer/#parameters_88","title":"Parameters","text":""},{"location":"typescript/reference/writer/#elements_1","title":"elements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_20","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_91","title":"Returns","text":"<p><code>StringTableRow</code>[]</p>"},{"location":"typescript/reference/writer/#raiseerror_5","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:206</p>"},{"location":"typescript/reference/writer/#parameters_89","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_6","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_25","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_92","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_94","title":"Inherited from","text":"<p><code>Writer.raiseError</code></p>"},{"location":"typescript/reference/writer/#raiseerrorandreturnempty_1","title":"raiseErrorAndReturnEmpty()","text":"<p><code>protected</code> raiseErrorAndReturnEmpty(<code>message</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:669</p>"},{"location":"typescript/reference/writer/#parameters_90","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_7","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_26","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_93","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#reset_5","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_91","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_37","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_94","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_95","title":"Inherited from","text":"<p><code>Writer.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_5","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_92","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_8","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_5","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_5","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_23","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_95","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_96","title":"Inherited from","text":"<p><code>Writer.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_5","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:251</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_93","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_38","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_96","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_97","title":"Inherited from","text":"<p><code>Writer.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_5","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1229</p>"},{"location":"typescript/reference/writer/#parameters_94","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_27","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_21","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_97","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_12","title":"Overrides","text":"<p><code>Writer.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writeelementtreeimpl_1","title":"writeElementTreeImpl()","text":"<p><code>protected</code> writeElementTreeImpl(<code>element</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1127</p>"},{"location":"typescript/reference/writer/#parameters_95","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_28","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_22","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_98","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#writemessages_5","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:262</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_96","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_39","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_99","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_98","title":"Inherited from","text":"<p><code>Writer.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_5","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:392</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_97","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_40","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_100","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_99","title":"Inherited from","text":"<p><code>Writer.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_5","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:382</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_98","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_41","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_101","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_100","title":"Inherited from","text":"<p><code>Writer.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#multimediawriter","title":"MultiMediaWriter","text":"<p>Defined in: packages/poml/writer.ts:1810</p>"},{"location":"typescript/reference/writer/#extends_6","title":"Extends","text":"<ul> <li><code>Writer</code>\\&lt;<code>MultiMediaOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_6","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_6","title":"Constructor","text":"<p>new MultiMediaWriter(<code>ir?</code>, <code>options?</code>): <code>MultiMediaWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_99","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_42","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_24","title":"options?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#returns_102","title":"Returns","text":"<p><code>MultiMediaWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_101","title":"Inherited from","text":"<p><code>Writer&lt;MultiMediaOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_6","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_43","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_102","title":"Inherited from","text":"<p><code>Writer.ir</code></p>"},{"location":"typescript/reference/writer/#options_25","title":"options","text":"<p><code>protected</code> options: <code>any</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_103","title":"Inherited from","text":"<p><code>Writer.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_6","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_6","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_104","title":"Inherited from","text":"<p><code>Writer.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_6","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_6","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:270</p>"},{"location":"typescript/reference/writer/#parameters_100","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_6","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_23","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_103","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_105","title":"Inherited from","text":"<p><code>Writer.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_6","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:151</p>"},{"location":"typescript/reference/writer/#parameters_101","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_29","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_6","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_104","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_106","title":"Inherited from","text":"<p><code>Writer.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_6","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:177</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_102","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_6","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_12","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_12","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_105","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_107","title":"Inherited from","text":"<p><code>Writer.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_6","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:193</p>"},{"location":"typescript/reference/writer/#parameters_103","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_6","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_13","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_13","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_106","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_108","title":"Inherited from","text":"<p><code>Writer.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_6","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1811</p>"},{"location":"typescript/reference/writer/#parameters_104","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_26","title":"options?","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#returns_107","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#overrides_13","title":"Overrides","text":"<p><code>Writer.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#raiseerror_6","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:206</p>"},{"location":"typescript/reference/writer/#parameters_105","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_8","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_30","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_108","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_109","title":"Inherited from","text":"<p><code>Writer.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_6","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_106","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_44","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_109","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_110","title":"Inherited from","text":"<p><code>Writer.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_6","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_107","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_9","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_6","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_6","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_27","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_110","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_111","title":"Inherited from","text":"<p><code>Writer.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_6","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:251</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_108","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_45","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_111","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_112","title":"Inherited from","text":"<p><code>Writer.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_6","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1863</p>"},{"location":"typescript/reference/writer/#parameters_109","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_31","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_24","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_112","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_14","title":"Overrides","text":"<p><code>Writer.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writeelementtrees","title":"writeElementTrees()","text":"<p>writeElementTrees(<code>elements</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1843</p>"},{"location":"typescript/reference/writer/#parameters_110","title":"Parameters","text":""},{"location":"typescript/reference/writer/#elements_2","title":"elements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_25","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_113","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#writemessages_6","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:262</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_111","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_46","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_114","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_113","title":"Inherited from","text":"<p><code>Writer.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_6","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:392</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_112","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_47","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_115","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_114","title":"Inherited from","text":"<p><code>Writer.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_6","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:382</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_113","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_48","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_116","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_115","title":"Inherited from","text":"<p><code>Writer.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#tsvwriter","title":"TsvWriter","text":"<p>Defined in: packages/poml/writer.ts:1413</p>"},{"location":"typescript/reference/writer/#extends_7","title":"Extends","text":"<ul> <li><code>CsvWriter</code></li> </ul>"},{"location":"typescript/reference/writer/#constructors_7","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_7","title":"Constructor","text":"<p>new TsvWriter(<code>ir?</code>, <code>options?</code>): <code>TsvWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_114","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_49","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_28","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns_117","title":"Returns","text":"<p><code>TsvWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_116","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>constructor</code></p>"},{"location":"typescript/reference/writer/#properties_7","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_50","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_117","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>ir</code></p>"},{"location":"typescript/reference/writer/#options_29","title":"options","text":"<p><code>protected</code> options: <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_118","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_7","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_7","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_119","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#methods_7","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_7","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:270</p>"},{"location":"typescript/reference/writer/#parameters_115","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_7","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_26","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_118","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_120","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_7","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:151</p>"},{"location":"typescript/reference/writer/#parameters_116","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_32","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_7","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_119","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_121","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>createMappingNode</code></p>"},{"location":"typescript/reference/writer/#handletable_2","title":"handleTable()","text":"<p><code>protected</code> handleTable(<code>tableHeadElements</code>, <code>tableBodyElements</code>, <code>tableElement</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1358</p>"},{"location":"typescript/reference/writer/#parameters_117","title":"Parameters","text":""},{"location":"typescript/reference/writer/#tableheadelements_2","title":"tableHeadElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tablebodyelements_2","title":"tableBodyElements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#tableelement_2","title":"tableElement","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_27","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_120","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_122","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>handleTable</code></p>"},{"location":"typescript/reference/writer/#indentmappings_7","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:177</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_118","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_7","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_14","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_14","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_121","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_123","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_7","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:193</p>"},{"location":"typescript/reference/writer/#parameters_119","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_7","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_15","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_15","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_122","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_124","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_7","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>MarkdownOptions</code></p> <p>Defined in: packages/poml/writer.ts:1414</p>"},{"location":"typescript/reference/writer/#parameters_120","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_30","title":"options?","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#returns_123","title":"Returns","text":"<p><code>MarkdownOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_15","title":"Overrides","text":"<p><code>CsvWriter</code>.<code>initializeOptions</code></p>"},{"location":"typescript/reference/writer/#makebox_2","title":"makeBox()","text":"<p><code>protected</code> makeBox(<code>text</code>, <code>layout</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:674</p>"},{"location":"typescript/reference/writer/#parameters_121","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_10","title":"text","text":"<p><code>string</code> | <code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#layout_2","title":"layout","text":"<p><code>\"block\"</code> | <code>\"newline\"</code> | <code>\"inline\"</code></p>"},{"location":"typescript/reference/writer/#element_33","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_124","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_125","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>makeBox</code></p>"},{"location":"typescript/reference/writer/#markuplanguage_2","title":"markupLanguage()","text":"<p><code>protected</code> markupLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1418</p>"},{"location":"typescript/reference/writer/#returns_125","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#overrides_16","title":"Overrides","text":"<p><code>CsvWriter</code>.<code>markupLanguage</code></p>"},{"location":"typescript/reference/writer/#processmultipletablerows_2","title":"processMultipleTableRows()","text":"<p><code>protected</code> processMultipleTableRows(<code>elements</code>, <code>$</code>): <code>StringTableRow</code>[]</p> <p>Defined in: packages/poml/writer.ts:1047</p>"},{"location":"typescript/reference/writer/#parameters_122","title":"Parameters","text":""},{"location":"typescript/reference/writer/#elements_3","title":"elements","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_28","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_126","title":"Returns","text":"<p><code>StringTableRow</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_126","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>processMultipleTableRows</code></p>"},{"location":"typescript/reference/writer/#raiseerror_7","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:206</p>"},{"location":"typescript/reference/writer/#parameters_123","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_9","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_34","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_127","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_127","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>raiseError</code></p>"},{"location":"typescript/reference/writer/#raiseerrorandreturnempty_2","title":"raiseErrorAndReturnEmpty()","text":"<p><code>protected</code> raiseErrorAndReturnEmpty(<code>message</code>, <code>element</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:669</p>"},{"location":"typescript/reference/writer/#parameters_124","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_10","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_35","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_128","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_128","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>raiseErrorAndReturnEmpty</code></p>"},{"location":"typescript/reference/writer/#reset_7","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_125","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_51","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_129","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_129","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_7","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_126","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_11","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_7","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_7","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_31","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_130","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_130","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>truncateText</code></p>"},{"location":"typescript/reference/writer/#write_7","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:251</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_127","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_52","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_131","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_131","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_7","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1229</p>"},{"location":"typescript/reference/writer/#parameters_128","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_36","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_29","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_132","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_132","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writeelementtreeimpl_2","title":"writeElementTreeImpl()","text":"<p><code>protected</code> writeElementTreeImpl(<code>element</code>, <code>$</code>): <code>MarkdownBox</code></p> <p>Defined in: packages/poml/writer.ts:1387</p>"},{"location":"typescript/reference/writer/#parameters_129","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_37","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_30","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_133","title":"Returns","text":"<p><code>MarkdownBox</code></p>"},{"location":"typescript/reference/writer/#inherited-from_133","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>writeElementTreeImpl</code></p>"},{"location":"typescript/reference/writer/#writemessages_7","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:262</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_130","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_53","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_134","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_134","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_7","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:392</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_131","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_54","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_135","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_135","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_7","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:382</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_132","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_55","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_136","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_136","title":"Inherited from","text":"<p><code>CsvWriter</code>.<code>writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#xmlwriter","title":"XmlWriter","text":"<p>Defined in: packages/poml/writer.ts:1665</p>"},{"location":"typescript/reference/writer/#extends_8","title":"Extends","text":"<ul> <li><code>SerializeWriter</code>\\&lt;<code>XmlOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_8","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_8","title":"Constructor","text":"<p>new XmlWriter(<code>ir?</code>, <code>options?</code>): <code>XmlWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_133","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_56","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_32","title":"options?","text":"<p><code>XmlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_137","title":"Returns","text":"<p><code>XmlWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_137","title":"Inherited from","text":"<p><code>SerializeWriter&lt;XmlOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_8","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_57","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_138","title":"Inherited from","text":"<p><code>SerializeWriter.ir</code></p>"},{"location":"typescript/reference/writer/#options_33","title":"options","text":"<p><code>protected</code> options: <code>XmlOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_139","title":"Inherited from","text":"<p><code>SerializeWriter.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_8","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_8","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_140","title":"Inherited from","text":"<p><code>SerializeWriter.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#accessors_1","title":"Accessors","text":""},{"location":"typescript/reference/writer/#serializelanguage_1","title":"serializeLanguage","text":""},{"location":"typescript/reference/writer/#get-signature_1","title":"Get Signature","text":"<p>get serializeLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1666</p>"},{"location":"typescript/reference/writer/#returns_138","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#overrides_17","title":"Overrides","text":"<p><code>SerializeWriter.serializeLanguage</code></p>"},{"location":"typescript/reference/writer/#methods_8","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_8","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:270</p>"},{"location":"typescript/reference/writer/#parameters_134","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_8","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_31","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_139","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_141","title":"Inherited from","text":"<p><code>SerializeWriter.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_8","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:151</p>"},{"location":"typescript/reference/writer/#parameters_135","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_38","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_8","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_140","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_142","title":"Inherited from","text":"<p><code>SerializeWriter.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_8","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:177</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_136","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_8","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_16","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_16","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_141","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_143","title":"Inherited from","text":"<p><code>SerializeWriter.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_8","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:193</p>"},{"location":"typescript/reference/writer/#parameters_137","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_8","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_17","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_17","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_142","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_144","title":"Inherited from","text":"<p><code>SerializeWriter.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_8","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>XmlOptions</code></p> <p>Defined in: packages/poml/writer.ts:1670</p>"},{"location":"typescript/reference/writer/#parameters_138","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_34","title":"options?","text":"<p><code>XmlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_143","title":"Returns","text":"<p><code>XmlOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_18","title":"Overrides","text":"<p><code>SerializeWriter.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#parseany_1","title":"parseAny()","text":"<p><code>protected</code> parseAny(<code>element</code>, <code>$</code>, <code>singleAsObject?</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1463</p>"},{"location":"typescript/reference/writer/#parameters_139","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_39","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_32","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#singleasobject_1","title":"singleAsObject?","text":"<p><code>boolean</code></p>"},{"location":"typescript/reference/writer/#returns_144","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_145","title":"Inherited from","text":"<p><code>SerializeWriter.parseAny</code></p>"},{"location":"typescript/reference/writer/#parseenv_1","title":"parseEnv()","text":"<p><code>protected</code> parseEnv(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1553</p>"},{"location":"typescript/reference/writer/#parameters_140","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_40","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_33","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_145","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_146","title":"Inherited from","text":"<p><code>SerializeWriter.parseEnv</code></p>"},{"location":"typescript/reference/writer/#parsegeneralelement_1","title":"parseGeneralElement()","text":"<p><code>protected</code> parseGeneralElement(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1581</p>"},{"location":"typescript/reference/writer/#parameters_141","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_41","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_34","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_146","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_147","title":"Inherited from","text":"<p><code>SerializeWriter.parseGeneralElement</code></p>"},{"location":"typescript/reference/writer/#parseobject_1","title":"parseObject()","text":"<p><code>protected</code> parseObject(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1539</p>"},{"location":"typescript/reference/writer/#parameters_142","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_42","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_35","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_147","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_148","title":"Inherited from","text":"<p><code>SerializeWriter.parseObject</code></p>"},{"location":"typescript/reference/writer/#parsetext_1","title":"parseText()","text":"<p><code>protected</code> parseText(<code>element</code>, <code>text</code>, <code>type</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1428</p>"},{"location":"typescript/reference/writer/#parameters_143","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_43","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#text_12","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#type_1","title":"type","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_148","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_149","title":"Inherited from","text":"<p><code>SerializeWriter.parseText</code></p>"},{"location":"typescript/reference/writer/#raiseerror_8","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:206</p>"},{"location":"typescript/reference/writer/#parameters_144","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_11","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_44","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_149","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_150","title":"Inherited from","text":"<p><code>SerializeWriter.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_8","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_145","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_58","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_150","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_151","title":"Inherited from","text":"<p><code>SerializeWriter.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_8","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_146","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_13","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_8","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_8","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_35","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_151","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_152","title":"Inherited from","text":"<p><code>SerializeWriter.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_8","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:251</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_147","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_59","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_152","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_153","title":"Inherited from","text":"<p><code>SerializeWriter.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_8","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1727</p>"},{"location":"typescript/reference/writer/#parameters_148","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_45","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_36","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_153","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_19","title":"Overrides","text":"<p><code>SerializeWriter.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_8","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:262</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_149","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_60","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_154","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_154","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_8","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:392</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_150","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_61","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_155","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_155","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_8","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:382</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_151","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_62","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_156","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_156","title":"Inherited from","text":"<p><code>SerializeWriter.writeWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#yamlwriter","title":"YamlWriter","text":"<p>Defined in: packages/poml/writer.ts:1630</p>"},{"location":"typescript/reference/writer/#extends_9","title":"Extends","text":"<ul> <li><code>SerializeWriter</code>\\&lt;<code>YamlOptions</code>&gt;</li> </ul>"},{"location":"typescript/reference/writer/#constructors_9","title":"Constructors","text":""},{"location":"typescript/reference/writer/#constructor_9","title":"Constructor","text":"<p>new YamlWriter(<code>ir?</code>, <code>options?</code>): <code>YamlWriter</code></p> <p>Defined in: packages/poml/writer.ts:75</p>"},{"location":"typescript/reference/writer/#parameters_152","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_63","title":"ir?","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#options_36","title":"options?","text":"<p><code>YamlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_157","title":"Returns","text":"<p><code>YamlWriter</code></p>"},{"location":"typescript/reference/writer/#inherited-from_157","title":"Inherited from","text":"<p><code>SerializeWriter&lt;YamlOptions&gt;.constructor</code></p>"},{"location":"typescript/reference/writer/#properties_9","title":"Properties","text":""},{"location":"typescript/reference/writer/#ir_64","title":"ir","text":"<p><code>protected</code> ir: <code>string</code> = <code>''</code></p> <p>Defined in: packages/poml/writer.ts:71</p>"},{"location":"typescript/reference/writer/#inherited-from_158","title":"Inherited from","text":"<p><code>SerializeWriter.ir</code></p>"},{"location":"typescript/reference/writer/#options_37","title":"options","text":"<p><code>protected</code> options: <code>YamlOptions</code></p> <p>Defined in: packages/poml/writer.ts:72</p>"},{"location":"typescript/reference/writer/#inherited-from_159","title":"Inherited from","text":"<p><code>SerializeWriter.options</code></p>"},{"location":"typescript/reference/writer/#tokenizercache_9","title":"tokenizerCache","text":"<p><code>protected</code> tokenizerCache: <code>object</code> = <code>{}</code></p> <p>Defined in: packages/poml/writer.ts:73</p>"},{"location":"typescript/reference/writer/#index-signature_9","title":"Index Signature","text":"<p>[<code>model</code>: <code>string</code>]: <code>Tiktoken</code></p>"},{"location":"typescript/reference/writer/#inherited-from_160","title":"Inherited from","text":"<p><code>SerializeWriter.tokenizerCache</code></p>"},{"location":"typescript/reference/writer/#accessors_2","title":"Accessors","text":""},{"location":"typescript/reference/writer/#serializelanguage_2","title":"serializeLanguage","text":""},{"location":"typescript/reference/writer/#get-signature_2","title":"Get Signature","text":"<p>get serializeLanguage(): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:1631</p>"},{"location":"typescript/reference/writer/#returns_158","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#overrides_20","title":"Overrides","text":"<p><code>SerializeWriter.serializeLanguage</code></p>"},{"location":"typescript/reference/writer/#methods_9","title":"Methods","text":""},{"location":"typescript/reference/writer/#assignspeakers_9","title":"assignSpeakers()","text":"<p>assignSpeakers(<code>result</code>, <code>$</code>): <code>SpeakerNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:270</p>"},{"location":"typescript/reference/writer/#parameters_153","title":"Parameters","text":""},{"location":"typescript/reference/writer/#result_9","title":"result","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#_37","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_159","title":"Returns","text":"<p><code>SpeakerNode</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_161","title":"Inherited from","text":"<p><code>SerializeWriter.assignSpeakers</code></p>"},{"location":"typescript/reference/writer/#createmappingnode_9","title":"createMappingNode()","text":"<p><code>protected</code> createMappingNode(<code>element</code>, <code>outputLength</code>): <code>MappingNode</code></p> <p>Defined in: packages/poml/writer.ts:151</p>"},{"location":"typescript/reference/writer/#parameters_154","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_46","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#outputlength_9","title":"outputLength","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_160","title":"Returns","text":"<p><code>MappingNode</code></p>"},{"location":"typescript/reference/writer/#inherited-from_162","title":"Inherited from","text":"<p><code>SerializeWriter.createMappingNode</code></p>"},{"location":"typescript/reference/writer/#indentmappings_9","title":"indentMappings()","text":"<p><code>protected</code> indentMappings(<code>mappings</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>MappingNode</code>[]</p> <p>Defined in: packages/poml/writer.ts:177</p> <p>Add an offset to mapping nodes.</p>"},{"location":"typescript/reference/writer/#parameters_155","title":"Parameters","text":""},{"location":"typescript/reference/writer/#mappings_9","title":"mappings","text":"<p><code>MappingNode</code>[]</p> <p>Original mappings.</p>"},{"location":"typescript/reference/writer/#indent_18","title":"indent","text":"<p><code>number</code></p> <p>The offset amount.</p>"},{"location":"typescript/reference/writer/#ignorebefore_18","title":"ignoreBefore","text":"<p><code>number</code></p> <p>Ignore the mappings before this index.</p>"},{"location":"typescript/reference/writer/#returns_161","title":"Returns","text":"<p><code>MappingNode</code>[]</p> <ul> <li>The new mappings.</li> </ul>"},{"location":"typescript/reference/writer/#inherited-from_163","title":"Inherited from","text":"<p><code>SerializeWriter.indentMappings</code></p>"},{"location":"typescript/reference/writer/#indentmultimedia_9","title":"indentMultiMedia()","text":"<p><code>protected</code> indentMultiMedia(<code>multimedia</code>, <code>indent</code>, <code>ignoreBefore</code>): <code>PositionalContentMultiMedia</code>[]</p> <p>Defined in: packages/poml/writer.ts:193</p>"},{"location":"typescript/reference/writer/#parameters_156","title":"Parameters","text":""},{"location":"typescript/reference/writer/#multimedia_9","title":"multimedia","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#indent_19","title":"indent","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#ignorebefore_19","title":"ignoreBefore","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#returns_162","title":"Returns","text":"<p><code>PositionalContentMultiMedia</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_164","title":"Inherited from","text":"<p><code>SerializeWriter.indentMultiMedia</code></p>"},{"location":"typescript/reference/writer/#initializeoptions_9","title":"initializeOptions()","text":"<p><code>protected</code> initializeOptions(<code>options?</code>): <code>YamlOptions</code></p> <p>Defined in: packages/poml/writer.ts:1635</p>"},{"location":"typescript/reference/writer/#parameters_157","title":"Parameters","text":""},{"location":"typescript/reference/writer/#options_38","title":"options?","text":"<p><code>YamlOptions</code></p>"},{"location":"typescript/reference/writer/#returns_163","title":"Returns","text":"<p><code>YamlOptions</code></p>"},{"location":"typescript/reference/writer/#overrides_21","title":"Overrides","text":"<p><code>SerializeWriter.initializeOptions</code></p>"},{"location":"typescript/reference/writer/#parseany_2","title":"parseAny()","text":"<p><code>protected</code> parseAny(<code>element</code>, <code>$</code>, <code>singleAsObject?</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1463</p>"},{"location":"typescript/reference/writer/#parameters_158","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_47","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_38","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#singleasobject_2","title":"singleAsObject?","text":"<p><code>boolean</code></p>"},{"location":"typescript/reference/writer/#returns_164","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_165","title":"Inherited from","text":"<p><code>SerializeWriter.parseAny</code></p>"},{"location":"typescript/reference/writer/#parseenv_2","title":"parseEnv()","text":"<p><code>protected</code> parseEnv(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1553</p>"},{"location":"typescript/reference/writer/#parameters_159","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_48","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_39","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_165","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_166","title":"Inherited from","text":"<p><code>SerializeWriter.parseEnv</code></p>"},{"location":"typescript/reference/writer/#parsegeneralelement_2","title":"parseGeneralElement()","text":"<p><code>protected</code> parseGeneralElement(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1581</p>"},{"location":"typescript/reference/writer/#parameters_160","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_49","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_40","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_166","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_167","title":"Inherited from","text":"<p><code>SerializeWriter.parseGeneralElement</code></p>"},{"location":"typescript/reference/writer/#parseobject_2","title":"parseObject()","text":"<p><code>protected</code> parseObject(<code>element</code>, <code>$</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1539</p>"},{"location":"typescript/reference/writer/#parameters_161","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_50","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_41","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_167","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_168","title":"Inherited from","text":"<p><code>SerializeWriter.parseObject</code></p>"},{"location":"typescript/reference/writer/#parsetext_2","title":"parseText()","text":"<p><code>protected</code> parseText(<code>element</code>, <code>text</code>, <code>type</code>): <code>any</code></p> <p>Defined in: packages/poml/writer.ts:1428</p>"},{"location":"typescript/reference/writer/#parameters_162","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_51","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#text_14","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#type_2","title":"type","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_168","title":"Returns","text":"<p><code>any</code></p>"},{"location":"typescript/reference/writer/#inherited-from_169","title":"Inherited from","text":"<p><code>SerializeWriter.parseText</code></p>"},{"location":"typescript/reference/writer/#raiseerror_9","title":"raiseError()","text":"<p><code>protected</code> raiseError(<code>message</code>, <code>element</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:206</p>"},{"location":"typescript/reference/writer/#parameters_163","title":"Parameters","text":""},{"location":"typescript/reference/writer/#message_12","title":"message","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#element_52","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#returns_169","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#inherited-from_170","title":"Inherited from","text":"<p><code>SerializeWriter.raiseError</code></p>"},{"location":"typescript/reference/writer/#reset_9","title":"reset()","text":"<p><code>protected</code> reset(<code>ir</code>): <code>void</code></p> <p>Defined in: packages/poml/writer.ts:86</p>"},{"location":"typescript/reference/writer/#parameters_164","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_65","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_170","title":"Returns","text":"<p><code>void</code></p>"},{"location":"typescript/reference/writer/#inherited-from_171","title":"Inherited from","text":"<p><code>SerializeWriter.reset</code></p>"},{"location":"typescript/reference/writer/#truncatetext_9","title":"truncateText()","text":"<p><code>protected</code> truncateText(<code>text</code>, <code>charLimit?</code>, <code>tokenLimit?</code>, <code>options?</code>): <code>string</code></p> <p>Defined in: packages/poml/writer.ts:90</p>"},{"location":"typescript/reference/writer/#parameters_165","title":"Parameters","text":""},{"location":"typescript/reference/writer/#text_15","title":"text","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#charlimit_9","title":"charLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#tokenlimit_9","title":"tokenLimit?","text":"<p><code>number</code></p>"},{"location":"typescript/reference/writer/#options_39","title":"options?","text":"<p><code>TruncateOptions</code></p>"},{"location":"typescript/reference/writer/#returns_171","title":"Returns","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#inherited-from_172","title":"Inherited from","text":"<p><code>SerializeWriter.truncateText</code></p>"},{"location":"typescript/reference/writer/#write_9","title":"write()","text":"<p>write(<code>ir</code>): <code>RichContent</code></p> <p>Defined in: packages/poml/writer.ts:251</p> <p>Convert an IR string into RichContent without exposing mapping information.</p> <p>The method delegates to writeWithSourceMap and then collapses the returned segments back into a single rich content value.</p>"},{"location":"typescript/reference/writer/#parameters_166","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_66","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_172","title":"Returns","text":"<p><code>RichContent</code></p>"},{"location":"typescript/reference/writer/#inherited-from_173","title":"Inherited from","text":"<p><code>SerializeWriter.write</code></p>"},{"location":"typescript/reference/writer/#writeelementtree_9","title":"writeElementTree()","text":"<p>writeElementTree(<code>element</code>, <code>$</code>): <code>WriterPartialResult</code></p> <p>Defined in: packages/poml/writer.ts:1642</p>"},{"location":"typescript/reference/writer/#parameters_167","title":"Parameters","text":""},{"location":"typescript/reference/writer/#element_53","title":"element","text":"<p><code>Cheerio</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"typescript/reference/writer/#_42","title":"$","text":"<p><code>CheerioAPI</code></p>"},{"location":"typescript/reference/writer/#returns_173","title":"Returns","text":"<p><code>WriterPartialResult</code></p>"},{"location":"typescript/reference/writer/#overrides_22","title":"Overrides","text":"<p><code>SerializeWriter.writeElementTree</code></p>"},{"location":"typescript/reference/writer/#writemessages_9","title":"writeMessages()","text":"<p>writeMessages(<code>ir</code>): <code>Message</code>[]</p> <p>Defined in: packages/poml/writer.ts:262</p> <p>Convert an IR string into an array of speaker messages.</p> <p>It internally uses writeMessagesWithSourceMap and removes the mapping information from each message.</p>"},{"location":"typescript/reference/writer/#parameters_168","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_67","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_174","title":"Returns","text":"<p><code>Message</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_174","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessages</code></p>"},{"location":"typescript/reference/writer/#writemessageswithsourcemap_9","title":"writeMessagesWithSourceMap()","text":"<p>writeMessagesWithSourceMap(<code>ir</code>): <code>SourceMapMessage</code>[]</p> <p>Defined in: packages/poml/writer.ts:392</p> <p>Similar to writeWithSourceMap but groups the segments into speaker messages.</p>"},{"location":"typescript/reference/writer/#parameters_169","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_68","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_175","title":"Returns","text":"<p><code>SourceMapMessage</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_175","title":"Inherited from","text":"<p><code>SerializeWriter.writeMessagesWithSourceMap</code></p>"},{"location":"typescript/reference/writer/#writewithsourcemap_9","title":"writeWithSourceMap()","text":"<p>writeWithSourceMap(<code>ir</code>): <code>SourceMapRichContent</code>[]</p> <p>Defined in: packages/poml/writer.ts:382</p> <p>Render the IR string and return detailed mapping for each produced content segment.</p> <p>Each returned SourceMapRichContent describes the slice of the input IR that generated the piece of output.</p>"},{"location":"typescript/reference/writer/#parameters_170","title":"Parameters","text":""},{"location":"typescript/reference/writer/#ir_69","title":"ir","text":"<p><code>string</code></p>"},{"location":"typescript/reference/writer/#returns_176","title":"Returns","text":"<p><code>SourceMapRichContent</code>[]</p>"},{"location":"typescript/reference/writer/#inherited-from_176","title":"Inherited from","text":"<p><code>SerializeWriter.writeWithSourceMap</code></p>"},{"location":"vscode/","title":"POML Visual Code Extension","text":"<p>The POML Visual Studio Code extension provides comprehensive support for working with POML files.</p>"},{"location":"vscode/#features","title":"Features","text":"<ul> <li>Syntax Highlighting: Full syntax highlighting for <code>.poml</code> files</li> <li>IntelliSense: Auto-completion and suggestions</li> <li>Preview Panel: Live preview of POML rendering</li> <li>Model Testing: Test prompts directly in VS Code</li> <li>Gallery: Built-in prompt gallery for common patterns</li> </ul>"},{"location":"vscode/#installation","title":"Installation","text":""},{"location":"vscode/#stable-release","title":"Stable Release","text":"<p>Install from Visual Studio Code Marketplace.</p> <p>You can also install the extension manually by downloading the <code>.vsix</code> file from our GitHub releases page and installing it in VS Code via the Extensions view.</p>"},{"location":"vscode/#nightly-build","title":"Nightly Build","text":"<p>Download the nightly build from this index</p> <p>Install the downloaded <code>.vsix</code> file in VS Code via the Extensions view (thanks stackoverflow for the image below).</p> <p></p> <p>Before testing prompts with the POML toolkit, make sure you have configured your preferred LLM model, API key, and endpoint. If these are not set, prompt testing will not work. Configuration instructions.</p>"},{"location":"vscode/configuration/","title":"Configuration","text":"<p>Configure POML in VS Code settings (<code>Ctrl+,</code> or <code>Cmd+,</code>).</p>"},{"location":"vscode/configuration/#example-complete-configuration","title":"Example Complete Configuration","text":"<pre><code>{\n  \"poml.languageModel.provider\": \"openai\",\n  \"poml.languageModel.model\": \"gpt-4o\",\n  \"poml.languageModel.apiKey\": \"sk-your-api-key-here\",\n  \"poml.languageModel.apiUrl\": \"https://api.openai.com/v1/\",\n  \"poml.languageModel.temperature\": 0.7,\n  \"poml.languageModel.maxTokens\": 1500,\n  \"poml.scrollPreviewWithEditor\": true,\n  \"poml.markEditorSelection\": true,\n  \"poml.trace\": \"off\"\n}\n</code></pre>"},{"location":"vscode/configuration/#language-model-configuration","title":"Language Model Configuration","text":"<p>The following settings mainly control the language model used for POML testing feature within VSCode.</p>"},{"location":"vscode/configuration/#language-model-provider","title":"Language Model Provider","text":"<pre><code>{\n  \"poml.languageModel.provider\": \"openai\"\n}\n</code></pre> <p>Options: <code>openai</code>, <code>microsoft</code>, <code>anthropic</code>, <code>google</code> Default: <code>openai</code></p>"},{"location":"vscode/configuration/#model-name","title":"Model Name","text":"<p><pre><code>{\n  \"poml.languageModel.model\": \"gpt-4o\"\n}\n</code></pre> Default: <code>gpt-4o</code> For Azure OpenAI, use the deployment name. For other providers, use the model code name.</p>"},{"location":"vscode/configuration/#temperature","title":"Temperature","text":"<p><pre><code>{\n  \"poml.languageModel.temperature\": 0.5\n}\n</code></pre> Default: <code>0.5</code> Range: <code>0.0</code> to <code>2.0</code> Controls randomness in responses. Lower values are more deterministic.</p>"},{"location":"vscode/configuration/#max-tokens","title":"Max Tokens","text":"<p><pre><code>{\n  \"poml.languageModel.maxTokens\": 2000\n}\n</code></pre> Default: <code>0</code> (unlimited) Maximum number of completion tokens to generate.</p>"},{"location":"vscode/configuration/#api-key","title":"API Key","text":"<p><pre><code>{\n  \"poml.languageModel.apiKey\": \"your-api-key-here\"\n}\n</code></pre> Required for most providers. Keep this secure and never commit to version control.</p>"},{"location":"vscode/configuration/#api-url","title":"API URL","text":"<p><pre><code>{\n  \"poml.languageModel.apiUrl\": \"https://api.openai.com/v1/\"\n}\n</code></pre> Examples: - OpenAI: <code>https://api.openai.com/v1/</code> - Azure OpenAI: <code>https://westeurope.api.cognitive.microsoft.com/</code> - Custom OpenAI-compatible: <code>https://api.example.com/v2/</code></p>"},{"location":"vscode/configuration/#api-version","title":"API Version","text":"<p><pre><code>{\n  \"poml.languageModel.apiVersion\": \"2024-02-15-preview\"\n}\n</code></pre> Optional - Mainly used for OpenAI and Azure OpenAI services.</p>"},{"location":"vscode/configuration/#provider-specific-examples","title":"Provider-Specific Examples","text":""},{"location":"vscode/configuration/#azure-openai","title":"Azure OpenAI","text":"<pre><code>{\n  \"poml.languageModel.provider\": \"microsoft\",\n  \"poml.languageModel.model\": \"my-gpt4-deployment\",\n  \"poml.languageModel.apiKey\": \"your-azure-api-key\",\n  \"poml.languageModel.apiUrl\": \"https://your-resource.openai.azure.com/\",\n  \"poml.languageModel.apiVersion\": \"2024-02-15-preview\"\n}\n</code></pre>"},{"location":"vscode/configuration/#anthropic-claude","title":"Anthropic Claude","text":"<pre><code>{\n  \"poml.languageModel.provider\": \"anthropic\",\n  \"poml.languageModel.model\": \"claude-3-5-sonnet-20241022\",\n  \"poml.languageModel.apiKey\": \"your-anthropic-api-key\"\n}\n</code></pre>"},{"location":"vscode/configuration/#google-gemini","title":"Google Gemini","text":"<pre><code>{\n  \"poml.languageModel.provider\": \"google\",\n  \"poml.languageModel.model\": \"gemini-1.5-pro\",\n  \"poml.languageModel.apiKey\": \"your-google-api-key\"\n}\n</code></pre>"},{"location":"vscode/configuration/#preview-editor-settings","title":"Preview &amp; Editor Settings","text":"<p>These features need further testing. Please report bugs if you need this feature but it does not work as expected.</p>"},{"location":"vscode/configuration/#scroll-synchronization","title":"Scroll Synchronization","text":"<p><pre><code>{\n  \"poml.scrollPreviewWithEditor\": true,\n  \"poml.scrollEditorWithPreview\": true\n}\n</code></pre> Default: <code>true</code> Synchronize scrolling between editor and preview panes.</p>"},{"location":"vscode/configuration/#editor-selection","title":"Editor Selection","text":"<p><pre><code>{\n  \"poml.markEditorSelection\": true,\n  \"poml.doubleClickToSwitchToEditor\": true\n}\n</code></pre> Default: <code>true</code> Highlight current editor selection in preview and enable double-click navigation.</p>"},{"location":"vscode/configuration/#development-settings","title":"Development Settings","text":""},{"location":"vscode/configuration/#debugging","title":"Debugging","text":"<p><pre><code>{\n  \"poml.trace\": \"verbose\"\n}\n</code></pre> Options: <code>off</code>, <code>verbose</code> Default: <code>off</code></p> <p>Enable detailed tracing for troubleshooting.</p>"},{"location":"vscode/configuration/#telemetry","title":"Telemetry","text":"<p><pre><code>{\n  \"poml.telemetry.connection\": \"\"\n}\n</code></pre> Default: <code>\"\"</code> (empty) Development setting for telemetry connection string.</p>"},{"location":"vscode/features/","title":"VS Code IntelliSense Features","text":"<p>POML comes with features that enhance your editing experience in Visual Studio Code, offering a more interactive way to work with your prompt files. Here\u2019s how to make the most of these features:</p>"},{"location":"vscode/features/#diagnostics","title":"Diagnostics","text":"<p>The POML extension provides real-time error detection and validation for your <code>.poml</code> files through VS Code's diagnostics system. This helps you catch syntax errors, invalid attributes, and other issues as you write your prompts.</p>"},{"location":"vscode/features/#types-of-diagnostics","title":"Types of Diagnostics","text":"<p>The POML extension detects various types of issues:</p> <ul> <li>Syntax Errors: Invalid XML/POML syntax, unclosed tags, malformed attributes</li> <li>Component Validation: Unknown components or incorrect component usage</li> <li>Attribute Errors: Invalid attributes for specific components or incorrect attribute values</li> <li>File Reference Issues: Problems with referenced context files, stylesheets, or other external resources</li> <li>Expression Evaluation Errors: Issues with template expressions and variable references</li> </ul>"},{"location":"vscode/features/#real-time-validation-and-working-with-multiple-files","title":"Real-time Validation and Working with Multiple Files","text":"<p>Diagnostics are updated automatically as you edit:</p> <ol> <li>On File Save: Complete validation is triggered when you save the file</li> <li>Incremental Updates: Basic syntax checking happens as you type</li> <li>Context-aware: Validation considers your context files and stylesheets for more accurate error reporting</li> </ol> <p>The diagnostics system can validate references across multiple files. It validates that referenced <code>.context.json</code> files exist and are properly formatted. It also checks <code>.stylesheet.json</code> files for syntax and structure issues.</p>"},{"location":"vscode/features/#hover-tooltips","title":"Hover Tooltips","text":"<p>When you hover over tags, attributes, or expression parts in your <code>.poml</code> file, VSCode will display helpful tooltips.</p> <ul> <li>Tags: Hovering over a tag (e.g., <code>&lt;p&gt;</code>) will show you the documentation for that component (if available).</li> <li>Attributes: Hovering over an attribute (e.g., <code>speaker</code> in <code>&lt;p speaker=\"human\"&gt;</code>) will show you the documentation for that attribute, including its type and accepted values.</li> <li>Errors: Hovering over a problematic element, it will show you the error cause and reason, which will help you understand the issue and fix it.</li> </ul> <p>To use it, simply open your <code>.poml</code> file in VSCode and hover over any token.</p>"},{"location":"vscode/features/#side-preview","title":"Side Preview","text":"<p>The side preview feature shows a live rendering of your prompt. As you make changes, you can see how your prompt structure and styles are applied.</p> <p>Install the POML VSCode extension, then open your <code>.poml</code> file. Activate the side preview panel by:</p> <ol> <li>Click Show Preview Button: Click the show preview button at the top-right corner of active editor, or type \"POML: Open POML Preview\" in the command palette and select the command.</li> <li>Side-by-side: The preview will update automatically as you edit.</li> </ol>"},{"location":"vscode/features/#auto-completion","title":"Auto-completion","text":"<p>Autocompletion assists you by suggesting component tags, attribute names, and possible attribute values. This helps ensure your syntax is correct and speeds up development.</p> <p>While editing a <code>.poml</code> file in VSCode:</p> <ul> <li>Tag Completion: Start typing a tag name (e.g., <code>&lt;p</code>). VSCode with the POML extension will offer completions, such as <code>&lt;p&gt;</code>, <code>&lt;paragraph&gt;</code>, or other available components. It also suggests closing tags.</li> <li>Attribute Completion: Inside an opening tag, type a space or start typing an attribute name (e.g., <code>class</code>).  You'll see suggestions for valid attributes for that component (e.g., <code>className</code>).</li> <li>Attribute Value Completion:  For some attributes, POML can suggest possible values. For example, if you type <code>&lt;question speaker=\"</code>, you might see suggestions like <code>\"human\"</code> or <code>\"ai\"</code>.</li> </ul> <p>This feature significantly improves the efficiency and accuracy of writing POML code.</p>"},{"location":"vscode/features/#expression-evaluation-with-codelens","title":"Expression Evaluation with CodeLens","text":"<p>The POML extension provides CodeLens buttons that allow you to evaluate template variables directly in your editor. This powerful debugging feature helps you understand what values your expressions produce locally.</p>"},{"location":"vscode/features/#how-to-use-expression-evaluation","title":"How to Use Expression Evaluation","text":"<ol> <li>CodeLens Buttons: When you open a <code>.poml</code> file, you'll see \"\u25b6\ufe0f Evaluate\" buttons appearing above expressions and variables.</li> <li>Click to Evaluate: Click any \"\u25b6\ufe0f Evaluate\" button to execute the expression and see its result.</li> <li>View Output: Go to View \u2192 Output in VS Code. Results are displayed in the POML Language Server output channel.</li> </ol>"},{"location":"vscode/features/#what-gets-evaluated","title":"What Gets Evaluated","text":"<p>The CodeLens evaluation feature works with:</p> <ul> <li>Template Expressions: Any <code>{{ expression }}</code> in your POML content</li> <li>Variable Definitions: <code>&lt;let&gt;</code> element value attributes</li> <li>Control Flow: Expressions in <code>for</code> and <code>if</code> attributes</li> <li>Schema Expressions: Expressions in meta elements with <code>lang=\"expr\"</code></li> </ul>"},{"location":"vscode/features/#example","title":"Example","text":"<pre><code>&lt;poml&gt;\n  &lt;let name=\"items\" value='[\"apple\", \"banana\", \"cherry\"]' /&gt;\n  &lt;let name=\"count\" value=\"items.length\" /&gt;\n\n  &lt;p&gt;We have {{ count }} items: {{ items.join(', ') }}&lt;/p&gt;\n\n  &lt;meta type=\"responseSchema\" lang=\"expr\"&gt;\n    z.object({\n      total: z.number().max(count),\n      items: z.array(z.enum(items))\n    })\n  &lt;/meta&gt;\n&lt;/poml&gt;\n</code></pre> <p>In this example, you can evaluate: - The <code>items</code> array definition to see <code>[\"apple\", \"banana\", \"cherry\"]</code> - The <code>count</code> calculation to see <code>3</code> - The template expressions to see <code>\"3\"</code> and <code>\"apple, banana, cherry\"</code> - The schema expression to see the generated Zod schema object</p>"},{"location":"vscode/features/#testing-prompts","title":"Testing Prompts","text":"<p>POML provides integrated testing capabilities that allow you to test your prompts directly within VS Code against various language models. This feature helps you validate your prompts and see their output without leaving the editor.</p>"},{"location":"vscode/features/#testing-with-chat-models","title":"Testing with Chat Models","text":"<p>Use the Test current prompt on Chat Models command to test your <code>.poml</code> file with chat-based language models. This sends your prompt to the configured language model and displays the response in VS Code's output panel.</p>"},{"location":"vscode/features/#testing-with-text-completion-models","title":"Testing with Text Completion Models","text":"<p>For non-chat models, use the Test current prompt on Text Completion Models command. This is useful for testing prompts designed for text completion rather than conversational AI models.</p>"},{"location":"vscode/features/#rerunning-tests","title":"Rerunning Tests","text":"<p>The Clear output and rerun last test command allows you to quickly clear the previous output and rerun your last test, making it easy to iterate on your prompts.</p>"},{"location":"vscode/features/#aborting-tests","title":"Aborting Tests","text":"<p>If a test is taking too long or you need to stop it, use the Abort current prompt test command to cancel the ongoing request.</p> <p>Before testing prompts, make sure you have configured your language model settings: - Set your model provider (OpenAI, Azure OpenAI, Anthropic, or Google GenAI) - Configure your API key and endpoint URL - Choose your preferred model name</p>"},{"location":"vscode/features/#prompt-gallery","title":"Prompt Gallery","text":"<p>The Prompt Gallery provides access to pre-built prompt templates and allows you to manage your own custom prompts. Access it from the POML activity bar in VS Code.</p>"},{"location":"vscode/features/#built-in-templates","title":"Built-in Templates","text":"<p>The gallery includes several built-in prompt templates covering common use cases: - Ask: General question-answering prompts - Chat: Conversational prompts - Edit: Text editing and revision prompts</p> <p>Gallery prompts can be used with the POML chat participant by typing <code>@poml /&lt;prompt-name&gt;</code> in any VS Code chat interface, where <code>&lt;prompt-name&gt;</code> is the name of your gallery prompt.</p>"},{"location":"vscode/features/#managing-custom-prompts","title":"Managing Custom Prompts","text":"<p>You can add your own prompts to the gallery:</p> <ol> <li>Add Prompt: Click the plus (+) icon in the gallery view to add a new prompt template</li> <li>Edit Prompt: Use the pencil icon to modify existing user-created prompts</li> <li>Delete Prompt: Remove prompts you no longer need with the trash icon</li> </ol> <p>The usage of custom prompts are the same as built-in prompts. You can use them in the POML chat participant or test them directly.</p>"},{"location":"vscode/features/#list-of-available-commands","title":"List of Available Commands","text":"Command Description <code>poml.test</code> Test current prompt on Chat Models <code>poml.testNonChat</code> Test current prompt on Text Completion Models <code>poml.testRerun</code> Clear output and rerun last test <code>poml.testAbort</code> Abort current prompt test <code>poml.showPreview</code> Open POML Preview <code>poml.showPreviewToSide</code> Open POML Preview to the Side <code>poml.showLockedPreviewToSide</code> Open Locked POML Preview <code>poml.showSource</code> Show Source File <code>poml.addContextFile</code> Add Context File <code>poml.addStylesheetFile</code> Add Stylesheet File <code>poml.removeContextFile</code> Remove Context File <code>poml.removeStylesheetFile</code> Remove Stylesheet File <code>poml.gallery.addPrompt</code> Add Prompt to Gallery <code>poml.gallery.deletePrompt</code> Delete Prompt from Gallery <code>poml.gallery.editPrompt</code> Edit Prompt in Gallery <code>poml.telemetry.completion</code> Telemetry: Completion"}]}